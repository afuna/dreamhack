<?page
wintitle=>users
body<=

<?h1 Who's using <?memd?>? h1?>
<p>This is an initial list of <?memd?> users that I've heard about.  Please mail me if you're using it, optionally with a little description of how, and I'll add you to this page.</p>

<ul>
<li><b><a href="http://www.livejournal.com/">LiveJournal</a></b> -- fully dynamic blogging site with insane number of unnecessary features, doing over 20 million hits per day.  We made <?memd?> for LiveJournal and we hardly ever hit the databases anymore.  A few APIs in our codebase still unconditionally hit our databases, but they're being rewritten to be <?memd?>-aware.  <?memd?> made a night-and-day difference in the speed of our site.</li>

<li><b><a href="http://www.slashdot.org/">Slashdot</a></b> -- I showed Jamie McCarthy <?memd?> at OSCON 2003 and how we use it on LiveJournal (including our <?memd?>-farm stats page) and he started frothing at the mouth and began implementing it that night in his hotel room.  Now Slashdot uses it for caching comments in their rendered form, saving both DB load and web CPU load.  They're reportedly working on using <?memd?> in more parts of their code.</li>

<li><b><a href="http://www.wikipedia.org/">WikiPedia</a></b> -- Brion Vibber added support to WikiPedia's MediaWiki backend.  ( <a href="http://mail.wikipedia.org/pipermail/wikitech-l/2003-August/005514.html">original announcement</a>).</li>

<li><b><a href="http://vampirefreaks.com">VampireFreaks</a></b>:
<i>"Hey man. I just wanted to thank you for memcached, I just started
using it on http://vampirefreaks.com , a site which gets over a
million page hits a day and has been really slowing down the server.
I've already implemented memcached in a few key spots which determine
the number of users online as well as the number of current users, and
it seems to have helped a lot, I am sure I will be putting it into
more parts of the code as well.  Feel free to put us on the memcached
users page if you like."</i></li>

<li><b><a href="http://sourceforge.net">SourceForge</a></b></li>

<li><b><a href="http://www.revelex.com/">Revelex</a></b>: <i>"... We have tried using MySQL, NFS-mounted flat-files and even NFS-mounted RAM drives to no avail. To date, only memcached has been able to keep up with our needs. ..."</i></li>

<li><b><a href="http://www.howardstern.com/">HowardStern.com</a></b>: <i>"We've been struggling to keep the hardware matched to the traffic
level and ever-growing database size. I've now implemented memcached
across major sections of the site and the vBulletin-based forum. We're
using three memcached servers to support the one large mySQL server.
The performance improvement has been tremendous and it allows me to
have an elegant memory caching solution always available instead of
my own cache on the webservers' filesystems, as I had been doing."</i></li>

<li><b><a href="http://www.kayak.com/">Kayak.com</a></b>: memcached allowed
Kayak.com to increase capacity of our real-time flight and hotel
search engine by one order of magnitude.</li>

<li><b><a href="http://www.fotolog.com/">Fotolog.com</a></b>:  "I have a new memcached user to add to your list: we here at Fotolog, the
world's largest photo blogging community, now use it and we love it.  I just rolled our first code to use it into production
today and it has been a lifesaver.  I can't wait to start using it in places where we had been relying on Berkeley databases to
offload some database work.  We are not some wimpy million page a day site, either.  Fotolog is a billion+ pages/month site (35
to 40 million views/day is pretty typical for us).  We had recently overcome some significant DB-related performance issues
which allowed our site traffic to explode, and it started to bog down again under the heavy traffic load (getting back up
towards 10 seconds for a page to load sometimes during the peak periods).  The servers were churning away each recreating a list
every time when it could easily be shared in the same form for at least 5 or 10 minutes.  So we introduced memcache, creating a
distributed 30-server cluster with 4 gigs available in total and made a very minor code mod to use memcache, and our peak period
load times dropped back down to the 2 second or so range.  It has allowed for continued growth and incredible efficiency.  I
can't say when I've ever been so pleased with something that worked so simply."</li>


</ul>

<?h1 Coming soon... h1?>
<p>These people are (or reportedly are, or were) working on memcache support to speed up their sites.</p>

<ul>
<li><b><a href="http://www.everything2.com/">Everything2</a></b> -- <a href="http://lists.danga.com/pipermail/memcached/2003-August/000044.html">adding support</a> for <?memd?> to the ecore nodecache over at <a href="http://www.everydevel.com">everydevel.com</a>.</li>

<li><b><a href="http://www.sourceforge.net/">SourceForge</a></b> -- adding support, which is why the Python API for <?memd?> was created.</li>


</ul>

<!--

Date: Fri, 24 Mar 2006 10:03:50 -0800
From: John Kelley <jkelley@divxcorp.com>
To: brad@danga.com
Subject: Another proud memcached user

Just thought I'd drop you a note to let you know that we've been using
memcached on RedVsBlue.com for the past 9 months and we absolutely love
it! Our DBs loads have gone down by about 60% and we've been able to
implement some neat new features that we wouldn't have been about to do
without it.

Cheers,
John Kelley


-----------

Hello brad!


We are using memcached on www.gsmclub.pl - Polish biggest GSM vortal.

It is really amazing how it can decrease server load and how simply it
is to implement it on a site.  :)  We have started also to use it on
every domain on our server cause it helps us a lot!  :)

Good job!

PS: If you are so kind please insert this testimonial on your users
site: http://www.danga.com/memcached/users.bml

Best regards,
Krzysztof Milkowski
-- admin@tophosting.pl







Hey Brad,

The page http://www.danga.com/memcached/users.bml says you're interested in
hearing from other people using memcached. I'm not sure whether you're still
interested in adding sites to that page, but here goes nothin'...

I'm using it successfully in a couple of places:

* On washingtonpost.com, every application I put together has used memcached.
The biggest example of this is the U.S. Congress Votes Database,
http://projects.washingtonpost.com/congress/ .

* A personal project of mine, chicagocrime.org, uses memcached extensively.
This site has gotten a fair bit of attention as one of the original Google
Maps mashups.

* Finally, the Python Web framework Django (which powers both the Washington
Post stuff and chicagocrime.org) has some pretty sweet memcached bindings.
See djangoproject.com and http://www.djangoproject.com/documentation/cache/
if you're at all interested.

Thanks very much for memcached!

Adrian

-- Adrian Holovaty Editor of editorial innovations, washingtonpost.com Personal stuff: holovaty.com | chicagocrime.org | djangoproject.com





Date: Thu, 04 Nov 2004 10:43:39 -0700
From: Myles Grant <myles@mylesgrant.com>
To: brad@danga.com
Subject: I'm now using Memcached

Brad,

I attended your memcached talk at OSCON 2004, and then later we all went
to that Stonehenge party.  You gave me a ride home -- thanks for that.

Anyway, I've just started using memcached on my site, blogskins.com, and
since you want to be notified if people use it... here you go.

BlogSkins gets decent traffic, and is still only a single dedicated
server.  Lately, the load has been climbing to steadily unacceptable
levels.  The culprit?  Tons of locked MySQL threads.  So today I
installed Memcached and added it in a few strategic places.  The 3 stats
in the upper right of every page (number of users/skins/downloads) are
now pulled from memcached instead of doing a 'select count(id) from
users/skins/downloads' on every page load.  Any time one of those stats
would change (new user, new skin, etc), the value is simply deleted from
the cache and refreshed on the next page load.

I am also storing the user object for logged-in users instead of hitting
the users table every page load.  The same strategy of deleting the
cached value and waiting for a refresh on info change is used here.

So far, memcached seems to be helping dramatically.  Load has dropped
from the 20-30 range into the 0-2 range.  Hopefully it keeps up.  But
this is a great improvement for a half hour's work.

Thanks for an insanely useful tool.  I'm in love.

-Myles


From: timeless <time@digg.com>

http://digg.com -- When I started at Digg, I recommended we give
MemcacheD a try. I implemented the MemcacheD cluster and initial site
mods to use it. Our page load times for /diggall (a popular URL on the
site) went from an average of 5 seconds to an average of sub-second
response times. Since then, our developers have gone wild with
MemcacheD, using it in very sophisticated ways to make a lot of page
load time improvements across the site. RAWK!


------

From: G Class <gclass@spamarrest.com>
To: Brad Fitzpatrick <brad@danga.com>
Subject: Memcached
Parts/Attachments:
   1   OK    ~15 lines  Text
   2 Shown   ~33 lines  Text
----------------------------------------

Hey Bradfitz,
?
I thought I'd mention to you that we started using Memcached for some of our
high frequency db queries and it has been working really well.? The daemon is
stable and the saved data retrieval time has allowed us to implement features
that would have been impractical through MySQL or session caching.
?
A big thanks to Danga for their contributions to the free software? community,
--
Gregory Class and Daryn Nakhuda
Spam Arrest LLC
http://spamarrest.com

-----

Date: Sun, 28 Nov 2004 20:19:36 -0700
From: Sean Reifschneider <jafo@tummy.com>
To: brad@danga.com
Subject: JOTWeb2 now supports memcached.

I just wanted to let you know that the JOTWeb2 python-based web application
development system now includes support for simple page caching using
memcached.  More information is available at http://jotweb.tummy.com/

The current support uses a fairly naive scheme: during page rendering a
"expiration seconds" value can be set to something other than the default
"0".  Cache lookup decisions are based entirely on the URI passed and the
expiration time.  Of course this means that you cannot use it for HTML form
submissions, but JOTWeb2's virtual URIs make this a non-issue for most
issues where you'd want caching of forms(.../blogs/index.html?start=5&count=20).

A more sophistocated caching mechanism is is in the late design stages, but
probably won't be implemented for a while because the current caching
mechanism works extremely well, when combined with a few site design
restrictions.

I've just turned it on for the most expensive pages on our site
(http://www.tummy.com/journals/), which are generated from a database, and
it's dropped the page render time from 250 to 500ms down to 15 to 20ms.

memcached is extremely cool.  I had been toying with the idea of adding
some sort of caching to JOTWeb for probably a year, and had put it off
because of all the details it involved.  I ran across a slashdot article
about memcached a while back and realized that memcached could be used to
do much of the heavy lifting, eliminating many of the details required for
the caching.  I was able to implement a simple but effective page caching
mechanism in JOTWeb2 in literally 45 minutes one night before giving a
presentation on JOTWeb2 to a local users group.

Feel free to put any of this that you are interested in up on the memcached
Users page.

Thanks,
Sean

-----

Date: Sun, 05 Dec 2004 10:42:40 +0100
From: Bjoern Sjut <bjoern.sjut@gmx.net>
To: brad@danga.com
Subject: Memcached User

Hi Brad,

from the latest news post on www.last.fm , it seems they're using
Memcached as well: http://www.last.fm/forum/897/_/13046

Just thought you might be interested in knowing.
Best, Bjoern

----



-->

<=body
page?>
