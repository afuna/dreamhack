dw-free/cgi-bin/LJ/S2.pm-41-use DW::SiteScheme;
dw-free/cgi-bin/LJ/S2.pm-42-use LJ::PageStats;
dw-free/cgi-bin/LJ/S2.pm-43-
dw-free/cgi-bin/LJ/S2.pm:44:# TEMP HACK
dw-free/cgi-bin/LJ/S2.pm-45-sub get_s2_reader {
dw-free/cgi-bin/LJ/S2.pm-46-    return LJ::get_dbh("s2slave", "slave", "master");
dw-free/cgi-bin/LJ/S2.pm-47-}
--
dw-free/cgi-bin/LJ/S2.pm-285-        my $status = $ctx->[S2::SCRATCH]->{'status'} || 200;
dw-free/cgi-bin/LJ/S2.pm-286-        $r->status($status);
dw-free/cgi-bin/LJ/S2.pm-287-        $r->content_type($ctx->[S2::SCRATCH]->{'ctype'} || $ctype);
dw-free/cgi-bin/LJ/S2.pm:288:        # FIXME: not necessary in ModPerl 2.0?
dw-free/cgi-bin/LJ/S2.pm-289-        #$r->send_http_header();
dw-free/cgi-bin/LJ/S2.pm-290-    };
dw-free/cgi-bin/LJ/S2.pm-291-
--
dw-free/cgi-bin/LJ/S2.pm-816-        push @layers, $style{$_} if $style{$_};
dw-free/cgi-bin/LJ/S2.pm-817-    }
dw-free/cgi-bin/LJ/S2.pm-818-
dw-free/cgi-bin/LJ/S2.pm:819:    # TODO: memcache this.  only make core S2 (which uses the DB) load
dw-free/cgi-bin/LJ/S2.pm-820-    # when we can't get all the s2compiled stuff from memcache.
dw-free/cgi-bin/LJ/S2.pm-821-    # compare s2styles.modtime with s2compiled.comptime to see if memcache
dw-free/cgi-bin/LJ/S2.pm-822-    # version is accurate or not.
--
dw-free/cgi-bin/LJ/S2.pm-2051-    }
dw-free/cgi-bin/LJ/S2.pm-2052-    $e->{metadata}->{groups} = $group_names if $group_names;
dw-free/cgi-bin/LJ/S2.pm-2053-
dw-free/cgi-bin/LJ/S2.pm:2054:    # TODO: Populate this field more intelligently later, but for now this will
dw-free/cgi-bin/LJ/S2.pm-2055-    #   hopefully disuade people from hardcoding logic like this into their S2
dw-free/cgi-bin/LJ/S2.pm-2056-    #   layers when they do weird parsing/manipulation of the text member in
dw-free/cgi-bin/LJ/S2.pm-2057-    #   untrusted layers.
--
dw-free/cgi-bin/LJ/S2.pm-2486-        'is_heading' => $link->{'url'} ? 0 : 1,
dw-free/cgi-bin/LJ/S2.pm-2487-        'url' => LJ::ehtml($link->{'url'}),
dw-free/cgi-bin/LJ/S2.pm-2488-        'title' => LJ::ehtml($link->{'title'}),
dw-free/cgi-bin/LJ/S2.pm:2489:        'children' => $link->{'children'} || [], # TODO: implement parent-child relationships
dw-free/cgi-bin/LJ/S2.pm-2490-    };
dw-free/cgi-bin/LJ/S2.pm-2491-}
dw-free/cgi-bin/LJ/S2.pm-2492-
--
dw-free/cgi-bin/LJ/S2.pm-2516-    push @$lks, qw(manage_membership trust watch post_entry track message);
dw-free/cgi-bin/LJ/S2.pm-2517-    push @$lks, 'tell_friend' if LJ::is_enabled('tellafriend');
dw-free/cgi-bin/LJ/S2.pm-2518-
dw-free/cgi-bin/LJ/S2.pm:2519:    # TODO: Figure out some way to use the userinfo_linkele hook here?
dw-free/cgi-bin/LJ/S2.pm-2520-
dw-free/cgi-bin/LJ/S2.pm-2521-    return $o;
dw-free/cgi-bin/LJ/S2.pm-2522-}
--
dw-free/cgi-bin/LJ/S2.pm-3943-
dw-free/cgi-bin/LJ/S2.pm-3944-    # display subject as-is (cleaned but not wrapped in a link)
dw-free/cgi-bin/LJ/S2.pm-3945-    # if subject has a link and we are on a full comment/single entry view and don't need to click through
dw-free/cgi-bin/LJ/S2.pm:3946:    # TODO: how about other HTML tags?
dw-free/cgi-bin/LJ/S2.pm-3947-    if ( $subject =~ /href/ && ( $this->{full} || $LJ::S2::CURR_PAGE->{view} eq "reply" ||  $LJ::S2::CURR_PAGE->{view} eq "entry" ) ) {
dw-free/cgi-bin/LJ/S2.pm-3948-        return $subject;
dw-free/cgi-bin/LJ/S2.pm-3949-    } else {
--
dw-free/cgi-bin/LJ/SpellCheck.pm-194-    return $result;
dw-free/cgi-bin/LJ/SpellCheck.pm-195-}
dw-free/cgi-bin/LJ/SpellCheck.pm-196-
dw-free/cgi-bin/LJ/SpellCheck.pm:197:# FIXME: this will cause a segfault if called from a controller
dw-free/cgi-bin/LJ/SpellCheck.pm-198-# but IPC::Open2 won't work under mod_perl2, so we can't use the other version if gearman isn't set up
dw-free/cgi-bin/LJ/SpellCheck.pm-199-sub _spawn_spellcheck {
dw-free/cgi-bin/LJ/SpellCheck.pm-200-    my ( $self, $text, $no_ehtml ) = @_;
--
dw-free/cgi-bin/LJ/Poll/Question.pm-371-
dw-free/cgi-bin/LJ/Poll/Question.pm-372-    my $href_opts = sub {
dw-free/cgi-bin/LJ/Poll/Question.pm-373-        my $page = shift;
dw-free/cgi-bin/LJ/Poll/Question.pm:374:        # FIXME: this is a quick hack to disable the paging JS on /poll/index since it doesn't work
dw-free/cgi-bin/LJ/Poll/Question.pm-375-        # better fix will await another look at that whole area
dw-free/cgi-bin/LJ/Poll/Question.pm-376-        return  ( $opts{no_class} ? "" : " class='LJ_PollAnswerLink'" ) .
dw-free/cgi-bin/LJ/Poll/Question.pm-377-                " lj_pollid='$pollid'".
--
dw-free/cgi-bin/LJ/NotificationMethod/IM.pm-89-sub configured {
dw-free/cgi-bin/LJ/NotificationMethod/IM.pm-90-    my $class = shift;
dw-free/cgi-bin/LJ/NotificationMethod/IM.pm-91-
dw-free/cgi-bin/LJ/NotificationMethod/IM.pm:92:    # FIXME: check if jabber server is configured
dw-free/cgi-bin/LJ/NotificationMethod/IM.pm-93-    return 1;
dw-free/cgi-bin/LJ/NotificationMethod/IM.pm-94-}
dw-free/cgi-bin/LJ/NotificationMethod/IM.pm-95-
--
dw-free/cgi-bin/LJ/NotificationMethod/IM.pm-97-    my $class = shift;
dw-free/cgi-bin/LJ/NotificationMethod/IM.pm-98-    my $u = shift;
dw-free/cgi-bin/LJ/NotificationMethod/IM.pm-99-
dw-free/cgi-bin/LJ/NotificationMethod/IM.pm:100:    # FIXME: check if user can use IM
dw-free/cgi-bin/LJ/NotificationMethod/IM.pm-101-    return $u->is_person ? 1 : 0;
dw-free/cgi-bin/LJ/NotificationMethod/IM.pm-102-}
dw-free/cgi-bin/LJ/NotificationMethod/IM.pm-103-
--
dw-free/cgi-bin/LJ/NotificationMethod/Email.pm-160-sub configured {
dw-free/cgi-bin/LJ/NotificationMethod/Email.pm-161-    my $class = shift;
dw-free/cgi-bin/LJ/NotificationMethod/Email.pm-162-
dw-free/cgi-bin/LJ/NotificationMethod/Email.pm:163:    # FIXME: should probably have more checks
dw-free/cgi-bin/LJ/NotificationMethod/Email.pm-164-    return $LJ::BOGUS_EMAIL && $LJ::SITENAMESHORT ? 1 : 0;
dw-free/cgi-bin/LJ/NotificationMethod/Email.pm-165-}
dw-free/cgi-bin/LJ/NotificationMethod/Email.pm-166-
--
dw-free/cgi-bin/LJ/DB.pm-344-    if ( $LJ::DB_LOG_HOST && $LJ::HAVE_DBI_PROFILE ) {
dw-free/cgi-bin/LJ/DB.pm-345-        $LJ::DB_REPORT_HANDLES{ $dbh->{Name} } = $dbh;
dw-free/cgi-bin/LJ/DB.pm-346-
dw-free/cgi-bin/LJ/DB.pm:347:        # :TODO: Explain magic number
dw-free/cgi-bin/LJ/DB.pm-348-        $dbh->{Profile} ||= "2/DBI::Profile";
dw-free/cgi-bin/LJ/DB.pm-349-
dw-free/cgi-bin/LJ/DB.pm-350-        # And turn off useless (to us) on_destroy() reports, too.
--
dw-free/cgi-bin/LJ/Error.pm-275-# override this
dw-free/cgi-bin/LJ/Error.pm-276-sub as_string {
dw-free/cgi-bin/LJ/Error.pm-277-    my $self = shift;
dw-free/cgi-bin/LJ/Error.pm:278:    # FIXME: show line/file/function, show some fields?  maybe?  that are simple values?
dw-free/cgi-bin/LJ/Error.pm-279-}
dw-free/cgi-bin/LJ/Error.pm-280-
dw-free/cgi-bin/LJ/Error.pm-281-# automatic type returned when something dies with just a string
--
dw-free/cgi-bin/LJ/Capabilities.pm-181-         $LJ::READONLY_CLUSTER_ADVISORY{$u->{clusterid}} &&
dw-free/cgi-bin/LJ/Capabilities.pm-182-         ! LJ::get_cap($u, "avoid_readonly"))) {
dw-free/cgi-bin/LJ/Capabilities.pm-183-
dw-free/cgi-bin/LJ/Capabilities.pm:184:        # HACK for desperate moments.  in when_needed mode, see if
dw-free/cgi-bin/LJ/Capabilities.pm-185-        # database is locky first
dw-free/cgi-bin/LJ/Capabilities.pm-186-        my $cid = $u->{clusterid};
dw-free/cgi-bin/LJ/Capabilities.pm-187-        if ($LJ::READONLY_CLUSTER_ADVISORY{$cid} eq "when_needed") {
--
dw-free/cgi-bin/LJ/Links.pm-62-    # fix up the data structure
dw-free/cgi-bin/LJ/Links.pm-63-    foreach (@$linkobj) {
dw-free/cgi-bin/LJ/Links.pm-64-
dw-free/cgi-bin/LJ/Links.pm:65:        # TODO: build child relationships
dw-free/cgi-bin/LJ/Links.pm-66-        #       and store in $_->{'children'}
dw-free/cgi-bin/LJ/Links.pm-67-
dw-free/cgi-bin/LJ/Links.pm-68-        # ordernum/parentnum are only exposed via the
--
dw-free/cgi-bin/LJ/Links.pm-152-        $post->{"link_${num}_url"} = $url;
dw-free/cgi-bin/LJ/Links.pm-153-        push @$linkobj, { 'title' => $title, 'url' => $url };
dw-free/cgi-bin/LJ/Links.pm-154-
dw-free/cgi-bin/LJ/Links.pm:155:        # TODO: build child relationships
dw-free/cgi-bin/LJ/Links.pm-156-        #       push @{$linkobj->[$parentnum-1]->{'children'}}, $myself
dw-free/cgi-bin/LJ/Links.pm-157-    }
dw-free/cgi-bin/LJ/Links.pm-158-
--
dw-free/cgi-bin/LJ/Tags.pm-275-# args: uobj, opts?
dw-free/cgi-bin/LJ/Tags.pm-276-# des-uobj: User object to get tags for.
dw-free/cgi-bin/LJ/Tags.pm-277-# des-opts: Optional hashref; key can be 'remote' to filter tags to only ones that remote can see
dw-free/cgi-bin/LJ/Tags.pm:278:# returns: Hashref; key being tag id, value being a large hashref (FIXME: document)
dw-free/cgi-bin/LJ/Tags.pm-279-# </LJFUNC>
dw-free/cgi-bin/LJ/Tags.pm-280-sub get_usertags {
dw-free/cgi-bin/LJ/Tags.pm-281-    return {} unless LJ::is_enabled('tags');
--
dw-free/cgi-bin/LJ/Tags.pm-479-
dw-free/cgi-bin/LJ/Tags.pm-480-    # we don't allow identity users to add tags, even when tag permissions would otherwise allow any user on the site
dw-free/cgi-bin/LJ/Tags.pm-481-    # exception are communities that explicitly allow identity users to post in them
dw-free/cgi-bin/LJ/Tags.pm:482:    # FIXME: perhaps we should restrict on all users, but allow for more restrictive settings such as members?
dw-free/cgi-bin/LJ/Tags.pm-483-    return undef unless $remote->is_personal || $remote->is_identity && $u->prop( 'identity_posting' );
dw-free/cgi-bin/LJ/Tags.pm-484-    return undef if $u->has_banned( $remote );
dw-free/cgi-bin/LJ/Tags.pm-485-
--
dw-free/cgi-bin/LJ/Tags.pm-1280-
dw-free/cgi-bin/LJ/Tags.pm-1281-    # see if the tag we're renaming TO already exists as a keyword,
dw-free/cgi-bin/LJ/Tags.pm-1282-    # if so, error and suggest merging the tags
dw-free/cgi-bin/LJ/Tags.pm:1283:    # FIXME: ask user to merge and then merge
dw-free/cgi-bin/LJ/Tags.pm-1284-    my $tags = LJ::Tags::get_usertags( $u );
dw-free/cgi-bin/LJ/Tags.pm-1285-    return $err->( LJ::Lang::ml( 'taglib.error.exists', { tagname => LJ::ehtml( $newname ) } ) )
dw-free/cgi-bin/LJ/Tags.pm-1286-        if $tags->{$newkwid};
--
dw-free/cgi-bin/LJ/User.pm-287-    }
dw-free/cgi-bin/LJ/User.pm-288-
dw-free/cgi-bin/LJ/User.pm-289-    # populate some default friends groups
dw-free/cgi-bin/LJ/User.pm:290:    # FIXME(mark): this should probably be removed or refactored, especially
dw-free/cgi-bin/LJ/User.pm-291-    # since editfriendgroups is dying/dead
dw-free/cgi-bin/LJ/User.pm-292-#    LJ::do_request(
dw-free/cgi-bin/LJ/User.pm-293-#                   {
--
dw-free/cgi-bin/LJ/User.pm-347-
dw-free/cgi-bin/LJ/User.pm-348-sub delete_and_purge_completely {
dw-free/cgi-bin/LJ/User.pm-349-    my $u = shift;
dw-free/cgi-bin/LJ/User.pm:350:    # FIXME: delete from user tables
dw-free/cgi-bin/LJ/User.pm:351:    # FIXME: delete from global tables
dw-free/cgi-bin/LJ/User.pm-352-    my $dbh = LJ::get_db_writer();
dw-free/cgi-bin/LJ/User.pm-353-
dw-free/cgi-bin/LJ/User.pm-354-    my @tables = qw(user useridmap reluser priv_map infohistory email password);
--
dw-free/cgi-bin/LJ/User.pm-1064-    my $memkey = [$u->userid, "timeactive:" . $u->userid];
dw-free/cgi-bin/LJ/User.pm-1065-    my $active;
dw-free/cgi-bin/LJ/User.pm-1066-    unless (defined($active = LJ::MemCache::get($memkey))) {
dw-free/cgi-bin/LJ/User.pm:1067:        # FIXME: die if unable to get handle? This was left verbatim from
dw-free/cgi-bin/LJ/User.pm-1068-        # refactored code.
dw-free/cgi-bin/LJ/User.pm-1069-        my $dbcr = LJ::get_cluster_def_reader($u) or return 0;
dw-free/cgi-bin/LJ/User.pm-1070-        $active = $dbcr->selectrow_array("SELECT timeactive FROM clustertrack2 ".
--
dw-free/cgi-bin/LJ/User.pm-1420-
dw-free/cgi-bin/LJ/User.pm-1421-
dw-free/cgi-bin/LJ/User.pm-1422-sub last_transition {
dw-free/cgi-bin/LJ/User.pm:1423:    # FIXME: this function is unused as of Aug 2009 - kareila
dw-free/cgi-bin/LJ/User.pm-1424-    my ($u, $what) = @_;
dw-free/cgi-bin/LJ/User.pm-1425-    croak "invalid user object" unless LJ::isu($u);
dw-free/cgi-bin/LJ/User.pm-1426-
--
dw-free/cgi-bin/LJ/User.pm-1490-
dw-free/cgi-bin/LJ/User.pm-1491-
dw-free/cgi-bin/LJ/User.pm-1492-sub note_transition {
dw-free/cgi-bin/LJ/User.pm:1493:    # FIXME: this function is unused as of Aug 2009 - kareila
dw-free/cgi-bin/LJ/User.pm-1494-    my ($u, $what, $from, $to) = @_;
dw-free/cgi-bin/LJ/User.pm-1495-    croak "invalid user object" unless LJ::isu($u);
dw-free/cgi-bin/LJ/User.pm-1496-
--
dw-free/cgi-bin/LJ/User.pm-1745-
dw-free/cgi-bin/LJ/User.pm-1746-
dw-free/cgi-bin/LJ/User.pm-1747-sub transition_list {
dw-free/cgi-bin/LJ/User.pm:1748:    # FIXME: this function is unused as of Aug 2009 - kareila
dw-free/cgi-bin/LJ/User.pm-1749-    my ($u, $what) = @_;
dw-free/cgi-bin/LJ/User.pm-1750-    croak "invalid user object" unless LJ::isu($u);
dw-free/cgi-bin/LJ/User.pm-1751-
dw-free/cgi-bin/LJ/User.pm-1752-    my $dbh = LJ::get_db_writer()
dw-free/cgi-bin/LJ/User.pm-1753-        or die "unable to contact global db master";
dw-free/cgi-bin/LJ/User.pm-1754-
dw-free/cgi-bin/LJ/User.pm:1755:    # FIXME: return list of transition object singleton instances?
dw-free/cgi-bin/LJ/User.pm-1756-    my @list = ();
dw-free/cgi-bin/LJ/User.pm-1757-    my $sth = $dbh->prepare("SELECT time, `before`, `after` " .
dw-free/cgi-bin/LJ/User.pm-1758-                            "FROM usertrans WHERE userid=? AND what=?");
--
dw-free/cgi-bin/LJ/User.pm-1775-
dw-free/cgi-bin/LJ/User.pm-1776-sub uncache_prop {
dw-free/cgi-bin/LJ/User.pm-1777-    my ($u, $name) = @_;
dw-free/cgi-bin/LJ/User.pm:1778:    my $prop = LJ::get_prop("user", $name) or die; # FIXME: use exceptions
dw-free/cgi-bin/LJ/User.pm-1779-    my $userid = $u->userid;
dw-free/cgi-bin/LJ/User.pm-1780-    LJ::MemCache::delete( [$userid, "uprop:$userid:$prop->{id}"] );
dw-free/cgi-bin/LJ/User.pm-1781-    delete $u->{$name};
--
dw-free/cgi-bin/LJ/User.pm-1806-
dw-free/cgi-bin/LJ/User.pm-1807-# format unixtimestamp according to the user's timezone setting
dw-free/cgi-bin/LJ/User.pm-1808-sub format_time {
dw-free/cgi-bin/LJ/User.pm:1809:    # FIXME: this function is unused as of Aug 2009 - kareila
dw-free/cgi-bin/LJ/User.pm-1810-    my $u = shift;
dw-free/cgi-bin/LJ/User.pm-1811-    my $time = shift;
dw-free/cgi-bin/LJ/User.pm-1812-
--
dw-free/cgi-bin/LJ/User.pm-2082-
dw-free/cgi-bin/LJ/User.pm-2083-
dw-free/cgi-bin/LJ/User.pm-2084-sub can_show_onlinestatus {
dw-free/cgi-bin/LJ/User.pm:2085:    # FIXME: this function is unused as of Aug 2009 - kareila
dw-free/cgi-bin/LJ/User.pm-2086-    my $u = shift;
dw-free/cgi-bin/LJ/User.pm-2087-    my $remote = shift;
dw-free/cgi-bin/LJ/User.pm-2088-    croak "invalid user object passed"
--
dw-free/cgi-bin/LJ/User.pm-3616-
dw-free/cgi-bin/LJ/User.pm-3617-    # would this transaction go over the limit?
dw-free/cgi-bin/LJ/User.pm-3618-    if ($sum + $count > $opp) {
dw-free/cgi-bin/LJ/User.pm:3619:        # FIXME: optionally log to rateabuse, unless caller is doing it
dw-free/cgi-bin/LJ/User.pm-3620-        # themselves somehow, like with the "loginstall" table.
dw-free/cgi-bin/LJ/User.pm-3621-        return 0;
dw-free/cgi-bin/LJ/User.pm-3622-    }
--
dw-free/cgi-bin/LJ/User.pm-3782-
dw-free/cgi-bin/LJ/User.pm-3783-########################################################################
dw-free/cgi-bin/LJ/User.pm-3784-### 11. Birthdays and Age-Related Functions
dw-free/cgi-bin/LJ/User.pm:3785:###   FIXME: Some of these may be outdated when we remove under-13 accounts.
dw-free/cgi-bin/LJ/User.pm-3786-
dw-free/cgi-bin/LJ/User.pm-3787-=head2 Birthdays and Age-Related Functions
dw-free/cgi-bin/LJ/User.pm-3788-=cut
--
dw-free/cgi-bin/LJ/User.pm-4846-    my $default = {
dw-free/cgi-bin/LJ/User.pm-4847-        order => [ [ "tags", "displaydate" ],
dw-free/cgi-bin/LJ/User.pm-4848-
dw-free/cgi-bin/LJ/User.pm:4849:                   # FIXME: should be [ "status"  "journal" "comments" "age_restriction" ] %]
dw-free/cgi-bin/LJ/User.pm-4850-                   [ "access", "journal", "currents", "comments", "age_restriction" ],
dw-free/cgi-bin/LJ/User.pm-4851-
dw-free/cgi-bin/LJ/User.pm:4852:                   # FIXME: should be [ "icons" "crosspost" "scheduled" ]
dw-free/cgi-bin/LJ/User.pm-4853-                   [ "icons", "crosspost" ],
dw-free/cgi-bin/LJ/User.pm-4854-                ],
dw-free/cgi-bin/LJ/User.pm-4855-        show => {
--
dw-free/cgi-bin/LJ/User.pm-4948-#           'start_date' - UTC date after which to look for match
dw-free/cgi-bin/LJ/User.pm-4949-#           'end_date' - UTC date before which to look for match
dw-free/cgi-bin/LJ/User.pm-4950-#           'return' - if 'count' just return the count
dw-free/cgi-bin/LJ/User.pm:4951:#           FIXME: Add caching?
dw-free/cgi-bin/LJ/User.pm-4952-# </LJFUNC>
dw-free/cgi-bin/LJ/User.pm-4953-sub get_post_ids {
dw-free/cgi-bin/LJ/User.pm-4954-    my ($u, %opts) = @_;
--
dw-free/cgi-bin/LJ/User.pm-5081-    foreach my $ri (@recent) {
dw-free/cgi-bin/LJ/User.pm-5082-        my $entry = LJ::Entry->new($u, jitemid => $ri->{itemid});
dw-free/cgi-bin/LJ/User.pm-5083-        push @objs, $entry;
dw-free/cgi-bin/LJ/User.pm:5084:        # FIXME: populate the $entry with security/posterid/alldatepart/ownerid/rlogtime
dw-free/cgi-bin/LJ/User.pm-5085-    }
dw-free/cgi-bin/LJ/User.pm-5086-    return @objs;
dw-free/cgi-bin/LJ/User.pm-5087-}
--
dw-free/cgi-bin/LJ/User.pm-5141-    if (length $old && $draft =~ /^\Q$old\E(.+)/s) {
dw-free/cgi-bin/LJ/User.pm-5142-        my $new = $1;
dw-free/cgi-bin/LJ/User.pm-5143-        my $appending = sub {
dw-free/cgi-bin/LJ/User.pm:5144:            my $prop = LJ::get_prop("user", "entry_draft") or die; # FIXME: use exceptions
dw-free/cgi-bin/LJ/User.pm-5145-            my $rv = $u->do("UPDATE userpropblob SET value = CONCAT(value, ?) WHERE userid=? AND upropid=? AND LENGTH(value)=?",
dw-free/cgi-bin/LJ/User.pm-5146-                            undef, $new, $u->userid, $prop->{id}, length $old);
dw-free/cgi-bin/LJ/User.pm-5147-            return 0 unless $rv > 0;
--
dw-free/cgi-bin/LJ/User.pm-5151-        push @methods, [ "append", $appending, 40 + length $new ];
dw-free/cgi-bin/LJ/User.pm-5152-    }
dw-free/cgi-bin/LJ/User.pm-5153-
dw-free/cgi-bin/LJ/User.pm:5154:    # FIXME: prepending/middle insertion (the former being just the latter), as
dw-free/cgi-bin/LJ/User.pm-5155-    # well as appending, wihch we could then get rid of
dw-free/cgi-bin/LJ/User.pm-5156-
dw-free/cgi-bin/LJ/User.pm-5157-    # try the methods in increasing order
--
dw-free/cgi-bin/LJ/User.pm-5246-
dw-free/cgi-bin/LJ/User.pm-5247-# returns whether or not the user is online on jabber
dw-free/cgi-bin/LJ/User.pm-5248-sub jabber_is_online {
dw-free/cgi-bin/LJ/User.pm:5249:    # FIXME: this function is unused as of Aug 2009 - kareila
dw-free/cgi-bin/LJ/User.pm-5250-    my $u = shift;
dw-free/cgi-bin/LJ/User.pm-5251-
dw-free/cgi-bin/LJ/User.pm-5252-    return keys %{LJ::Jabber::Presence->get_resources($u)} ? 1 : 0;
--
dw-free/cgi-bin/LJ/User.pm-5291-
dw-free/cgi-bin/LJ/User.pm-5292-    my @resources = keys %{LJ::Jabber::Presence->get_resources($self)} or return 0;
dw-free/cgi-bin/LJ/User.pm-5293-
dw-free/cgi-bin/LJ/User.pm:5294:    my $res = $resources[0] or return 0; # FIXME: pick correct server based on priority?
dw-free/cgi-bin/LJ/User.pm-5295-    my $pres = LJ::Jabber::Presence->new($self, $res) or return 0;
dw-free/cgi-bin/LJ/User.pm-5296-    my $ip = $LJ::JABBER_SERVER_IP || '127.0.0.1';
dw-free/cgi-bin/LJ/User.pm-5297-
--
dw-free/cgi-bin/LJ/User.pm-6164-
dw-free/cgi-bin/LJ/User.pm-6165-# interim solution while legacy/ESN notifications are both happening:
dw-free/cgi-bin/LJ/User.pm-6166-# checks possible subscriptions to see if user will get an ESN notification
dw-free/cgi-bin/LJ/User.pm:6167:# THIS IS TEMPORARY. FIXME. Should only be called by talklib.
dw-free/cgi-bin/LJ/User.pm-6168-# params: journal, arg1 (entry ditemid), arg2 (comment talkid)
dw-free/cgi-bin/LJ/User.pm-6169-sub gets_notified {
dw-free/cgi-bin/LJ/User.pm-6170-    my ($u, %params) = @_;
--
dw-free/cgi-bin/LJ/User.pm-7226-Returns true if the userpicmap keyword mappings have a mapid column ( dversion 9 or higher )
dw-free/cgi-bin/LJ/User.pm-7227-
dw-free/cgi-bin/LJ/User.pm-7228-=cut
dw-free/cgi-bin/LJ/User.pm:7229:# FIXME: This probably should be userpics_use_mapid
dw-free/cgi-bin/LJ/User.pm-7230-sub userpic_have_mapid {
dw-free/cgi-bin/LJ/User.pm-7231-    return $_[0]->dversion >= 9;
dw-free/cgi-bin/LJ/User.pm-7232-}
--
dw-free/cgi-bin/LJ/User.pm-7276-
dw-free/cgi-bin/LJ/User.pm-7277-
dw-free/cgi-bin/LJ/User.pm-7278-########################################################################
dw-free/cgi-bin/LJ/User.pm:7279:###  99B. Deprecated (FIXME: we shouldn't need these)
dw-free/cgi-bin/LJ/User.pm-7280-
dw-free/cgi-bin/LJ/User.pm-7281-
dw-free/cgi-bin/LJ/User.pm-7282-# THIS IS DEPRECATED DO NOT USE
--
dw-free/cgi-bin/LJ/User.pm-7286-}
dw-free/cgi-bin/LJ/User.pm-7287-
dw-free/cgi-bin/LJ/User.pm-7288-
dw-free/cgi-bin/LJ/User.pm:7289:# FIXME: Needs updating for WTF
dw-free/cgi-bin/LJ/User.pm-7290-sub opt_showmutualfriends {
dw-free/cgi-bin/LJ/User.pm-7291-    my $u = shift;
dw-free/cgi-bin/LJ/User.pm-7292-    return $u->raw_prop('opt_showmutualfriends') ? 1 : 0;
dw-free/cgi-bin/LJ/User.pm-7293-}
dw-free/cgi-bin/LJ/User.pm-7294-
dw-free/cgi-bin/LJ/User.pm:7295:# FIXME: Needs updating for WTF
dw-free/cgi-bin/LJ/User.pm-7296-# only certain journaltypes can show mutual friends
dw-free/cgi-bin/LJ/User.pm-7297-sub show_mutualfriends {
dw-free/cgi-bin/LJ/User.pm-7298-    my $u = shift;
--
dw-free/cgi-bin/LJ/User.pm-7696-    return 0 unless $u;   # do not auto-vivify $u
dw-free/cgi-bin/LJ/User.pm-7697-    my $uid = $u->userid;
dw-free/cgi-bin/LJ/User.pm-7698-    return 0 unless $uid && $u->clusterid;
dw-free/cgi-bin/LJ/User.pm:7699:    # FIXME: return 1 instead? Callers don't use the return value, so I'm not
dw-free/cgi-bin/LJ/User.pm-7700-    # sure whether 0 means "some error happened" or just "nothing done"
dw-free/cgi-bin/LJ/User.pm-7701-    return 0 unless $u->is_personal || $u->is_community || $u->is_identity;
dw-free/cgi-bin/LJ/User.pm-7702-
--
dw-free/cgi-bin/LJ/User.pm-8003-}
dw-free/cgi-bin/LJ/User.pm-8004-
dw-free/cgi-bin/LJ/User.pm-8005-
dw-free/cgi-bin/LJ/User.pm:8006:# FIXME: this should go away someday... see bug 2760
dw-free/cgi-bin/LJ/User.pm-8007-sub update_user
dw-free/cgi-bin/LJ/User.pm-8008-{
dw-free/cgi-bin/LJ/User.pm-8009-    my ( $u, $ref ) = @_;
--
dw-free/cgi-bin/LJ/User.pm-8547-    my $reject = sub {
dw-free/cgi-bin/LJ/User.pm-8548-        my $errcode = shift;
dw-free/cgi-bin/LJ/User.pm-8549-        my $errmsg = shift;
dw-free/cgi-bin/LJ/User.pm:8550:        # TODO: add $opts to end of check_email and make option
dw-free/cgi-bin/LJ/User.pm-8551-        #       to either return error codes, or let caller supply
dw-free/cgi-bin/LJ/User.pm-8552-        #       a subref to resolve error codes into native language
dw-free/cgi-bin/LJ/User.pm-8553-        #       error messages (probably via BML::ML hash, or something)
--
dw-free/cgi-bin/LJ/User.pm-9310-}
dw-free/cgi-bin/LJ/User.pm-9311-
dw-free/cgi-bin/LJ/User.pm-9312-
dw-free/cgi-bin/LJ/User.pm:9313:# FIXME: Update to pull out S1 support.
dw-free/cgi-bin/LJ/User.pm-9314-# <LJFUNC>
dw-free/cgi-bin/LJ/User.pm-9315-# name: LJ::make_journal
dw-free/cgi-bin/LJ/User.pm-9316-# class:
--
dw-free/cgi-bin/LJ/User.pm-9531-    }
dw-free/cgi-bin/LJ/User.pm-9532-
dw-free/cgi-bin/LJ/User.pm-9533-    # signal to LiveJournal.pm that we can't handle this
dw-free/cgi-bin/LJ/User.pm:9534:    # FIXME: Make this properly invoke siteviews all the time -- once all the views are ready.
dw-free/cgi-bin/LJ/User.pm-9535-    # Most of this if and tons of messy conditionals can go away once all views are done.
dw-free/cgi-bin/LJ/User.pm-9536-    if ( $stylesys == 1 || $stylearg eq 'site' || $stylearg eq 'light' ) {
dw-free/cgi-bin/LJ/User.pm:9537:        my $fallback = "bml"; # FIXME: Should be S2 once everything's done
dw-free/cgi-bin/LJ/User.pm-9538-
dw-free/cgi-bin/LJ/User.pm-9539-        # if we are in this path, and they have style=mine set, it means
dw-free/cgi-bin/LJ/User.pm-9540-        # they either think they can get a S2 styled page but their account
--
dw-free/cgi-bin/LJ/User.pm-9557-        }
dw-free/cgi-bin/LJ/User.pm-9558-
dw-free/cgi-bin/LJ/User.pm-9559-        # there are no BML handlers for these views, so force s2
dw-free/cgi-bin/LJ/User.pm:9560:        # FIXME: Temporaray until talkread/talkpost/month views are converted
dw-free/cgi-bin/LJ/User.pm-9561-        if ( !( { entry => 1, reply => 1, month => 1 }->{$view} ) ) {
dw-free/cgi-bin/LJ/User.pm-9562-            $fallback = "s2";
dw-free/cgi-bin/LJ/User.pm-9563-        }
--
dw-free/cgi-bin/LJ/User.pm-9728-        res  => 1,
dw-free/cgi-bin/LJ/User.pm-9729-        icons => 1,
dw-free/cgi-bin/LJ/User.pm-9730-    );
dw-free/cgi-bin/LJ/User.pm:9731:    # FIXME: pretty this up at some point, to maybe auto-redirect to
dw-free/cgi-bin/LJ/User.pm-9732-    # the external URL or something, but let's just do this for now
dw-free/cgi-bin/LJ/User.pm-9733-    # res is a resource, such as an external stylesheet
dw-free/cgi-bin/LJ/User.pm-9734-    if ( $u->is_identity && !$valid_identity_views{$view} ) {
--
dw-free/cgi-bin/LJ/User.pm-9759-        }
dw-free/cgi-bin/LJ/User.pm-9760-
dw-free/cgi-bin/LJ/User.pm-9761-        # intercept flag to handle_with_bml_ref and instead use siteviews
dw-free/cgi-bin/LJ/User.pm:9762:        # FIXME: Temporary, till everything is converted.
dw-free/cgi-bin/LJ/User.pm-9763-        if ( $opts->{'handle_with_bml_ref'} && ${$opts->{'handle_with_bml_ref'}} && ( $geta->{fallback} eq "s2" || { icons => 1, tag => 1 }->{$view} ) ) {
dw-free/cgi-bin/LJ/User.pm-9764-            $mj = LJ::S2::make_journal($u, "siteviews", $view, $remote, $opts);
dw-free/cgi-bin/LJ/User.pm-9765-        }
--
dw-free/cgi-bin/LJ/Setting.pm-99-    }
dw-free/cgi-bin/LJ/Setting.pm-100-
dw-free/cgi-bin/LJ/Setting.pm-101-    my $err = $errs->{$key}   or return "";
dw-free/cgi-bin/LJ/Setting.pm:102:    # TODO: red is temporary.  move to css.
dw-free/cgi-bin/LJ/Setting.pm-103-    return "<div style='color: red' class='ljinlinesettingerror'>$err</div>";
dw-free/cgi-bin/LJ/Setting.pm-104-}
dw-free/cgi-bin/LJ/Setting.pm-105-
--
dw-free/cgi-bin/LJ/TextUtil.pm-60-# similar to decode_url_string below, but a nicer calling convention.  returns
dw-free/cgi-bin/LJ/TextUtil.pm-61-# a hash of items parsed from the string passed in as the only argument.
dw-free/cgi-bin/LJ/TextUtil.pm-62-
dw-free/cgi-bin/LJ/TextUtil.pm:63:# FIXME: This method using \0 is being used in legacy locations
dw-free/cgi-bin/LJ/TextUtil.pm-64-#  however should be factored out ( to Hash::MultiValue )
dw-free/cgi-bin/LJ/TextUtil.pm-65-#  as soon as the need for the legacy use is removed.
dw-free/cgi-bin/LJ/TextUtil.pm-66-sub parse_args {
--
dw-free/cgi-bin/LJ/TextUtil.pm-622-                    next;
dw-free/cgi-bin/LJ/TextUtil.pm-623-                }
dw-free/cgi-bin/LJ/TextUtil.pm-624-
dw-free/cgi-bin/LJ/TextUtil.pm:625:                # FIXME: ultra ghetto.
dw-free/cgi-bin/LJ/TextUtil.pm-626-                $attr->{$attrname} = LJ::no_utf8_flag($attr->{$attrname});
dw-free/cgi-bin/LJ/TextUtil.pm-627-                $out .= " $attrname=\"" . LJ::ehtml($attr->{$attrname}) . "\"";
dw-free/cgi-bin/LJ/TextUtil.pm-628-            }
--
dw-free/cgi-bin/LJ/Talk.pm-691-    # if it seems necessary.
dw-free/cgi-bin/LJ/Talk.pm-692-    my $rp_memkey = $nodetype eq "L" ? [$u->{'userid'}, "rp:$u->{'userid'}:$nodeid"] : undef;
dw-free/cgi-bin/LJ/Talk.pm-693-    my $rp_count = $rp_memkey ? LJ::MemCache::get($rp_memkey) : 0;
dw-free/cgi-bin/LJ/Talk.pm:694:    $rp_count ||= 0; # avoid warnings, FIXME how can LJ::MemCache::get return undef or sg that is not undef?
dw-free/cgi-bin/LJ/Talk.pm-695-
dw-free/cgi-bin/LJ/Talk.pm-696-    # hook for tests to count memcache gets
dw-free/cgi-bin/LJ/Talk.pm-697-    if ($LJ::_T_GET_TALK_DATA_MEMCACHE) {
--
dw-free/cgi-bin/LJ/Talk.pm-1421-    }
dw-free/cgi-bin/LJ/Talk.pm-1422-}
dw-free/cgi-bin/LJ/Talk.pm-1423-
dw-free/cgi-bin/LJ/Talk.pm:1424:# XXX these strings should be in talk, but moving them means we have
dw-free/cgi-bin/LJ/Talk.pm-1425-# to retranslate.  so for now we're just gonna put it off.
dw-free/cgi-bin/LJ/Talk.pm-1426-my $SC = '/talkpost_do.bml';
dw-free/cgi-bin/LJ/Talk.pm-1427-
--
dw-free/cgi-bin/LJ/Talk.pm-2741-    my $threadurl = LJ::Talk::talkargs($talkurl, "thread=$dtalkid");
dw-free/cgi-bin/LJ/Talk.pm-2742-    my $edited = $comment->{editid} ? 1 : 0;
dw-free/cgi-bin/LJ/Talk.pm-2743-
dw-free/cgi-bin/LJ/Talk.pm:2744:    # FIXME: here we have to use existent comment object, not try to create temporary one.
dw-free/cgi-bin/LJ/Talk.pm-2745-    my $comment_obj = LJ::Comment->new($journalu, dtalkid => $dtalkid);
dw-free/cgi-bin/LJ/Talk.pm-2746-
dw-free/cgi-bin/LJ/Talk.pm-2747-    # check to see if parent post is from a registered livejournal user, and
--
dw-free/cgi-bin/LJ/Talk.pm-3405-        $form->{'userpost'} = $remote->{'user'};
dw-free/cgi-bin/LJ/Talk.pm-3406-        $form->{'usertype'} = "user";
dw-free/cgi-bin/LJ/Talk.pm-3407-    }
dw-free/cgi-bin/LJ/Talk.pm:3408:    # FIXME: XXXevan hack:  remove me when we fix preview.
dw-free/cgi-bin/LJ/Talk.pm-3409-    $init->{cookie_auth} = $cookie_auth;
dw-free/cgi-bin/LJ/Talk.pm-3410-
dw-free/cgi-bin/LJ/Talk.pm-3411-    # test accounts may only comment on other test accounts.
--
dw-free/cgi-bin/LJ/Talk.pm-3668-    # unixify line-endings
dw-free/cgi-bin/LJ/Talk.pm-3669-    $form->{'body'} =~ s/\r\n/\n/g;
dw-free/cgi-bin/LJ/Talk.pm-3670-
dw-free/cgi-bin/LJ/Talk.pm:3671:    # FIXME: remove when we no longer support BML
dw-free/cgi-bin/LJ/Talk.pm-3672-    $form->{textcaptcha_challenge} = [ split /\0/, $form->{textcaptcha_challenge} ];
dw-free/cgi-bin/LJ/Talk.pm-3673-
dw-free/cgi-bin/LJ/Talk.pm-3674-    # now check for UTF-8 correctness, it must hold
--
dw-free/cgi-bin/LJ/Talk.pm-3876-    # check for dup ID in memcache.
dw-free/cgi-bin/LJ/Talk.pm-3877-    my $memkey;
dw-free/cgi-bin/LJ/Talk.pm-3878-    if (@LJ::MEMCACHE_SERVERS) {
dw-free/cgi-bin/LJ/Talk.pm:3879:        # avoid warnings FIXME this should be done elsewhere
dw-free/cgi-bin/LJ/Talk.pm-3880-        foreach my $field (qw(body subject subjecticon preformat picture_keyword)) {
dw-free/cgi-bin/LJ/Talk.pm-3881-            $comment->{$field} = '' if not defined $comment->{$field};
dw-free/cgi-bin/LJ/Talk.pm-3882-        }
--
dw-free/cgi-bin/LJ/Talk.pm-3891-    # they don't have a duplicate...
dw-free/cgi-bin/LJ/Talk.pm-3892-    unless ($jtalkid) {
dw-free/cgi-bin/LJ/Talk.pm-3893-        my ( $posteru, $kw ) = ( $comment->{u}, $comment->{picture_keyword} );
dw-free/cgi-bin/LJ/Talk.pm:3894:        # XXX do select and delete $talkprop{'picture_keyword'} if they're lying
dw-free/cgi-bin/LJ/Talk.pm-3895-        my $pic = LJ::Userpic->new_from_keyword( $posteru, $kw );
dw-free/cgi-bin/LJ/Talk.pm-3896-        delete $comment->{picture_keyword} unless $pic && $pic->state eq 'N';
dw-free/cgi-bin/LJ/Talk.pm-3897-        $comment->{pic} = $pic;
dw-free/cgi-bin/LJ/Talk.pm-3898-
dw-free/cgi-bin/LJ/Talk.pm-3899-        # put the post in the database
dw-free/cgi-bin/LJ/Talk.pm:3900:        $item->{anum} ||= 0; # avoid warning FIXME this should be done elsewhere
dw-free/cgi-bin/LJ/Talk.pm-3901-        my $ditemid = $item->{itemid}*256 + $item->{anum};
dw-free/cgi-bin/LJ/Talk.pm-3902-        $jtalkid = enter_comment($journalu, $parent, $item, $comment, $errref);
dw-free/cgi-bin/LJ/Talk.pm-3903-        return 0 unless $jtalkid;
--
dw-free/cgi-bin/LJ/Talk.pm-3992-    return 1;
dw-free/cgi-bin/LJ/Talk.pm-3993-}
dw-free/cgi-bin/LJ/Talk.pm-3994-
dw-free/cgi-bin/LJ/Talk.pm:3995:# XXXevan:  this function should have its functionality migrated to talkpost.
dw-free/cgi-bin/LJ/Talk.pm-3996-# because of that, it's probably not worth the effort to make it not mangle $form...
dw-free/cgi-bin/LJ/Talk.pm-3997-sub make_preview {
dw-free/cgi-bin/LJ/Talk.pm-3998-    my ($talkurl, $cookie_auth, $form) = @_;
--
dw-free/cgi-bin/LJ/SynSuck.pm-364-        # if we see there's some image or link tag, to save us some work if it's
dw-free/cgi-bin/LJ/SynSuck.pm-365-        # unnecessary (the common case)
dw-free/cgi-bin/LJ/SynSuck.pm-366-        if ($it->{'text'} =~ /<(?:img|a)\b/i) {
dw-free/cgi-bin/LJ/SynSuck.pm:367:            # TODO: support XML Base?  http://www.w3.org/TR/xmlbase/
dw-free/cgi-bin/LJ/SynSuck.pm-368-            my $base_href = $it->{'link'} || $synurl;
dw-free/cgi-bin/LJ/SynSuck.pm-369-            LJ::CleanHTML::resolve_relative_urls(\$it->{'text'}, $base_href);
dw-free/cgi-bin/LJ/SynSuck.pm-370-        }
--
dw-free/cgi-bin/LJ/SynSuck.pm-510-    my $r_etag = $res->header('ETag');
dw-free/cgi-bin/LJ/SynSuck.pm-511-
dw-free/cgi-bin/LJ/SynSuck.pm-512-    # decide when to poll next (in minutes).
dw-free/cgi-bin/LJ/SynSuck.pm:513:    # FIXME: this is super lame.  (use hints in RSS file!)
dw-free/cgi-bin/LJ/SynSuck.pm-514-    my $int = $newcount ? 30 : 60;
dw-free/cgi-bin/LJ/SynSuck.pm-515-    my $status = $newcount ? "ok" : "nonew";
dw-free/cgi-bin/LJ/SynSuck.pm-516-    my $updatenew = $newcount ? ", lastnew=NOW()" : "";
--
dw-free/cgi-bin/LJ/SynSuck.pm-540-    return unless $uid && $topicurl && $huburl;
dw-free/cgi-bin/LJ/SynSuck.pm-541-
dw-free/cgi-bin/LJ/SynSuck.pm-542-    # bail if topicurl and huburl don't pass some sanity checks
dw-free/cgi-bin/LJ/SynSuck.pm:543:    # FIXME: why isn't there an LJ::valid_url function?  we do this sort of check in
dw-free/cgi-bin/LJ/SynSuck.pm-544-    # approximately 13,341,394 places...
dw-free/cgi-bin/LJ/SynSuck.pm-545-    return unless $topicurl =~ /^https?:/ &&
dw-free/cgi-bin/LJ/SynSuck.pm-546-                  $huburl   =~ /^https?:/;
--
dw-free/cgi-bin/LJ/SynSuck.pm-580-
dw-free/cgi-bin/LJ/SynSuck.pm-581-# called by the hubbub bml when someone posts something to us and says that feeds
dw-free/cgi-bin/LJ/SynSuck.pm-582-# have been updated.
dw-free/cgi-bin/LJ/SynSuck.pm:583:# FIXME: they actually give us enough data to update our feeds with the post
dw-free/cgi-bin/LJ/SynSuck.pm-584-# content, but for now, we're just scheduling a synsuck job to go update a feed.
dw-free/cgi-bin/LJ/SynSuck.pm-585-# this is suboptimal.  we have to implement the hub.challenge parameter and
dw-free/cgi-bin/LJ/SynSuck.pm-586-# post our subscriptions using HTTPS before we can do the "proper" way, though.
--
dw-free/cgi-bin/LJ/SynSuck.pm-591-    my $sclient = LJ::theschwartz() or die;
dw-free/cgi-bin/LJ/SynSuck.pm-592-    my $dbh = LJ::get_db_writer() or die;
dw-free/cgi-bin/LJ/SynSuck.pm-593-
dw-free/cgi-bin/LJ/SynSuck.pm:594:    # FIXME: this probably will explode horribly with aggregated content, so as
dw-free/cgi-bin/LJ/SynSuck.pm-595-    # soon as that becomes supported somewhere, we need to fix this
dw-free/cgi-bin/LJ/SynSuck.pm-596-
dw-free/cgi-bin/LJ/SynSuck.pm-597-    # try to parse with our feed parser
--
dw-free/cgi-bin/LJ/Userpic.pm-90-
dw-free/cgi-bin/LJ/Userpic.pm-91-# LJ::Userpic accessor. Returns a LJ::Userpic object indicated by $picid, or
dw-free/cgi-bin/LJ/Userpic.pm-92-# undef if userpic doesn't exist in the db.
dw-free/cgi-bin/LJ/Userpic.pm:93:# TODO: add in lazy peer loading here?
dw-free/cgi-bin/LJ/Userpic.pm-94-sub get {
dw-free/cgi-bin/LJ/Userpic.pm-95-    my ( $class, $u, $picid, $opts ) = @_;
dw-free/cgi-bin/LJ/Userpic.pm-96-    return unless LJ::isu( $u );
--
dw-free/cgi-bin/LJ/Userpic.pm-128-
dw-free/cgi-bin/LJ/Userpic.pm-129-# given a md5sum, load a userpic
dw-free/cgi-bin/LJ/Userpic.pm-130-# takes $u, $md5sum (base64)
dw-free/cgi-bin/LJ/Userpic.pm:131:# TODO: croak if md5sum is wrong number of bytes
dw-free/cgi-bin/LJ/Userpic.pm-132-sub new_from_md5 {
dw-free/cgi-bin/LJ/Userpic.pm-133-    my ($class, $u, $md5sum) = @_;
dw-free/cgi-bin/LJ/Userpic.pm-134-    die unless $u && length($md5sum) == 22;
--
dw-free/cgi-bin/LJ/Userpic.pm-352-
dw-free/cgi-bin/LJ/Userpic.pm-353-# Returns original URL used if userpic was originally uploaded
dw-free/cgi-bin/LJ/Userpic.pm-354-# via a URL.
dw-free/cgi-bin/LJ/Userpic.pm:355:# FIXME: should be renamed to source_url
dw-free/cgi-bin/LJ/Userpic.pm-356-sub fullurl {
dw-free/cgi-bin/LJ/Userpic.pm-357-    my $self = $_[0];
dw-free/cgi-bin/LJ/Userpic.pm-358-    return $self->{url} if $self->{url};
--
dw-free/cgi-bin/LJ/Userpic.pm-440-        '" title="' . $title . '" class="userpic-img" />';
dw-free/cgi-bin/LJ/Userpic.pm-441-}
dw-free/cgi-bin/LJ/Userpic.pm-442-
dw-free/cgi-bin/LJ/Userpic.pm:443:# FIXME: should have alt text, if it should be kept
dw-free/cgi-bin/LJ/Userpic.pm-444-sub imgtag_lite {
dw-free/cgi-bin/LJ/Userpic.pm-445-    my $self = $_[0];
dw-free/cgi-bin/LJ/Userpic.pm-446-    return '<img src="' . $self->url . '" width="' . $self->width . '" height="' . $self->height .
dw-free/cgi-bin/LJ/Userpic.pm-447-        '" class="userpic-img" />';
dw-free/cgi-bin/LJ/Userpic.pm-448-}
dw-free/cgi-bin/LJ/Userpic.pm-449-
dw-free/cgi-bin/LJ/Userpic.pm:450:# FIXME: should have alt text, if it should be kept
dw-free/cgi-bin/LJ/Userpic.pm-451-sub imgtag_nosize {
dw-free/cgi-bin/LJ/Userpic.pm-452-    my $self = $_[0];
dw-free/cgi-bin/LJ/Userpic.pm-453-    return '<img src="' . $self->url . '" class="userpic-img" />';
--
dw-free/cgi-bin/LJ/Userpic.pm-646-    };
dw-free/cgi-bin/LJ/Userpic.pm-647-
dw-free/cgi-bin/LJ/Userpic.pm-648-    eval "use Image::Size;";
dw-free/cgi-bin/LJ/Userpic.pm:649:    # FIXME the filetype is supposed to be returned intthe next call
dw-free/cgi-bin/LJ/Userpic.pm-650-    # but according to the docs of Image::Size v3.2 it does not return that value
dw-free/cgi-bin/LJ/Userpic.pm-651-    my ($w, $h, $filetype) = Image::Size::imgsize($dataref);
dw-free/cgi-bin/LJ/Userpic.pm-652-    my $MAX_UPLOAD = $maxbytesize || LJ::Userpic->max_allowed_bytes($u);
--
dw-free/cgi-bin/LJ/Userpic.pm-697-            'JPG' => 'J',
dw-free/cgi-bin/LJ/Userpic.pm-698-        }->{$filetype};
dw-free/cgi-bin/LJ/Userpic.pm-699-
dw-free/cgi-bin/LJ/Userpic.pm:700:    @errors = (); # TEMP: FIXME: remove... using exceptions
dw-free/cgi-bin/LJ/Userpic.pm-701-
dw-free/cgi-bin/LJ/Userpic.pm-702-    my $dberr = 0;
dw-free/cgi-bin/LJ/Userpic.pm-703-    $u->do( "INSERT INTO userpic2 (picid, userid, fmt, width, height, " .
--
dw-free/cgi-bin/LJ/Userpic.pm-966-}
dw-free/cgi-bin/LJ/Userpic.pm-967-
dw-free/cgi-bin/LJ/Userpic.pm-968-# delete this userpic
dw-free/cgi-bin/LJ/Userpic.pm:969:# TODO: error checking/throw errors on failure
dw-free/cgi-bin/LJ/Userpic.pm-970-sub delete {
dw-free/cgi-bin/LJ/Userpic.pm-971-    my $self = $_[0];
dw-free/cgi-bin/LJ/Userpic.pm-972-    local $LJ::THROW_ERRORS = 1;
--
dw-free/cgi-bin/LJ/Userpic.pm-1002-    $u->log_event('delete_userpic', { picid => $picid });
dw-free/cgi-bin/LJ/Userpic.pm-1003-
dw-free/cgi-bin/LJ/Userpic.pm-1004-    # best-effort on deleteing the blobs
dw-free/cgi-bin/LJ/Userpic.pm:1005:    # TODO: we could fire warnings if they fail, then if $LJ::DIE_ON_WARN is set,
dw-free/cgi-bin/LJ/Userpic.pm-1006-    # the ->warn methods on errobjs are actually dies.
dw-free/cgi-bin/LJ/Userpic.pm-1007-    eval {
dw-free/cgi-bin/LJ/Userpic.pm-1008-        if ( $self->in_mogile ) {
--
dw-free/cgi-bin/LJ/Userpic.pm-1096-
dw-free/cgi-bin/LJ/Userpic.pm-1097-    foreach my $kw (@keywords) {
dw-free/cgi-bin/LJ/Userpic.pm-1098-        my $kwid = $u->get_keyword_id( $kw );
dw-free/cgi-bin/LJ/Userpic.pm:1099:        next unless $kwid; # TODO: fire some warning that keyword was bogus
dw-free/cgi-bin/LJ/Userpic.pm-1100-
dw-free/cgi-bin/LJ/Userpic.pm-1101-        if (++$c > $LJ::MAX_USERPIC_KEYWORDS) {
dw-free/cgi-bin/LJ/Userpic.pm-1102-            push @kw_errors, $kw;
--
dw-free/cgi-bin/LJ/Blockwatch.pm-103-    my $sth = $dbh->prepare("SELECT id, name FROM blockwatch_events");
dw-free/cgi-bin/LJ/Blockwatch.pm-104-    $sth->execute;
dw-free/cgi-bin/LJ/Blockwatch.pm-105-
dw-free/cgi-bin/LJ/Blockwatch.pm:106:    # TODO Catch dbi errors here and return.
dw-free/cgi-bin/LJ/Blockwatch.pm-107-
dw-free/cgi-bin/LJ/Blockwatch.pm-108-    %event_by_id   = ();
dw-free/cgi-bin/LJ/Blockwatch.pm-109-    %event_by_name = ();
--
dw-free/cgi-bin/LJ/Entry.pm-95-    croak("can't supply both itemid and ditemid")
dw-free/cgi-bin/LJ/Entry.pm-96-        if defined $opts{ditemid} && defined $opts{jitemid};
dw-free/cgi-bin/LJ/Entry.pm-97-
dw-free/cgi-bin/LJ/Entry.pm:98:    # FIXME: don't store $u in here, or at least call LJ::load_userids() on all singletons
dw-free/cgi-bin/LJ/Entry.pm-99-    #        if LJ::want_user() would have been called
dw-free/cgi-bin/LJ/Entry.pm-100-    $self->{u}       = LJ::want_user($uuserid) or croak("invalid user/userid parameter: $uuserid");
dw-free/cgi-bin/LJ/Entry.pm-101-
--
dw-free/cgi-bin/LJ/Entry.pm-352-    my ($class, $entlist) = @_;
dw-free/cgi-bin/LJ/Entry.pm-353-    $class->preload_rows($entlist);
dw-free/cgi-bin/LJ/Entry.pm-354-    $class->preload_props($entlist);
dw-free/cgi-bin/LJ/Entry.pm:355:    # TODO: $class->preload_text($entlist);
dw-free/cgi-bin/LJ/Entry.pm-356-}
dw-free/cgi-bin/LJ/Entry.pm-357-
dw-free/cgi-bin/LJ/Entry.pm-358-# class method:
--
dw-free/cgi-bin/LJ/Entry.pm-437-        $self->{subject_orig}  = $self->{subject};
dw-free/cgi-bin/LJ/Entry.pm-438-        $self->{event_orig}    = $self->{event};
dw-free/cgi-bin/LJ/Entry.pm-439-
dw-free/cgi-bin/LJ/Entry.pm:440:        # FIXME: really convert all the props?  what if we binary-pack some in the future?
dw-free/cgi-bin/LJ/Entry.pm-441-        LJ::item_toutf8($self->{u}, \$self->{'subject'}, \$self->{'event'}, $self->{props});
dw-free/cgi-bin/LJ/Entry.pm-442-    }
dw-free/cgi-bin/LJ/Entry.pm-443-
--
dw-free/cgi-bin/LJ/Entry.pm-899-See userpic_kw.
dw-free/cgi-bin/LJ/Entry.pm-900-
dw-free/cgi-bin/LJ/Entry.pm-901-=cut
dw-free/cgi-bin/LJ/Entry.pm:902:# FIXME: add a context option for friends page, and perhaps
dw-free/cgi-bin/LJ/Entry.pm-903-# respect $remote's userpic viewing preferences (community shows poster
dw-free/cgi-bin/LJ/Entry.pm-904-# vs community's picture)
dw-free/cgi-bin/LJ/Entry.pm-905-sub userpic {
--
dw-free/cgi-bin/LJ/Entry.pm-1344-    # fix up posts as needed for display, following directions given in opts.
dw-free/cgi-bin/LJ/Entry.pm-1345-
dw-free/cgi-bin/LJ/Entry.pm-1346-
dw-free/cgi-bin/LJ/Entry.pm:1347:    # XXX this function is incomplete.  it should also HTML clean, etc.
dw-free/cgi-bin/LJ/Entry.pm:1348:    # XXX we need to load users when we have unknown8bit data, but that
dw-free/cgi-bin/LJ/Entry.pm:1349:    # XXX means we have to load users.
dw-free/cgi-bin/LJ/Entry.pm-1350-
dw-free/cgi-bin/LJ/Entry.pm-1351-
dw-free/cgi-bin/LJ/Entry.pm-1352-    while (my ($id, $rp) = each %$rawposts) {
--
dw-free/cgi-bin/LJ/Entry.pm-1519-    $rows = "";
dw-free/cgi-bin/LJ/Entry.pm-1520-
dw-free/cgi-bin/LJ/Entry.pm-1521-    # get reliable update time from the db
dw-free/cgi-bin/LJ/Entry.pm:1522:    # TODO: check userprop first
dw-free/cgi-bin/LJ/Entry.pm-1523-    my $tu;
dw-free/cgi-bin/LJ/Entry.pm-1524-    my $dbh = LJ::get_db_writer();
dw-free/cgi-bin/LJ/Entry.pm-1525-    if ($dbh) {
--
dw-free/cgi-bin/LJ/Entry.pm-1531-
dw-free/cgi-bin/LJ/Entry.pm-1532-        LJ::MemCache::set([$jid, "tu:$jid"], pack("N", $tu), 30*60)
dw-free/cgi-bin/LJ/Entry.pm-1533-            if defined $tu;
dw-free/cgi-bin/LJ/Entry.pm:1534:        # TODO: update userprop if necessary
dw-free/cgi-bin/LJ/Entry.pm-1535-    }
dw-free/cgi-bin/LJ/Entry.pm-1536-
dw-free/cgi-bin/LJ/Entry.pm-1537-    # if we didn't get tu, don't bother to memcache
--
dw-free/cgi-bin/LJ/Entry.pm-2288-    $convert->($subject);
dw-free/cgi-bin/LJ/Entry.pm-2289-    $convert->($text);
dw-free/cgi-bin/LJ/Entry.pm-2290-
dw-free/cgi-bin/LJ/Entry.pm:2291:    # FIXME: Have some logprop flag for what props are binary
dw-free/cgi-bin/LJ/Entry.pm-2292-    foreach(keys %$props) {
dw-free/cgi-bin/LJ/Entry.pm-2293-        next if $_ eq 'xpost' || $_ eq 'xpostdetail';
dw-free/cgi-bin/LJ/Entry.pm-2294-        $convert->(\$props->{$_});
--
dw-free/cgi-bin/LJ/ESN.pm-263-        # is currently on. (and not, eg, a cluster they were moved from)
dw-free/cgi-bin/LJ/ESN.pm-264-        next if $cid && $u->clusterid != $cid;
dw-free/cgi-bin/LJ/ESN.pm-265-
dw-free/cgi-bin/LJ/ESN.pm:266:        # TODO: discern difference between cluster not up and subscription
dw-free/cgi-bin/LJ/ESN.pm-267-        #       having been deleted
dw-free/cgi-bin/LJ/ESN.pm-268-        my $subsc = LJ::Subscription->new_by_id($u, $subid)
dw-free/cgi-bin/LJ/ESN.pm-269-            or next;
--
dw-free/cgi-bin/LJ/ESN.pm-310-        $subsc->{_debug_headers} = $debug_headers;
dw-free/cgi-bin/LJ/ESN.pm-311-    }
dw-free/cgi-bin/LJ/ESN.pm-312-
dw-free/cgi-bin/LJ/ESN.pm:313:    # TODO: do inbox notification method here, first.
dw-free/cgi-bin/LJ/ESN.pm-314-
dw-free/cgi-bin/LJ/ESN.pm-315-    # NEXT: do sub's ntypeid, unless it's inbox, then we're done.
dw-free/cgi-bin/LJ/ESN.pm-316-    $subsc->process($evt)
--
dw-free/cgi-bin/LJ/Protocol.pm-510-    @to = keys %to;
dw-free/cgi-bin/LJ/Protocol.pm-511-
dw-free/cgi-bin/LJ/Protocol.pm-512-    my @msg;
dw-free/cgi-bin/LJ/Protocol.pm:513:    BML::set_language('en'); # FIXME
dw-free/cgi-bin/LJ/Protocol.pm-514-
dw-free/cgi-bin/LJ/Protocol.pm-515-    foreach my $to (@to) {
dw-free/cgi-bin/LJ/Protocol.pm-516-        my $tou = LJ::load_user($to);
--
dw-free/cgi-bin/LJ/Protocol.pm-869-    unless ($update) {
dw-free/cgi-bin/LJ/Protocol.pm-870-        my @fr = $u->watched_userids;
dw-free/cgi-bin/LJ/Protocol.pm-871-
dw-free/cgi-bin/LJ/Protocol.pm:872:        # FIXME: see whether we can just get the list of users who are in the filter
dw-free/cgi-bin/LJ/Protocol.pm-873-        if ( $filter ) {
dw-free/cgi-bin/LJ/Protocol.pm-874-            my @filter_users;
dw-free/cgi-bin/LJ/Protocol.pm-875-
--
dw-free/cgi-bin/LJ/Protocol.pm-1234-        if ($req->{tz} eq 'guess') {
dw-free/cgi-bin/LJ/Protocol.pm-1235-            LJ::get_timezone($u, \$offset, \$time_was_faked);
dw-free/cgi-bin/LJ/Protocol.pm-1236-        } elsif ($req->{'tz'} =~ /^[+\-]\d\d\d\d$/) {
dw-free/cgi-bin/LJ/Protocol.pm:1237:            # FIXME we ought to store this timezone and make use of it somehow.
dw-free/cgi-bin/LJ/Protocol.pm-1238-            $offset = $req->{'tz'} / 100.0;
dw-free/cgi-bin/LJ/Protocol.pm-1239-        } else {
dw-free/cgi-bin/LJ/Protocol.pm-1240-            return fail($err, 203, "Invalid tz");
--
dw-free/cgi-bin/LJ/Protocol.pm-1491-                }
dw-free/cgi-bin/LJ/Protocol.pm-1492-
dw-free/cgi-bin/LJ/Protocol.pm-1493-                foreach my $to (@emails) {
dw-free/cgi-bin/LJ/Protocol.pm:1494:                    # TODO: html/plain text.
dw-free/cgi-bin/LJ/Protocol.pm-1495-                    my $body = LJ::Lang::get_text(
dw-free/cgi-bin/LJ/Protocol.pm-1496-                        $to->{'browselang'},
dw-free/cgi-bin/LJ/Protocol.pm-1497-                        'esn.moderated_submission.body', undef,
--
dw-free/cgi-bin/LJ/Protocol.pm-1745-    my $sclient = LJ::theschwartz();
dw-free/cgi-bin/LJ/Protocol.pm-1746-    if ($sclient && @jobs) {
dw-free/cgi-bin/LJ/Protocol.pm-1747-        my @handles = $sclient->insert_jobs(@jobs);
dw-free/cgi-bin/LJ/Protocol.pm:1748:        # TODO: error on failure?  depends on the job I suppose?  property of the job?
dw-free/cgi-bin/LJ/Protocol.pm-1749-    }
dw-free/cgi-bin/LJ/Protocol.pm-1750-
dw-free/cgi-bin/LJ/Protocol.pm-1751-    return $res;
--
dw-free/cgi-bin/LJ/Protocol.pm-1977-    my $entry_tags;
dw-free/cgi-bin/LJ/Protocol.pm-1978-
dw-free/cgi-bin/LJ/Protocol.pm-1979-    if ($oldevent->{security} ne $security || $qallowmask != $oldevent->{allowmask}) {
dw-free/cgi-bin/LJ/Protocol.pm:1980:        # FIXME: this is a hopefully temporary hack which deletes tags from the entry
dw-free/cgi-bin/LJ/Protocol.pm-1981-        # when the security has changed.  the real fix is to make update_logtags aware
dw-free/cgi-bin/LJ/Protocol.pm-1982-        # of security changes so it can update logkwsum appropriately.
dw-free/cgi-bin/LJ/Protocol.pm-1983-
--
dw-free/cgi-bin/LJ/Protocol.pm-1990-            $req->{props}->{taglist} = $entry_tags;
dw-free/cgi-bin/LJ/Protocol.pm-1991-        }
dw-free/cgi-bin/LJ/Protocol.pm-1992-
dw-free/cgi-bin/LJ/Protocol.pm:1993:        # FIXME: temporary hack until we can make update_logtags recognize entry security edits
dw-free/cgi-bin/LJ/Protocol.pm-1994-        if ( LJ::Tags::can_control_tags( $uowner, $u ) || LJ::Tags::can_add_tags( $uowner, $u ) ) {
dw-free/cgi-bin/LJ/Protocol.pm-1995-            my $delete = LJ::Tags::delete_logtags( $uowner, $itemid );
dw-free/cgi-bin/LJ/Protocol.pm-1996-            $do_tags_security = 1;
--
dw-free/cgi-bin/LJ/Protocol.pm-2165-    my $sclient = LJ::theschwartz();
dw-free/cgi-bin/LJ/Protocol.pm-2166-    if ( $sclient && @jobs ) {
dw-free/cgi-bin/LJ/Protocol.pm-2167-        my @handles = $sclient->insert_jobs(@jobs);
dw-free/cgi-bin/LJ/Protocol.pm:2168:        # TODO: error on failure?  depends on the job I suppose?  property of the job?
dw-free/cgi-bin/LJ/Protocol.pm-2169-    }
dw-free/cgi-bin/LJ/Protocol.pm-2170-
dw-free/cgi-bin/LJ/Protocol.pm-2171-    # ensure our xposted edit fires
--
dw-free/cgi-bin/LJ/Protocol.pm-2241-        my $qmonth = $dbr->quote($req->{'month'});
dw-free/cgi-bin/LJ/Protocol.pm-2242-        my $qday = $dbr->quote($req->{'day'});
dw-free/cgi-bin/LJ/Protocol.pm-2243-        $where = "AND year=$qyear AND month=$qmonth AND day=$qday";
dw-free/cgi-bin/LJ/Protocol.pm:2244:        $limit = "LIMIT 200";  # FIXME: unhardcode this constant (also in ljviews.pl)
dw-free/cgi-bin/LJ/Protocol.pm-2245-
dw-free/cgi-bin/LJ/Protocol.pm-2246-        # see note above about why the sort order is different
dw-free/cgi-bin/LJ/Protocol.pm-2247-        $orderby = $is_community ? "ORDER BY logtime" : "ORDER BY eventtime";
--
dw-free/cgi-bin/LJ/Protocol.pm-2435-
dw-free/cgi-bin/LJ/Protocol.pm-2436-        foreach my $itemid (keys %props) {
dw-free/cgi-bin/LJ/Protocol.pm-2437-            # 'replycount' is a pseudo-prop, don't send it.
dw-free/cgi-bin/LJ/Protocol.pm:2438:            # FIXME: this goes away after we restructure APIs and
dw-free/cgi-bin/LJ/Protocol.pm-2439-            # replycounts cease being transferred in props
dw-free/cgi-bin/LJ/Protocol.pm-2440-            delete $props{$itemid}->{'replycount'};
dw-free/cgi-bin/LJ/Protocol.pm-2441-
--
dw-free/cgi-bin/LJ/Protocol.pm-3121-
dw-free/cgi-bin/LJ/Protocol.pm-3122-    my %seen;  # mashifiedptr -> 1
dw-free/cgi-bin/LJ/Protocol.pm-3123-
dw-free/cgi-bin/LJ/Protocol.pm:3124:    # FIXME: should be a utf-8 sort
dw-free/cgi-bin/LJ/Protocol.pm-3125-    foreach my $kw ( sort keys %{$pi->{kw}} ) {
dw-free/cgi-bin/LJ/Protocol.pm-3126-        my $pic = $pi->{kw}{$kw};
dw-free/cgi-bin/LJ/Protocol.pm-3127-        $seen{$pic} = 1;
--
dw-free/cgi-bin/LJ/EmbedModule.pm-476-                next;
dw-free/cgi-bin/LJ/EmbedModule.pm-477-            }
dw-free/cgi-bin/LJ/EmbedModule.pm-478-
dw-free/cgi-bin/LJ/EmbedModule.pm:479:            # FIXME: ultra ghetto.
dw-free/cgi-bin/LJ/EmbedModule.pm-480-            $attr->{$name} = LJ::no_utf8_flag($attr->{$name});
dw-free/cgi-bin/LJ/EmbedModule.pm-481-
dw-free/cgi-bin/LJ/EmbedModule.pm-482-            $txt .= " $name=\"" . LJ::ehtml($attr->{$name}) . "\"";
--
dw-free/cgi-bin/LJ/Subscription.pm-262-
dw-free/cgi-bin/LJ/Subscription.pm-263-    return undef unless $row;
dw-free/cgi-bin/LJ/Subscription.pm-264-    my $self = bless {%$row}, $class;
dw-free/cgi-bin/LJ/Subscription.pm:265:    # TODO validate keys of row.
dw-free/cgi-bin/LJ/Subscription.pm-266-    return $self;
dw-free/cgi-bin/LJ/Subscription.pm-267-}
dw-free/cgi-bin/LJ/Subscription.pm-268-
--
dw-free/cgi-bin/LJ/Widget.pm-18-use LJ::ModuleLoader;
dw-free/cgi-bin/LJ/Widget.pm-19-use LJ::Auth;
dw-free/cgi-bin/LJ/Widget.pm-20-
dw-free/cgi-bin/LJ/Widget.pm:21:# FIXME: don't really need all widgets now
dw-free/cgi-bin/LJ/Widget.pm-22-LJ::ModuleLoader->require_subclasses( "LJ::Widget" );
dw-free/cgi-bin/LJ/Widget.pm-23-LJ::ModuleLoader->require_subclasses( "DW::Widget" );
dw-free/cgi-bin/LJ/Widget.pm-24-
--
dw-free/cgi-bin/LJ/Widget.pm-187-    foreach my $key (keys %$post) {
dw-free/cgi-bin/LJ/Widget.pm-188-        next unless $key;
dw-free/cgi-bin/LJ/Widget.pm-189-
dw-free/cgi-bin/LJ/Widget.pm:190:        # FIXME: this is currently unused, but might be useful
dw-free/cgi-bin/LJ/Widget.pm-191-        if ($key =~ /^Widget_Submit_(.+)$/) {
dw-free/cgi-bin/LJ/Widget.pm-192-            die "Multiple effective submits?  class=$1"
dw-free/cgi-bin/LJ/Widget.pm-193-                if $eff_submit;
--
dw-free/cgi-bin/LJ/Emailpost.pm-244-        my ($tmpdir, $tempfile);
dw-free/cgi-bin/LJ/Emailpost.pm-245-        $tmpdir = File::Temp::tempdir( "ljmailgate_" . 'X' x 20, DIR=> $workdir );
dw-free/cgi-bin/LJ/Emailpost.pm-246-        ( undef, $tempfile ) = File::Temp::tempfile(
dw-free/cgi-bin/LJ/Emailpost.pm:247:            'sprintpcs_XXXXX',
dw-free/cgi-bin/LJ/Emailpost.pm-248-            SUFFIX => '.jpg',
dw-free/cgi-bin/LJ/Emailpost.pm-249-            OPEN   => 0,
dw-free/cgi-bin/LJ/Emailpost.pm-250-            DIR    => $tmpdir
--
dw-free/cgi-bin/LJ/Emailpost.pm-668-        $txt = $txt_e->as_string();
dw-free/cgi-bin/LJ/Emailpost.pm-669-        my $txt_fh;
dw-free/cgi-bin/LJ/Emailpost.pm-670-        ($txt_fh, $txt_f) =
dw-free/cgi-bin/LJ/Emailpost.pm:671:            File::Temp::tempfile('plaintext_XXXXXXXX', DIR => $tmpdir);
dw-free/cgi-bin/LJ/Emailpost.pm-672-        print $txt_fh $txt;
dw-free/cgi-bin/LJ/Emailpost.pm-673-        close $txt_fh;
dw-free/cgi-bin/LJ/Emailpost.pm-674-    } # otherwise, it's clearsigned
--
dw-free/cgi-bin/LJ/Emailpost.pm-706-sub upload_images {
dw-free/cgi-bin/LJ/Emailpost.pm-707-    my ( $entity, $u, $rv, $opts ) = @_;
dw-free/cgi-bin/LJ/Emailpost.pm-708-
dw-free/cgi-bin/LJ/Emailpost.pm:709:# FIXME: check if user can do this
dw-free/cgi-bin/LJ/Emailpost.pm-710-#     return 1 unless LJ::get_cap($u, 'fb_can_upload') && $LJ::FB_SITEROOT;
dw-free/cgi-bin/LJ/Emailpost.pm-711-
dw-free/cgi-bin/LJ/Emailpost.pm-712-    my @imgs = get_entity( $entity, 'image' );
--
dw-free/cgi-bin/LJ/Event/ImportStatus.pm-84-    return "A status update about your import."
dw-free/cgi-bin/LJ/Event/ImportStatus.pm-85-        if $status eq 'status';
dw-free/cgi-bin/LJ/Event/ImportStatus.pm-86-
dw-free/cgi-bin/LJ/Event/ImportStatus.pm:87:# FIXME: strip these strings into status strings
dw-free/cgi-bin/LJ/Event/ImportStatus.pm-88-    my $item_has = {
dw-free/cgi-bin/LJ/Event/ImportStatus.pm-89-        0 => 'entries have',
dw-free/cgi-bin/LJ/Event/ImportStatus.pm-90-        1 => 'tags have',
--
dw-free/cgi-bin/LJ/Event/JournalNewComment.pm-483-
dw-free/cgi-bin/LJ/Event/JournalNewComment.pm-484-    # watching a specific journal
dw-free/cgi-bin/LJ/Event/JournalNewComment.pm-485-    if ($sarg1 == 0 && $sarg2 == 0) {
dw-free/cgi-bin/LJ/Event/JournalNewComment.pm:486:        # TODO: friend group filtering in case of $sjid == 0 when
dw-free/cgi-bin/LJ/Event/JournalNewComment.pm-487-        # a subprop is filtering on a friend group
dw-free/cgi-bin/LJ/Event/JournalNewComment.pm-488-        return 1;
dw-free/cgi-bin/LJ/Event/JournalNewComment.pm-489-    }
--
dw-free/cgi-bin/LJ/Event/JournalNewEntry.pm-44-
dw-free/cgi-bin/LJ/Event/JournalNewEntry.pm-45-    my $ditemid = $self->arg1;
dw-free/cgi-bin/LJ/Event/JournalNewEntry.pm-46-    my $evtju = $self->event_journal;
dw-free/cgi-bin/LJ/Event/JournalNewEntry.pm:47:    return 0 unless $evtju && $ditemid; # TODO: throw error?
dw-free/cgi-bin/LJ/Event/JournalNewEntry.pm-48-
dw-free/cgi-bin/LJ/Event/JournalNewEntry.pm-49-    my $entry = LJ::Entry->new($evtju, ditemid => $ditemid);
dw-free/cgi-bin/LJ/Event/JournalNewEntry.pm:50:    return 0 unless $entry && $entry->valid; # TODO: throw error?
dw-free/cgi-bin/LJ/Event/JournalNewEntry.pm-51-    return 0 unless $entry->visible_to($subscr->owner);
dw-free/cgi-bin/LJ/Event/JournalNewEntry.pm-52-
dw-free/cgi-bin/LJ/Event/JournalNewEntry.pm-53-    # filter by tag?
--
dw-free/cgi-bin/LJ/Event/SecurityAttributeChanged.pm-66-        my $old_username    = $opts->{old_username};
dw-free/cgi-bin/LJ/Event/SecurityAttributeChanged.pm-67-        my $userid          = $u->{userid};
dw-free/cgi-bin/LJ/Event/SecurityAttributeChanged.pm-68-
dw-free/cgi-bin/LJ/Event/SecurityAttributeChanged.pm:69:        # TODO: check is $u a user object?
dw-free/cgi-bin/LJ/Event/SecurityAttributeChanged.pm-70-        die "Missing credentials" unless $ip && $action && $old_username;
dw-free/cgi-bin/LJ/Event/SecurityAttributeChanged.pm-71-
dw-free/cgi-bin/LJ/Event/SecurityAttributeChanged.pm-72-        my $dbh = LJ::get_db_writer($u);
--
dw-free/cgi-bin/LJ/Event/XPostSuccess.pm-41-    return LJ::Lang::ml( 'event.xpost.success' );
dw-free/cgi-bin/LJ/Event/XPostSuccess.pm-42-}
dw-free/cgi-bin/LJ/Event/XPostSuccess.pm-43-
dw-free/cgi-bin/LJ/Event/XPostSuccess.pm:44:# FIXME make this more useful, like include a link to the crosspost
dw-free/cgi-bin/LJ/Event/XPostSuccess.pm-45-sub content {
dw-free/cgi-bin/LJ/Event/XPostSuccess.pm-46-    my ($self) = @_;
dw-free/cgi-bin/LJ/Event/XPostSuccess.pm-47-    if ( $self->account ) {
--
dw-free/cgi-bin/LJ/Event/UserMessageSent.pm-31-    return ( "Message id", "Recipient userid" );
dw-free/cgi-bin/LJ/Event/UserMessageSent.pm-32-}
dw-free/cgi-bin/LJ/Event/UserMessageSent.pm-33-
dw-free/cgi-bin/LJ/Event/UserMessageSent.pm:34:# TODO Should this return 1?
dw-free/cgi-bin/LJ/Event/UserMessageSent.pm-35-sub is_common { 1 }
dw-free/cgi-bin/LJ/Event/UserMessageSent.pm-36-
dw-free/cgi-bin/LJ/Event/UserMessageSent.pm-37-sub load_message {
--
dw-free/cgi-bin/LJ/Lang.pm-823-    return $wlist[$plural_form];
dw-free/cgi-bin/LJ/Lang.pm-824-}
dw-free/cgi-bin/LJ/Lang.pm-825-
dw-free/cgi-bin/LJ/Lang.pm:826:# TODO: make this faster, using AUTOLOAD and symbol tables pointing to dynamically
dw-free/cgi-bin/LJ/Lang.pm-827-# generated subs which only use $_[0] for $count.
dw-free/cgi-bin/LJ/Lang.pm-828-sub plural_form {
dw-free/cgi-bin/LJ/Lang.pm-829-    my ($lang, $count) = @_;
--
dw-free/cgi-bin/LJ/S2/EntryPage.pm-290-            };
dw-free/cgi-bin/LJ/S2/EntryPage.pm-291-
dw-free/cgi-bin/LJ/S2/EntryPage.pm-292-            # don't show info from suspended users
dw-free/cgi-bin/LJ/S2/EntryPage.pm:293:            # FIXME: ideally the load_comments should only return these
dw-free/cgi-bin/LJ/S2/EntryPage.pm-294-            # items if there are children, otherwise they should be hidden entirely
dw-free/cgi-bin/LJ/S2/EntryPage.pm-295-            if ($pu && $pu->is_suspended && !$viewsome) {
dw-free/cgi-bin/LJ/S2/EntryPage.pm-296-                $s2com->{'fromsuspended'} = 1;
--
dw-free/cgi-bin/LJ/S2/ReplyPage.pm-128-            return;
dw-free/cgi-bin/LJ/S2/ReplyPage.pm-129-        }
dw-free/cgi-bin/LJ/S2/ReplyPage.pm-130-
dw-free/cgi-bin/LJ/S2/ReplyPage.pm:131:        # FIXME: Why are we loading the comment manually when we do LJ::Comment->new below
dw-free/cgi-bin/LJ/S2/ReplyPage.pm-132-        # and could do everything through there.
dw-free/cgi-bin/LJ/S2/ReplyPage.pm-133-        my $sql = "SELECT jtalkid, posterid, state, datepost FROM talk2 ".
dw-free/cgi-bin/LJ/S2/ReplyPage.pm-134-            "WHERE journalid=$u->{'userid'} AND jtalkid=$re_talkid ".
--
dw-free/cgi-bin/LJ/S2/ReplyPage.pm-140-        }
dw-free/cgi-bin/LJ/S2/ReplyPage.pm-141-        my $parentcomment = LJ::Comment->new( $u, jtalkid => $re_talkid );
dw-free/cgi-bin/LJ/S2/ReplyPage.pm-142-        unless ($parpost and $parpost->{'state'} ne 'D') {
dw-free/cgi-bin/LJ/S2/ReplyPage.pm:143:            # FIXME: This is a hack. See below...
dw-free/cgi-bin/LJ/S2/ReplyPage.pm-144-
dw-free/cgi-bin/LJ/S2/ReplyPage.pm-145-            $opts->{status} = "404 Not Found";
dw-free/cgi-bin/LJ/S2/ReplyPage.pm-146-            return "<p>This comment has been deleted; you cannot reply to it.</p>";
--
dw-free/cgi-bin/LJ/S2/ReplyPage.pm-152-        if ($parpost->{'state'} eq 'F') {
dw-free/cgi-bin/LJ/S2/ReplyPage.pm-153-            # frozen comment, no replies allowed
dw-free/cgi-bin/LJ/S2/ReplyPage.pm-154-
dw-free/cgi-bin/LJ/S2/ReplyPage.pm:155:            # FIXME: eventually have S2 ErrorPage to handle this and similar
dw-free/cgi-bin/LJ/S2/ReplyPage.pm-156-            #    For now, this hack will work; this error is pretty uncommon anyway.
dw-free/cgi-bin/LJ/S2/ReplyPage.pm-157-            $opts->{status} = "403 Forbidden";
dw-free/cgi-bin/LJ/S2/ReplyPage.pm-158-            return "<p>This thread has been frozen; no more replies are allowed.</p>";
--
dw-free/cgi-bin/LJ/Event.pm-31-#    LJ::Event::JournalNewEntry    -- a journal (user/community) has a new entry in it
dw-free/cgi-bin/LJ/Event.pm-32-#                                   ($ju,$ditemid,undef)
dw-free/cgi-bin/LJ/Event.pm-33-#    LJ::Event::JournalNewComment  -- a journal has a new comment in it
dw-free/cgi-bin/LJ/Event.pm:34:#                                   ($ju,$jtalkid)   # TODO: should probably be ($ju,$jitemid,$jtalkid)
dw-free/cgi-bin/LJ/Event.pm-35-#    LJ::Event::JournalNewComment::TopLevel -- a journal has a new top-level comment in it
dw-free/cgi-bin/LJ/Event.pm-36-#                                   ($ju,$jitemid)
dw-free/cgi-bin/LJ/Event.pm-37-#    LJ::Event::AddedToCircle      -- user $fromuserid added $u to their circle; $actionid is 1 (trust) or 2 (watch)
--
dw-free/cgi-bin/LJ/Event.pm-305-    my $and_enabled = "AND flags & " .
dw-free/cgi-bin/LJ/Event.pm-306-        (LJ::Subscription->INACTIVE | LJ::Subscription->DISABLED) . " = 0";
dw-free/cgi-bin/LJ/Event.pm-307-
dw-free/cgi-bin/LJ/Event.pm:308:    # TODO: gearman parallelize:
dw-free/cgi-bin/LJ/Event.pm-309-    foreach my $cid ($cid ? ($cid) : @LJ::CLUSTERS) {
dw-free/cgi-bin/LJ/Event.pm-310-        # we got enough subs
dw-free/cgi-bin/LJ/Event.pm-311-        last if $limit && $limit_remain <= 0;
--
dw-free/cgi-bin/LJ/Event.pm-337-
dw-free/cgi-bin/LJ/Event.pm-338-        # then we find wildcard matches.
dw-free/cgi-bin/LJ/Event.pm-339-        if (@wildcards_from) {
dw-free/cgi-bin/LJ/Event.pm:340:            # FIXME: journals are only on one cluster! split jidlist based on cluster
dw-free/cgi-bin/LJ/Event.pm-341-            my $jidlist = join(",", @wildcards_from);
dw-free/cgi-bin/LJ/Event.pm-342-
dw-free/cgi-bin/LJ/Event.pm-343-            my $sth = $udbh->prepare(
--
dw-free/cgi-bin/LJ/Event.pm-392-# instance method
dw-free/cgi-bin/LJ/Event.pm-393-sub has_subscriptions {
dw-free/cgi-bin/LJ/Event.pm-394-    my $self = shift;
dw-free/cgi-bin/LJ/Event.pm:395:    return 1; # FIXME: consult "has_subs" table
dw-free/cgi-bin/LJ/Event.pm-396-}
dw-free/cgi-bin/LJ/Event.pm-397-
dw-free/cgi-bin/LJ/Event.pm-398-sub get_subscriptions {
--
dw-free/cgi-bin/LJ/S2Theme.pm-27-# Class Methods
dw-free/cgi-bin/LJ/S2Theme.pm-28-##################################################
dw-free/cgi-bin/LJ/S2Theme.pm-29-
dw-free/cgi-bin/LJ/S2Theme.pm:30:# FIXME: This should be configurable
dw-free/cgi-bin/LJ/S2Theme.pm-31-sub default_themes {
dw-free/cgi-bin/LJ/S2Theme.pm-32-    my $class = $_[0];
dw-free/cgi-bin/LJ/S2Theme.pm-33-
--
dw-free/cgi-bin/LJ/Session.pm-81-
dw-free/cgi-bin/LJ/Session.pm-82-    # validate options
dw-free/cgi-bin/LJ/Session.pm-83-    my $exptype = delete $opts{'exptype'} || "short";
dw-free/cgi-bin/LJ/Session.pm:84:    my $ipfixed = delete $opts{'ipfixed'};   # undef or scalar ipaddress  FIXME: validate
dw-free/cgi-bin/LJ/Session.pm-85-    my $nolog   = delete $opts{'nolog'} || 0; # 1 to not log to loginlogs
dw-free/cgi-bin/LJ/Session.pm-86-    croak("Invalid exptype") unless $exptype =~ /^short|long|once$/;
dw-free/cgi-bin/LJ/Session.pm-87-
--
dw-free/cgi-bin/LJ/Session.pm-93-    # clean up any old, expired sessions they might have (lazy clean)
dw-free/cgi-bin/LJ/Session.pm-94-    $u->do("DELETE FROM sessions WHERE userid=? AND timeexpire < UNIX_TIMESTAMP()",
dw-free/cgi-bin/LJ/Session.pm-95-           undef, $u->{userid});
dw-free/cgi-bin/LJ/Session.pm:96:    # FIXME: but this doesn't remove their memcached keys
dw-free/cgi-bin/LJ/Session.pm-97-
dw-free/cgi-bin/LJ/Session.pm-98-    my $expsec     = LJ::Session->session_length($exptype);
dw-free/cgi-bin/LJ/Session.pm-99-    my $timeexpire = time() + $expsec;
--
dw-free/cgi-bin/LJ/Session.pm-181-                    " WHERE userid=$n_userid AND sessid=$n_sessid",
dw-free/cgi-bin/LJ/Session.pm-182-                    undef, @values);
dw-free/cgi-bin/LJ/Session.pm-183-    if (!$rv) {
dw-free/cgi-bin/LJ/Session.pm:184:        # FIXME: eventually use Error::Strict here on return
dw-free/cgi-bin/LJ/Session.pm-185-        return 0;
dw-free/cgi-bin/LJ/Session.pm-186-    }
dw-free/cgi-bin/LJ/Session.pm-187-
--
dw-free/cgi-bin/LJ/Session.pm-549-#   -- but not called directly.  usually called by LJ::Session->session_from_cookies above
dw-free/cgi-bin/LJ/Session.pm-550-# call: ( $opts?, @ljmastersession_cookie(s) )
dw-free/cgi-bin/LJ/Session.pm-551-# return value is LJ::Session object if we found one; else undef
dw-free/cgi-bin/LJ/Session.pm:552:# FIXME: document ops
dw-free/cgi-bin/LJ/Session.pm-553-sub session_from_master_cookie {
dw-free/cgi-bin/LJ/Session.pm-554-    my $class = shift;
dw-free/cgi-bin/LJ/Session.pm-555-    my $opts = ref $_[0] ? shift() : {};
--
dw-free/cgi-bin/LJ/Session.pm-680-    foreach (qw(sessions sessions_data)) {
dw-free/cgi-bin/LJ/Session.pm-681-        $u->do("DELETE FROM $_ WHERE userid=? AND ".
dw-free/cgi-bin/LJ/Session.pm-682-               "sessid IN ($in)", undef, $userid)
dw-free/cgi-bin/LJ/Session.pm:683:            or return 0;   # FIXME: use Error::Strict
dw-free/cgi-bin/LJ/Session.pm-684-    }
dw-free/cgi-bin/LJ/Session.pm-685-    foreach my $id (@sessids) {
dw-free/cgi-bin/LJ/Session.pm-686-        $id += 0;
--
dw-free/cgi-bin/LJ/Session.pm-795-}
dw-free/cgi-bin/LJ/Session.pm-796-
dw-free/cgi-bin/LJ/Session.pm-797-# function or instance method.
dw-free/cgi-bin/LJ/Session.pm:798:# FIXME: update the documentation for memkeys
dw-free/cgi-bin/LJ/Session.pm-799-sub _memkey {
dw-free/cgi-bin/LJ/Session.pm-800-    if (@_ == 2) {
dw-free/cgi-bin/LJ/Session.pm-801-        my ($u, $sessid) = @_;
--
dw-free/cgi-bin/LJ/Session.pm-807-    }
dw-free/cgi-bin/LJ/Session.pm-808-}
dw-free/cgi-bin/LJ/Session.pm-809-
dw-free/cgi-bin/LJ/Session.pm:810:# FIXME: move this somewhere better
dw-free/cgi-bin/LJ/Session.pm-811-sub set_cookie {
dw-free/cgi-bin/LJ/Session.pm-812-    my ($key, $value, %opts) = @_;
dw-free/cgi-bin/LJ/Session.pm-813-
--
dw-free/cgi-bin/LJ/Comment.pm-182-    # The following 2 options are necessary for successful user authentification
dw-free/cgi-bin/LJ/Comment.pm-183-    # in the depth of LJ::Talk::Post::init.
dw-free/cgi-bin/LJ/Comment.pm-184-    #
dw-free/cgi-bin/LJ/Comment.pm:185:    # FIXME: this almost certainly should be 'usertype=user' rather than
dw-free/cgi-bin/LJ/Comment.pm-186-    #        'cookieuser' with $remote passed below.  Gross.
dw-free/cgi-bin/LJ/Comment.pm-187-    $talk_opts{cookieuser} ||= $posteru->user;
dw-free/cgi-bin/LJ/Comment.pm-188-    $talk_opts{usertype}   ||= 'cookieuser';
--
dw-free/cgi-bin/LJ/Comment.pm-432-    my $entry = $self->entry;
dw-free/cgi-bin/LJ/Comment.pm-433-    return grep { $_->{parenttalkid} == $self->{jtalkid} } $entry->comment_list;
dw-free/cgi-bin/LJ/Comment.pm-434-
dw-free/cgi-bin/LJ/Comment.pm:435:    # FIXME: It might be a good idea to check to see if the entry object had
dw-free/cgi-bin/LJ/Comment.pm-436-    #        comments cached above, then fall back to a query to select a list
dw-free/cgi-bin/LJ/Comment.pm-437-    #        from db or memcache
dw-free/cgi-bin/LJ/Comment.pm-438-}
--
dw-free/cgi-bin/LJ/Comment.pm-543-            $c_obj->{subject_orig} = $c_obj->{subject};
dw-free/cgi-bin/LJ/Comment.pm-544-            $c_obj->{body_orig}    = $c_obj->{body};
dw-free/cgi-bin/LJ/Comment.pm-545-
dw-free/cgi-bin/LJ/Comment.pm:546:            # FIXME: really convert all the props?  what if we binary-pack some in the future?
dw-free/cgi-bin/LJ/Comment.pm-547-            LJ::item_toutf8($c_obj->journal, \$c_obj->{subject}, \$c_obj->{body}, $c_obj->{props});
dw-free/cgi-bin/LJ/Comment.pm-548-        }
dw-free/cgi-bin/LJ/Comment.pm-549-
--
dw-free/cgi-bin/LJ/Keywords.pm-160-
dw-free/cgi-bin/LJ/Keywords.pm-161-    my @valid_ints = ();
dw-free/cgi-bin/LJ/Keywords.pm-162-    foreach my $int (@ints) {
dw-free/cgi-bin/LJ/Keywords.pm:163:        $int = lc($int);       # FIXME: use utf8?
dw-free/cgi-bin/LJ/Keywords.pm-164-        $int =~ s/^i like //;  # *sigh*
dw-free/cgi-bin/LJ/Keywords.pm-165-        next unless $int;
dw-free/cgi-bin/LJ/Keywords.pm-166-
--
dw-free/cgi-bin/LJ/Keywords.pm-231-        LJ::MemCache::add( $mk_ids, $ids, 3600*12 );
dw-free/cgi-bin/LJ/Keywords.pm-232-    }
dw-free/cgi-bin/LJ/Keywords.pm-233-
dw-free/cgi-bin/LJ/Keywords.pm:234:    # FIXME: set a 'justids' $u cache key in this case, then only return that
dw-free/cgi-bin/LJ/Keywords.pm-235-    #        later if 'justids' is requested?  probably not worth it.
dw-free/cgi-bin/LJ/Keywords.pm-236-    return $ids if $opts->{justids};
dw-free/cgi-bin/LJ/Keywords.pm-237-
--
dw-free/cgi-bin/LJ/Keywords.pm-283-    my $u = shift;
dw-free/cgi-bin/LJ/Keywords.pm-284-    return undef unless LJ::isu( $u );
dw-free/cgi-bin/LJ/Keywords.pm-285-
dw-free/cgi-bin/LJ/Keywords.pm:286:    # FIXME: fall back to SELECT COUNT(*) if not cached already?
dw-free/cgi-bin/LJ/Keywords.pm-287-    return scalar @{ $u->get_interests( { justids => 1 } ) };
dw-free/cgi-bin/LJ/Keywords.pm-288-}
dw-free/cgi-bin/LJ/Keywords.pm-289-
--
dw-free/cgi-bin/LJ/Directory/SetHandle/Mogile.pm-50-    my $self = shift;
dw-free/cgi-bin/LJ/Directory/SetHandle/Mogile.pm-51-    return $self->{pack_size} if $self->{pack_size};
dw-free/cgi-bin/LJ/Directory/SetHandle/Mogile.pm-52-
dw-free/cgi-bin/LJ/Directory/SetHandle/Mogile.pm:53:    # TODO: do this in the same request as load_matching_uids for fewer round-trips
dw-free/cgi-bin/LJ/Directory/SetHandle/Mogile.pm-54-
dw-free/cgi-bin/LJ/Directory/SetHandle/Mogile.pm-55-    my @paths = $self->mogpaths;
dw-free/cgi-bin/LJ/Directory/SetHandle/Mogile.pm:56:    die "can't find it FIXME: calculate it again" unless @paths;
dw-free/cgi-bin/LJ/Directory/SetHandle/Mogile.pm-57-
dw-free/cgi-bin/LJ/Directory/SetHandle/Mogile.pm-58-    # do a HEAD reqest
dw-free/cgi-bin/LJ/Directory/SetHandle/Mogile.pm-59-    while (@paths) {
--
dw-free/cgi-bin/LJ/Directory/SetHandle/Mogile.pm-63-        next unless $resp->code == 200;
dw-free/cgi-bin/LJ/Directory/SetHandle/Mogile.pm-64-        return $self->{pack_size} = $resp->header("Content-Length");
dw-free/cgi-bin/LJ/Directory/SetHandle/Mogile.pm-65-    }
dw-free/cgi-bin/LJ/Directory/SetHandle/Mogile.pm:66:    die "FIXME: couldn't load it... go recalculate set for $self";
dw-free/cgi-bin/LJ/Directory/SetHandle/Mogile.pm-67-}
dw-free/cgi-bin/LJ/Directory/SetHandle/Mogile.pm-68-
dw-free/cgi-bin/LJ/Directory/SetHandle/Mogile.pm-69-sub load_pack_data {
dw-free/cgi-bin/LJ/Directory/SetHandle/Mogile.pm-70-    my ($self, $cb) = @_;
dw-free/cgi-bin/LJ/Directory/SetHandle/Mogile.pm-71-    my @paths = $self->mogpaths;
dw-free/cgi-bin/LJ/Directory/SetHandle/Mogile.pm:72:    die "FIXME: couldn't load it... go recalculate set for $self" unless @paths;
dw-free/cgi-bin/LJ/Directory/SetHandle/Mogile.pm-73-
dw-free/cgi-bin/LJ/Directory/SetHandle/Mogile.pm-74-    # stream data with LWP and call callback func with
dw-free/cgi-bin/LJ/Directory/SetHandle/Mogile.pm-75-    # streamed data
--
dw-free/cgi-bin/LJ/Directory/SetHandle/Mogile.pm-115-        die "We only read $readdata, not expected amount of $elen" unless $elen == $readdata;
dw-free/cgi-bin/LJ/Directory/SetHandle/Mogile.pm-116-        return;
dw-free/cgi-bin/LJ/Directory/SetHandle/Mogile.pm-117-    }
dw-free/cgi-bin/LJ/Directory/SetHandle/Mogile.pm:118:    die "FIXME: couldn't load it... go recalculate set for $self";
dw-free/cgi-bin/LJ/Directory/SetHandle/Mogile.pm-119-}
dw-free/cgi-bin/LJ/Directory/SetHandle/Mogile.pm-120-
dw-free/cgi-bin/LJ/Directory/SetHandle/Mogile.pm-121-sub mogkey {
--
dw-free/cgi-bin/LJ/Directory/Results.pm-87-    foreach my $u (@users) {
dw-free/cgi-bin/LJ/Directory/Results.pm-88-        $ret .= "<li>";
dw-free/cgi-bin/LJ/Directory/Results.pm-89-        $ret .= $u->ljuser_display . " - " . $u->name_html;
dw-free/cgi-bin/LJ/Directory/Results.pm:90:        # FIXME: consider replacing this with $u->last_updated
dw-free/cgi-bin/LJ/Directory/Results.pm-91-        $ret .= " <small>(Last updated: ". LJ::diff_ago_text( $updated->{$u->id} ) . ")</small>";
dw-free/cgi-bin/LJ/Directory/Results.pm-92-        $ret .= "</li>";
dw-free/cgi-bin/LJ/Directory/Results.pm-93-    }
--
dw-free/cgi-bin/LJ/Feed.pm-336-    $ret .= "  <generator>LiveJournal / $LJ::SITENAME</generator>\n";
dw-free/cgi-bin/LJ/Feed.pm-337-    $ret .= "  <lj:journal>" . $u->user . "</lj:journal>\n";
dw-free/cgi-bin/LJ/Feed.pm-338-    $ret .= "  <lj:journaltype>" . $u->journaltype_readable . "</lj:journaltype>\n";
dw-free/cgi-bin/LJ/Feed.pm:339:    # TODO: add 'language' field when user.lang has more useful information
dw-free/cgi-bin/LJ/Feed.pm-340-
dw-free/cgi-bin/LJ/Feed.pm-341-    if ( $hubbub ) {
dw-free/cgi-bin/LJ/Feed.pm-342-        $ret .= "  <atom10:link rel='self' href='" . $u->journal_base . "/data/rss' />\n";
--
dw-free/cgi-bin/LJ/Feed.pm-397-        # support 'podcasting' enclosures
dw-free/cgi-bin/LJ/Feed.pm-398-        $ret .= LJ::Hooks::run_hook( "pp_rss_enclosure",
dw-free/cgi-bin/LJ/Feed.pm-399-                { userid => $u->{userid}, ppid => $it->{ppid} }) if $it->{ppid};
dw-free/cgi-bin/LJ/Feed.pm:400:        # TODO: add author field with posterid's email address, respect communities
dw-free/cgi-bin/LJ/Feed.pm-401-        $ret .= "  <lj:music>" . LJ::exml($it->{music}) . "</lj:music>\n" if $it->{music};
dw-free/cgi-bin/LJ/Feed.pm-402-        $ret .= "  <lj:mood>" . LJ::exml($it->{mood}) . "</lj:mood>\n" if $it->{mood};
dw-free/cgi-bin/LJ/Feed.pm-403-        $ret .= "  <lj:security>" . LJ::exml($it->{security}) . "</lj:security>\n" if $it->{security};
--
dw-free/cgi-bin/LJ/Feed.pm-491-
dw-free/cgi-bin/LJ/Feed.pm-492-    my $posteru = LJ::load_userids( map { $_->{posterid} } @$cleanitems);
dw-free/cgi-bin/LJ/Feed.pm-493-    # output individual item blocks
dw-free/cgi-bin/LJ/Feed.pm:494:    # FIXME: use LJ::Entry->atom_entry?
dw-free/cgi-bin/LJ/Feed.pm-495-    foreach my $it (@$cleanitems)
dw-free/cgi-bin/LJ/Feed.pm-496-    {
dw-free/cgi-bin/LJ/Feed.pm-497-        my $itemid = $it->{itemid};
--
dw-free/cgi-bin/LJ/Feed.pm-658-        my $ecountry = LJ::eurl($u->{'country'});
dw-free/cgi-bin/LJ/Feed.pm-659-        $ret .= "    <ya:country dc:title=\"$ecountry\" rdf:resource=\"$LJ::SITEROOT/directorysearch?opt_sort=ut&amp;s_loc=1&amp;loc_cn=$ecountry\"/>\n" if $u->can_show_location($remote);
dw-free/cgi-bin/LJ/Feed.pm-660-        if ($u->{'city'}) {
dw-free/cgi-bin/LJ/Feed.pm:661:            my $estate = '';  # FIXME: add state.  Yandex didn't need it.
dw-free/cgi-bin/LJ/Feed.pm-662-            my $ecity = LJ::eurl($u->{'city'});
dw-free/cgi-bin/LJ/Feed.pm-663-            $ret .= "    <ya:city dc:title=\"$ecity\" rdf:resource=\"$LJ::SITEROOT/directorysearch?opt_sort=ut&amp;s_loc=1&amp;loc_cn=$ecountry&amp;loc_st=$estate&amp;loc_ci=$ecity\"/>\n" if $u->can_show_location($remote);
dw-free/cgi-bin/LJ/Feed.pm-664-       }
--
dw-free/cgi-bin/LJ/Feed.pm-830-    }
dw-free/cgi-bin/LJ/Feed.pm-831-
dw-free/cgi-bin/LJ/Feed.pm-832-    # Local site-specific content
dw-free/cgi-bin/LJ/Feed.pm:833:    # TODO: Give these hooks access to $view somehow?
dw-free/cgi-bin/LJ/Feed.pm-834-    LJ::Hooks::run_hook("yadis_service_descriptors", \$ret);
dw-free/cgi-bin/LJ/Feed.pm-835-
dw-free/cgi-bin/LJ/Feed.pm-836-    $println->('</XRD></xrds:XRDS>');
--
dw-free/cgi-bin/LJ/Feed.pm-902-               grep { $info->{pic}->{$_}->{state} eq 'N' }
dw-free/cgi-bin/LJ/Feed.pm-903-               keys %{ $info->{pic} };
dw-free/cgi-bin/LJ/Feed.pm-904-
dw-free/cgi-bin/LJ/Feed.pm:905:    # FIXME: It sucks that there are two different methods for aggregating
dw-free/cgi-bin/LJ/Feed.pm-906-    #        the information for a user's set of icons, one of which doesn't
dw-free/cgi-bin/LJ/Feed.pm-907-    #        include keywords and the other of which doesn't include pictime.
dw-free/cgi-bin/LJ/Feed.pm-908-    #        But hey, at least they both use caching.
--
dw-free/cgi-bin/LJ/NotificationInbox.pm-390-    LJ::MemCache::delete($self->_unread_memkey);
dw-free/cgi-bin/LJ/NotificationInbox.pm-391-}
dw-free/cgi-bin/LJ/NotificationInbox.pm-392-
dw-free/cgi-bin/LJ/NotificationInbox.pm:393:# FIXME: make this faster
dw-free/cgi-bin/LJ/NotificationInbox.pm-394-sub oldest_item {
dw-free/cgi-bin/LJ/NotificationInbox.pm-395-    my $self = shift;
dw-free/cgi-bin/LJ/NotificationInbox.pm-396-    my @items = $self->items;
--
dw-free/cgi-bin/LJ/Global/Defaults.pm-143-        }
dw-free/cgi-bin/LJ/Global/Defaults.pm-144-    }
dw-free/cgi-bin/LJ/Global/Defaults.pm-145-
dw-free/cgi-bin/LJ/Global/Defaults.pm:146:    # FIXME: should forcibly limit userlinks to 255 (tinyint)
dw-free/cgi-bin/LJ/Global/Defaults.pm-147-
dw-free/cgi-bin/LJ/Global/Defaults.pm-148-    # Send community invites from the admin address unless otherwise specified
dw-free/cgi-bin/LJ/Global/Defaults.pm-149-    $COMMUNITY_EMAIL ||= $ADMIN_EMAIL;
--
dw-free/cgi-bin/LJ/Global/Defaults.pm-330-    $LJ::LIB_RES_PRIORITY = 3;
dw-free/cgi-bin/LJ/Global/Defaults.pm-331-    $LJ::SCHEME_RES_PRIORITY = 2;
dw-free/cgi-bin/LJ/Global/Defaults.pm-332-
dw-free/cgi-bin/LJ/Global/Defaults.pm:333:    # FIXME: remove the need for this, it's a hack of a hack of a hack
dw-free/cgi-bin/LJ/Global/Defaults.pm-334-    # it used to be that site scheme pages were called later than page-level CSS
dw-free/cgi-bin/LJ/Global/Defaults.pm-335-    # so page-level CSS was written with that assumption, and overrode some colors
dw-free/cgi-bin/LJ/Global/Defaults.pm-336-    # now that site scheme pages are called earlier than page-level CSS
--
dw-free/cgi-bin/LJ/Global/Defaults.pm-340-
dw-free/cgi-bin/LJ/Global/Defaults.pm-341-    # we only support the minifaction of a subset of pre-generated files
dw-free/cgi-bin/LJ/Global/Defaults.pm-342-    # so for now, let's just configure which files to use a minified version of
dw-free/cgi-bin/LJ/Global/Defaults.pm:343:    # TODO: minify as part of the build process, and remove this hardcoding
dw-free/cgi-bin/LJ/Global/Defaults.pm-344-    %LJ::MINIFY = (
dw-free/cgi-bin/LJ/Global/Defaults.pm-345-        "js/jquery/jquery-1.5.2.js"     => "js/jquery/jquery-1.5.2.min.js",
dw-free/cgi-bin/LJ/Global/Defaults.pm-346-        "js/jquery/jquery.ui.core.js"   => "js/jquery/jquery.ui.core.min.js",
--
dw-free/cgi-bin/LJ/Worker/Gearman.pm-98-            exit 0 if -e "/var/run/gearman/$$.please_die" || -e "/var/run/ljworker/$$.please_die";
dw-free/cgi-bin/LJ/Worker/Gearman.pm-99-        }
dw-free/cgi-bin/LJ/Worker/Gearman.pm-100-
dw-free/cgi-bin/LJ/Worker/Gearman.pm:101:        $worker->job_servers(@LJ::GEARMAN_SERVERS); # TODO: don't do this everytime, only when config changes?
dw-free/cgi-bin/LJ/Worker/Gearman.pm-102-
dw-free/cgi-bin/LJ/Worker/Gearman.pm-103-        exit 0 if $quit_flag;
dw-free/cgi-bin/LJ/Worker/Gearman.pm-104-    };
--
dw-free/cgi-bin/LJ/ParseFeed.pm-50-    # is it RSS or Atom?
dw-free/cgi-bin/LJ/ParseFeed.pm-51-    # Atom feeds are rare for now, so prefer to err in favor of RSS
dw-free/cgi-bin/LJ/ParseFeed.pm-52-    # simple heuristic: Atom feeds will have '<feed' somewhere
dw-free/cgi-bin/LJ/ParseFeed.pm:53:    # TODO: maybe store the feed's type on creation in a userprop and not guess here
dw-free/cgi-bin/LJ/ParseFeed.pm-54-
dw-free/cgi-bin/LJ/ParseFeed.pm-55-    if ( (defined $type && $type eq 'atom') || $content =~ m!\<feed!) {
dw-free/cgi-bin/LJ/ParseFeed.pm-56-        # try treating it as an atom feed
--
dw-free/cgi-bin/LJ/ParseFeed.pm-168-sub w3cdtf_to_time {
dw-free/cgi-bin/LJ/ParseFeed.pm-169-    my $tw3 = shift;
dw-free/cgi-bin/LJ/ParseFeed.pm-170-
dw-free/cgi-bin/LJ/ParseFeed.pm:171:    # TODO: Should somehow return the timezone offset
dw-free/cgi-bin/LJ/ParseFeed.pm-172-    #   so that it can stored... but we don't do timezones
dw-free/cgi-bin/LJ/ParseFeed.pm-173-    #   yet anyway. For now, just strip the timezone
dw-free/cgi-bin/LJ/ParseFeed.pm-174-    #   portion if it is present, along with the decimal
--
dw-free/cgi-bin/LJ/ParseFeed.pm-429-            unless (scalar(@{$item->{'contents'}}) >= 1) {
dw-free/cgi-bin/LJ/ParseFeed.pm-430-                # this item had no <content>
dw-free/cgi-bin/LJ/ParseFeed.pm-431-                # maybe it has <summary>? if so, use <summary>
dw-free/cgi-bin/LJ/ParseFeed.pm:432:                # TODO: type= or encoding issues here? perhaps unite
dw-free/cgi-bin/LJ/ParseFeed.pm-433-                # handling of <summary> with that of <content>?
dw-free/cgi-bin/LJ/ParseFeed.pm-434-                if ($item->{'_atom_summary'}) {
dw-free/cgi-bin/LJ/ParseFeed.pm-435-                    $item->{'text'} = $item->{'_atom_summary'};
--
dw-free/cgi-bin/LJ/ParseFeed.pm-473-                # we ignore the 'mode' attribute of <content>. If it's "xml", we've
dw-free/cgi-bin/LJ/ParseFeed.pm-474-                # stringified it by accumulation; if it's "escaped", our parser
dw-free/cgi-bin/LJ/ParseFeed.pm-475-                # unescaped it
dw-free/cgi-bin/LJ/ParseFeed.pm:476:                # TODO: handle mode=base64?
dw-free/cgi-bin/LJ/ParseFeed.pm-477-
dw-free/cgi-bin/LJ/ParseFeed.pm-478-                $item->{'text'} = $content->[1];
dw-free/cgi-bin/LJ/ParseFeed.pm-479-                delete $item->{'contents'};
--
dw-free/cgi-bin/LJ/CleanHTML.pm-580-
dw-free/cgi-bin/LJ/CleanHTML.pm-581-                        # looks good, render
dw-free/cgi-bin/LJ/CleanHTML.pm-582-                        if ( $opts->{textonly} ) {
dw-free/cgi-bin/LJ/CleanHTML.pm:583:                            # FIXME: need a textonly way of identifying users better?  "user@LJ"?
dw-free/cgi-bin/LJ/CleanHTML.pm-584-                            $newdata .= $user;
dw-free/cgi-bin/LJ/CleanHTML.pm-585-                        } else {
dw-free/cgi-bin/LJ/CleanHTML.pm-586-                            $newdata .= $ext_u->ljuser_display( no_ljuser_class => $to_external_site );
--
dw-free/cgi-bin/LJ/CleanHTML.pm-910-                        # that are allowed (by still being in %$hash after cleaning)
dw-free/cgi-bin/LJ/CleanHTML.pm-911-                        foreach (@$attrs) {
dw-free/cgi-bin/LJ/CleanHTML.pm-912-                            unless (LJ::is_ascii($hash->{$_})) {
dw-free/cgi-bin/LJ/CleanHTML.pm:913:                                # FIXME: this is so ghetto.  make faster.  make generic.
dw-free/cgi-bin/LJ/CleanHTML.pm-914-                                # HTML::Parser decodes entities for us (which is good)
dw-free/cgi-bin/LJ/CleanHTML.pm-915-                                # but in Perl 5.8 also includes the "poison" SvUTF8
dw-free/cgi-bin/LJ/CleanHTML.pm-916-                                # flag on the scalar it returns, thus poisoning the
--
dw-free/cgi-bin/LJ/ModuleLoader.pm-100-    return 0;
dw-free/cgi-bin/LJ/ModuleLoader.pm-101-}
dw-free/cgi-bin/LJ/ModuleLoader.pm-102-
dw-free/cgi-bin/LJ/ModuleLoader.pm:103:# FIXME: This should do more...
dw-free/cgi-bin/LJ/ModuleLoader.pm-104-
dw-free/cgi-bin/LJ/ModuleLoader.pm-105-1;
--
dw-free/cgi-bin/LJ/Faq.pm-21-# Initially built in a hackathon, so this is only moderately awesome
dw-free/cgi-bin/LJ/Faq.pm-22-# -- whitaker 2006/06/23
dw-free/cgi-bin/LJ/Faq.pm-23-
dw-free/cgi-bin/LJ/Faq.pm:24:# FIXME: singletons?
dw-free/cgi-bin/LJ/Faq.pm-25-
dw-free/cgi-bin/LJ/Faq.pm-26-# <LJFUNC>
dw-free/cgi-bin/LJ/Faq.pm-27-# name: LJ::Faq::new
--
dw-free/cgi-bin/LJ/Faq.pm-42-
dw-free/cgi-bin/LJ/Faq.pm-43-    $self->{$_} = delete $opts{$_}
dw-free/cgi-bin/LJ/Faq.pm-44-        foreach qw(faqid question summary answer faqcat lastmoduserid sortorder lastmodtime unixmodtime);
dw-free/cgi-bin/LJ/Faq.pm:45:    # FIXME: shouldn't that be the root language of the faq domain instead?
dw-free/cgi-bin/LJ/Faq.pm-46-    $self->{lang} = delete $opts{lang} || $LJ::DEFAULT_LANG;
dw-free/cgi-bin/LJ/Faq.pm-47-
dw-free/cgi-bin/LJ/Faq.pm-48-    croak("unknown parameters: " . join(", ", keys %opts))
--
dw-free/cgi-bin/LJ/Faq.pm-76-        or die "Unable to contact global reader";
dw-free/cgi-bin/LJ/Faq.pm-77-
dw-free/cgi-bin/LJ/Faq.pm-78-    my $faq;
dw-free/cgi-bin/LJ/Faq.pm:79:    # FIXME: shouldn't that be the root language of the faq domain instead?
dw-free/cgi-bin/LJ/Faq.pm-80-    if ($lang eq $LJ::DEFAULT_LANG) {
dw-free/cgi-bin/LJ/Faq.pm-81-        my $f = $dbr->selectrow_hashref
dw-free/cgi-bin/LJ/Faq.pm-82-            ("SELECT faqid, question, summary, answer, faqcat, lastmoduserid, ".
--
dw-free/cgi-bin/LJ/Faq.pm-157-        push @faqs, $class->new(%$f);
dw-free/cgi-bin/LJ/Faq.pm-158-    }
dw-free/cgi-bin/LJ/Faq.pm-159-
dw-free/cgi-bin/LJ/Faq.pm:160:    # FIXME: shouldn't that be the root language of the faq domain instead?
dw-free/cgi-bin/LJ/Faq.pm-161-    if ($lang ne $LJ::DEFAULT_LANG) {
dw-free/cgi-bin/LJ/Faq.pm-162-        $class->lang_update_in_place($lang => @faqs);
dw-free/cgi-bin/LJ/Faq.pm-163-    }
--
dw-free/cgi-bin/LJ/Faq.pm-291-
dw-free/cgi-bin/LJ/Faq.pm-292-        $_->{summary}  = $LJ::_T_FAQ_SUMMARY_OVERRIDE if $LJ::_T_FAQ_SUMMARY_OVERRIDE;
dw-free/cgi-bin/LJ/Faq.pm-293-
dw-free/cgi-bin/LJ/Faq.pm:294:        # FIXME?: the join can probably be avoided, eg by using something like
dw-free/cgi-bin/LJ/Faq.pm-295-        # LJ::Lang::get_chgtime_unix for time of last change and a single-table
dw-free/cgi-bin/LJ/Faq.pm-296-        # "SELECT userid FROM ml_text WHERE t.lnid=? AND t.dmid=? AND t.itid=?
dw-free/cgi-bin/LJ/Faq.pm-297-        # ORDER BY t.txtid DESC LIMIT 1" for userid.
--
dw-free/cgi-bin/LJ/Faq.pm-475-
dw-free/cgi-bin/LJ/Faq.pm-476-    # Render FAQs, leaving [[faqtitle:#]] intact. This is to let users search
dw-free/cgi-bin/LJ/Faq.pm-477-    # for user interface strings without FAQ titles getting in the way.
dw-free/cgi-bin/LJ/Faq.pm:478:    # FIXME: This also expands [[username(:foo)?]] and [[journalurl(:bar)?]].
dw-free/cgi-bin/LJ/Faq.pm-479-    # Should it?
dw-free/cgi-bin/LJ/Faq.pm-480-    $class->render_in_place({skipfaqs => 1, lang => $lang, user => $user, url => $user_url}, @faqs)
dw-free/cgi-bin/LJ/Faq.pm-481-        or die "initial FAQ rendering failed";
--
dw-free/cgi-bin/LJ/Support.pm-424-{
dw-free/cgi-bin/LJ/Support.pm-425-    my ($spid, $propname, $propval) = @_;
dw-free/cgi-bin/LJ/Support.pm-426-
dw-free/cgi-bin/LJ/Support.pm:427:    # TODO:
dw-free/cgi-bin/LJ/Support.pm-428-    # -- delete on 'undef' propval
dw-free/cgi-bin/LJ/Support.pm-429-    # -- allow setting of multiple
dw-free/cgi-bin/LJ/Support.pm-430-
--
dw-free/cgi-bin/LJ/Web.pm-85-            "width=\"$i->{'width'}\" height=\"$i->{'height'}\" title=\"$alt\" ".
dw-free/cgi-bin/LJ/Web.pm-86-            "alt=\"$alt\" border='0'$attrs />";
dw-free/cgi-bin/LJ/Web.pm-87-    }
dw-free/cgi-bin/LJ/Web.pm:88:    return "<b>XXX</b>";
dw-free/cgi-bin/LJ/Web.pm-89-}
dw-free/cgi-bin/LJ/Web.pm-90-
dw-free/cgi-bin/LJ/Web.pm-91-# <LJFUNC>
--
dw-free/cgi-bin/LJ/Web.pm-310-# </LJFUNC>
dw-free/cgi-bin/LJ/Web.pm-311-sub error_list
dw-free/cgi-bin/LJ/Web.pm-312-{
dw-free/cgi-bin/LJ/Web.pm:313:    # FIXME: retrofit like bad_input above?  merge?  make aliases for each other?
dw-free/cgi-bin/LJ/Web.pm-314-    my @errors = @_;
dw-free/cgi-bin/LJ/Web.pm-315-    my $ret;
dw-free/cgi-bin/LJ/Web.pm-316-    $ret .= "<?errorbar ";
--
dw-free/cgi-bin/LJ/Web.pm-1023-                                      ));
dw-free/cgi-bin/LJ/Web.pm-1024-
dw-free/cgi-bin/LJ/Web.pm-1025-    if ( LJ::BetaFeatures->user_in_beta( $remote => "journaljquery" ) ) {
dw-free/cgi-bin/LJ/Web.pm:1026:        # FIXME: figure out how to fix the saving of the qr entry stuff
dw-free/cgi-bin/LJ/Web.pm-1027-        $ret .= qq{jQuery(function(jQ){
dw-free/cgi-bin/LJ/Web.pm-1028-                jQ("body").append(jQ("<div id='qrdiv'></div>").html("$qrhtml").hide());
dw-free/cgi-bin/LJ/Web.pm-1029-            });
--
dw-free/cgi-bin/LJ/Web.pm-2508-    my $include_links = ! $opts{nolinks};
dw-free/cgi-bin/LJ/Web.pm-2509-    my $include_libs = ! $opts{nolib};
dw-free/cgi-bin/LJ/Web.pm-2510-
dw-free/cgi-bin/LJ/Web.pm:2511:    # TODO: automatic dependencies from external map and/or content of files,
dw-free/cgi-bin/LJ/Web.pm-2512-    # currently it's limited to dependencies on the order you call LJ::need_res();
dw-free/cgi-bin/LJ/Web.pm-2513-    my $ret = "";
dw-free/cgi-bin/LJ/Web.pm-2514-    my $do_concat = $LJ::IS_SSL ? $LJ::CONCAT_RES_SSL : $LJ::CONCAT_RES;
--
dw-free/cgi-bin/LJ/Web.pm-3202-    my $args = LJ::eurl( $r->query_string ) || '';
dw-free/cgi-bin/LJ/Web.pm-3203-    my $view = $r->note( 'view' ) || '';
dw-free/cgi-bin/LJ/Web.pm-3204-
dw-free/cgi-bin/LJ/Web.pm:3205:    # FIXME: remove argument
dw-free/cgi-bin/LJ/Web.pm-3206-    if ( $jquery ) {
dw-free/cgi-bin/LJ/Web.pm-3207-        $ret .= qq{
dw-free/cgi-bin/LJ/Web.pm-3208-    <script type='text/javascript'>
--
dw-free/cgi-bin/LJ/Subscription/Pending.pm-53-    $journalu ||= LJ::want_user(delete $opts{journalid});
dw-free/cgi-bin/LJ/Subscription/Pending.pm-54-
dw-free/cgi-bin/LJ/Subscription/Pending.pm-55-    # don't care about disabled for pending
dw-free/cgi-bin/LJ/Subscription/Pending.pm:56:    # FIXME: care
dw-free/cgi-bin/LJ/Subscription/Pending.pm-57-    delete $opts{disabled};
dw-free/cgi-bin/LJ/Subscription/Pending.pm-58-
dw-free/cgi-bin/LJ/Subscription/Pending.pm-59-    croak "Invalid params passed to LJ::Subscription::Pending->new: " . join(',', keys %opts) if scalar keys %opts;
--
dw-free/cgi-bin/LJ/Setting/Interests.pm-57-    # Clean interests and make sure they're valid
dw-free/cgi-bin/LJ/Setting/Interests.pm-58-    my @valid_ints = LJ::validate_interest_list(\@interrors, @ints);
dw-free/cgi-bin/LJ/Setting/Interests.pm-59-    if (@interrors > 0) {
dw-free/cgi-bin/LJ/Setting/Interests.pm:60:        # FIXME: We might have a lot of errors. But we can't pass them all in or else
dw-free/cgi-bin/LJ/Setting/Interests.pm-61-        # we have a hash collision. (The class looks for errors with a given key, so
dw-free/cgi-bin/LJ/Setting/Interests.pm-62-        # we need to find a way to say "hey, look for errors with all these keys")
dw-free/cgi-bin/LJ/Setting/Interests.pm-63-        $class->errors("interests" => LJ::Lang::ml($interrors[0]));
--
dw-free/cgi-bin/LJ/IncomingEmailHandle.pm-51-
dw-free/cgi-bin/LJ/IncomingEmailHandle.pm-52-sub _make_tempfile {
dw-free/cgi-bin/LJ/IncomingEmailHandle.pm-53-    my $self = shift;
dw-free/cgi-bin/LJ/IncomingEmailHandle.pm:54:    $self->{tempfh} = File::Temp->new(TEMPLATE => 'incemailXXXXX',
dw-free/cgi-bin/LJ/IncomingEmailHandle.pm-55-                                      DIR      => File::Spec->tmpdir,
dw-free/cgi-bin/LJ/IncomingEmailHandle.pm-56-                                      SUFFIX   => ".ieh$self->{id}");
dw-free/cgi-bin/LJ/IncomingEmailHandle.pm-57-}
--
dw-free/cgi-bin/LJ/Widget/InboxFolder.pm-59-    my $itemid = int( $opts{itemid} || 0 );
dw-free/cgi-bin/LJ/Widget/InboxFolder.pm-60-    my $remote = LJ::get_remote();
dw-free/cgi-bin/LJ/Widget/InboxFolder.pm-61-
dw-free/cgi-bin/LJ/Widget/InboxFolder.pm:62:    my $unread_count = 1; #TODO get real number
dw-free/cgi-bin/LJ/Widget/InboxFolder.pm-63-    my $disabled = $unread_count ? '' : 'disabled';
dw-free/cgi-bin/LJ/Widget/InboxFolder.pm-64-
dw-free/cgi-bin/LJ/Widget/InboxFolder.pm-65-    # print form
--
dw-free/cgi-bin/LJ/Widget/ImportQueueStatus.pm-28-
dw-free/cgi-bin/LJ/Widget/ImportQueueStatus.pm-29-    my $depth = LJ::MemCache::get( 'importer_queue_depth' );
dw-free/cgi-bin/LJ/Widget/ImportQueueStatus.pm-30-    unless ( $depth ) {
dw-free/cgi-bin/LJ/Widget/ImportQueueStatus.pm:31:        # FIXME: don't make this slam the db with people asking the same question, use a lock
dw-free/cgi-bin/LJ/Widget/ImportQueueStatus.pm:32:        # FIXME: we don't have ddlockd, maybe we should
dw-free/cgi-bin/LJ/Widget/ImportQueueStatus.pm-33-        
dw-free/cgi-bin/LJ/Widget/ImportQueueStatus.pm-34-        # do manual connection
dw-free/cgi-bin/LJ/Widget/ImportQueueStatus.pm-35-        my $db = $LJ::THESCHWARTZ_DBS[0];
--
dw-free/cgi-bin/LJ/Widget/ManageSiteMessages.pm-42-    $ret .= "<?p (<a href='$LJ::SITEROOT/admin/sitemessages/add'>Add a site message</a>) p?>";
dw-free/cgi-bin/LJ/Widget/ManageSiteMessages.pm-43-    $ret .= "<?p Select a month to view all messages that started during that month. p?>";
dw-free/cgi-bin/LJ/Widget/ManageSiteMessages.pm-44-
dw-free/cgi-bin/LJ/Widget/ManageSiteMessages.pm:45:    # TODO: supported way for widgets to do GET forms?
dw-free/cgi-bin/LJ/Widget/ManageSiteMessages.pm-46-    #       -- lame that GET/POST is done differently in here
dw-free/cgi-bin/LJ/Widget/ManageSiteMessages.pm-47-    $ret .= "<form method='GET'>";
dw-free/cgi-bin/LJ/Widget/ManageSiteMessages.pm-48-    $ret .= "<?p Year: " . LJ::html_text({ name => 'year', size => '4', maxlength => '4', value => $year }) . " ";
--
dw-free/cgi-bin/LJ/TextMessage.pm-19-
dw-free/cgi-bin/LJ/TextMessage.pm-20-package LJ::TextMessage;
dw-free/cgi-bin/LJ/TextMessage.pm-21-
dw-free/cgi-bin/LJ/TextMessage.pm:22:use URI::Escape;  # FIXME: don't use this (uri_escape() below), when we have LJ::eurl() as our standard
dw-free/cgi-bin/LJ/TextMessage.pm-23-use  HTTP::Request;
dw-free/cgi-bin/LJ/TextMessage.pm-24-use  LWP::UserAgent;
dw-free/cgi-bin/LJ/TextMessage.pm-25-use  MIME::Lite;
--
dw-free/cgi-bin/ljlib.pl-223-    my $id = {
dw-free/cgi-bin/ljlib.pl-224-        "userpic" => 1,
dw-free/cgi-bin/ljlib.pl-225-    }->{$name};
dw-free/cgi-bin/ljlib.pl:226:    # FIXME: add hook support, so sites can't define their own
dw-free/cgi-bin/ljlib.pl-227-    # general code gets priority on numbers, say, 1-200, so verify
dw-free/cgi-bin/ljlib.pl-228-    # hook returns a number 201-255
dw-free/cgi-bin/ljlib.pl-229-    return $id if $id;
--
dw-free/cgi-bin/ljlib.pl-630-sub auth_digest {
dw-free/cgi-bin/ljlib.pl-631-    my ($r) = @_;
dw-free/cgi-bin/ljlib.pl-632-
dw-free/cgi-bin/ljlib.pl:633:    # FIXME: Move this up to the caller.
dw-free/cgi-bin/ljlib.pl-634-    $r = DW::Request->get;
dw-free/cgi-bin/ljlib.pl-635-
dw-free/cgi-bin/ljlib.pl-636-    my $decline = sub {
--
dw-free/cgi-bin/ljlib.pl-651-    my $header = $r->header_in("Authorization");
dw-free/cgi-bin/ljlib.pl-652-
dw-free/cgi-bin/ljlib.pl-653-    # parse it
dw-free/cgi-bin/ljlib.pl:654:    # TODO: could there be "," or " " inside attribute values, requiring
dw-free/cgi-bin/ljlib.pl-655-    # trickier parsing?
dw-free/cgi-bin/ljlib.pl-656-
dw-free/cgi-bin/ljlib.pl-657-    my @vals = split(/[, \s]/, $header);
--
dw-free/cgi-bin/ljlib.pl-997-sub start_request
dw-free/cgi-bin/ljlib.pl-998-{
dw-free/cgi-bin/ljlib.pl-999-    handle_caches();
dw-free/cgi-bin/ljlib.pl:1000:    # TODO: check process growth size
dw-free/cgi-bin/ljlib.pl-1001-
dw-free/cgi-bin/ljlib.pl-1002-    # clear per-request caches
dw-free/cgi-bin/ljlib.pl-1003-    LJ::unset_remote();               # clear cached remote
--
dw-free/cgi-bin/DW/Request/Apache2.pm-250-    return Apache2::Const::OK;
dw-free/cgi-bin/DW/Request/Apache2.pm-251-}
dw-free/cgi-bin/DW/Request/Apache2.pm-252-
dw-free/cgi-bin/DW/Request/Apache2.pm:253:# FIXME: Temporary, until BML is gone / converted
dw-free/cgi-bin/DW/Request/Apache2.pm:254:# FIXME: This is only valid from a response handler
dw-free/cgi-bin/DW/Request/Apache2.pm-255-sub call_bml {
dw-free/cgi-bin/DW/Request/Apache2.pm-256-    my DW::Request::Apache2 $self = shift;
dw-free/cgi-bin/DW/Request/Apache2.pm-257-
--
dw-free/cgi-bin/DW/Request/Standard.pm-184-}
dw-free/cgi-bin/DW/Request/Standard.pm-185-
dw-free/cgi-bin/DW/Request/Standard.pm-186-# this may not be precisely correct?  maybe we need to maintain our
dw-free/cgi-bin/DW/Request/Standard.pm:187:# own set of headers that are separate for errors... FIXME: investigate
dw-free/cgi-bin/DW/Request/Standard.pm-188-*err_header_out = \&header_out;
dw-free/cgi-bin/DW/Request/Standard.pm-189-*err_header_out_add = \&header_out_add;
dw-free/cgi-bin/DW/Request/Standard.pm-190-
--
dw-free/cgi-bin/DW/Request/Standard.pm-192-sub get_remote_ip {
dw-free/cgi-bin/DW/Request/Standard.pm-193-    my DW::Request::Standard $self = $_[0];
dw-free/cgi-bin/DW/Request/Standard.pm-194-
dw-free/cgi-bin/DW/Request/Standard.pm:195:    # FIXME: this needs to support more than just the header ... what if we're not
dw-free/cgi-bin/DW/Request/Standard.pm-196-    # running behind a proxy?  can we use the environment?  do we fake it?  for now,
dw-free/cgi-bin/DW/Request/Standard.pm-197-    # assume that if there is no X-Forwarded-For or we don't trust it, we just put in
dw-free/cgi-bin/DW/Request/Standard.pm-198-    # a bogus IP...
--
dw-free/cgi-bin/DW/Request/Standard.pm-238-# meets conditions
dw-free/cgi-bin/DW/Request/Standard.pm-239-# conditional GET triggered on:
dw-free/cgi-bin/DW/Request/Standard.pm-240-#   If-Modified-Since
dw-free/cgi-bin/DW/Request/Standard.pm:241:#   If-Unmodified-Since     FIXME: implement
dw-free/cgi-bin/DW/Request/Standard.pm:242:#   If-Match                FIXME: implement
dw-free/cgi-bin/DW/Request/Standard.pm:243:#   If-None-Match           FIXME: implement
dw-free/cgi-bin/DW/Request/Standard.pm:244:#   If-Range                FIXME: implement
dw-free/cgi-bin/DW/Request/Standard.pm-245-sub meets_conditions {
dw-free/cgi-bin/DW/Request/Standard.pm-246-    my DW::Request::Standard $self = $_[0];
dw-free/cgi-bin/DW/Request/Standard.pm-247-
dw-free/cgi-bin/DW/Request/Standard.pm-248-    return $self->OK
dw-free/cgi-bin/DW/Request/Standard.pm-249-        if LJ::http_to_time( $self->header_in("If-Modified-Since") ) <= LJ::http_to_time( $self->header_out("Last-Modified") );
dw-free/cgi-bin/DW/Request/Standard.pm-250-
dw-free/cgi-bin/DW/Request/Standard.pm:251:    # FIXME: this should be pretty easy ... check the If headers (only time ones?)
dw-free/cgi-bin/DW/Request/Standard.pm-252-    # and see if they're good or not.  return proper status code here (OK, NOT_MODIFIED)
dw-free/cgi-bin/DW/Request/Standard.pm-253-    # go see the one caller in LJ::Feed
dw-free/cgi-bin/DW/Request/Standard.pm-254-    return 0;
--
dw-free/cgi-bin/DW/Request/Standard.pm-260-    return;
dw-free/cgi-bin/DW/Request/Standard.pm-261-}
dw-free/cgi-bin/DW/Request/Standard.pm-262-
dw-free/cgi-bin/DW/Request/Standard.pm:263:# FIXME(dre): this may not be the most efficient way but is
dw-free/cgi-bin/DW/Request/Standard.pm-264-# totally fine when we are just using this for tests.
dw-free/cgi-bin/DW/Request/Standard.pm-265-# We *may* need to revisit this if we use this for serving pages
dw-free/cgi-bin/DW/Request/Standard.pm-266-# IMPORTANT: Do not pull out $_[1] to a variable in this sub
--
dw-free/cgi-bin/DW/Request/Base.pm-90-    return uc $method eq 'POST';
dw-free/cgi-bin/DW/Request/Base.pm-91-}
dw-free/cgi-bin/DW/Request/Base.pm-92-
dw-free/cgi-bin/DW/Request/Base.pm:93:# FIXME: This relies on the behavior parse_args
dw-free/cgi-bin/DW/Request/Base.pm-94-#   and the \0 seperated arguments. This should be cleaned
dw-free/cgi-bin/DW/Request/Base.pm-95-#   up at the same point parse_args is.
dw-free/cgi-bin/DW/Request/Base.pm-96-sub _string_to_multivalue {
--
dw-free/cgi-bin/DW/InviteCodes/Promo.pm-33-Gets a DW::InviteCode::Promo objct
dw-free/cgi-bin/DW/InviteCodes/Promo.pm-34-
dw-free/cgi-bin/DW/InviteCodes/Promo.pm-35-=cut
dw-free/cgi-bin/DW/InviteCodes/Promo.pm:36:# FIXME: Consider process caching and/or memcache, if this is a busy enough path
dw-free/cgi-bin/DW/InviteCodes/Promo.pm-37-sub load {
dw-free/cgi-bin/DW/InviteCodes/Promo.pm-38-    my ( $class, %opts ) = @_;
dw-free/cgi-bin/DW/InviteCodes/Promo.pm-39-    my $dbh = LJ::get_db_writer();
--
dw-free/cgi-bin/DW/Pay.pm-442-
dw-free/cgi-bin/DW/Pay.pm-443-            # but the types are different...
dw-free/cgi-bin/DW/Pay.pm-444-            } else {
dw-free/cgi-bin/DW/Pay.pm:445:                # FIXME: this needs to not be dw-nonfree logic
dw-free/cgi-bin/DW/Pay.pm-446-                my $from_type = $LJ::CAP{$ps->{typeid}}->{_account_type};
dw-free/cgi-bin/DW/Pay.pm-447-                my $to_type = $LJ::CAP{$typeid}->{_account_type};
dw-free/cgi-bin/DW/Pay.pm-448-
--
dw-free/cgi-bin/DW/Pay.pm-659-
dw-free/cgi-bin/DW/Pay.pm-660-    unless ( defined $ct ) {
dw-free/cgi-bin/DW/Pay.pm-661-        # not in memcache, so let's hit the database
dw-free/cgi-bin/DW/Pay.pm:662:        # FIXME: add ddlockd so we don't hit the db in waves every 60 seconds
dw-free/cgi-bin/DW/Pay.pm-663-        my $dbh = DW::Pay::get_db_writer()
dw-free/cgi-bin/DW/Pay.pm-664-            or return error( ERR_TEMP, "Unable to get db writer." );
dw-free/cgi-bin/DW/Pay.pm-665-        $ct = $dbh->selectrow_array( 'SELECT COUNT(*) FROM dw_paidstatus WHERE permanent = 1' )+0;
--
dw-free/cgi-bin/DW/Pay.pm-775-    } else {
dw-free/cgi-bin/DW/Pay.pm-776-        # this is a really bad error we should never have... we can't
dw-free/cgi-bin/DW/Pay.pm-777-        # handle this user
dw-free/cgi-bin/DW/Pay.pm:778:        # FIXME: candidate for email-site-admins
dw-free/cgi-bin/DW/Pay.pm-779-        return error( ERR_FATAL, "Unknown typeid." )
dw-free/cgi-bin/DW/Pay.pm-780-            unless DW::Pay::type_is_valid( $ps->{typeid} );
dw-free/cgi-bin/DW/Pay.pm-781-
--
dw-free/cgi-bin/DW/Template/Filters.pm-82-        if $uselang eq 'debug' || LJ::Lang::get_lang( $uselang );
dw-free/cgi-bin/DW/Template/Filters.pm-83-
dw-free/cgi-bin/DW/Template/Filters.pm-84-    # next is their cookie preference
dw-free/cgi-bin/DW/Template/Filters.pm:85:    #FIXME: COOKIE!
dw-free/cgi-bin/DW/Template/Filters.pm-86-    #if ( $r->cookie('langpref') =~ m!^(\w{2,10})/(\d+)$! ) {
dw-free/cgi-bin/DW/Template/Filters.pm-87-    #    if (exists $env->{"Langs-$1"}) {
dw-free/cgi-bin/DW/Template/Filters.pm:88:    #        # FIXME: Probably should actually do this!!!
dw-free/cgi-bin/DW/Template/Filters.pm-89-    #        # make sure the document says it was changed at least as new as when
dw-free/cgi-bin/DW/Template/Filters.pm-90-    #        # the user last set their current language, else their browser might
dw-free/cgi-bin/DW/Template/Filters.pm-91-    #        # show a cached (wrong language) version.
--
dw-free/cgi-bin/DW/Template/Filters.pm-93-    #    }
dw-free/cgi-bin/DW/Template/Filters.pm-94-    #}
dw-free/cgi-bin/DW/Template/Filters.pm-95-
dw-free/cgi-bin/DW/Template/Filters.pm:96:    # FIXME: next is their browser's preference
dw-free/cgi-bin/DW/Template/Filters.pm-97-
dw-free/cgi-bin/DW/Template/Filters.pm-98-    # next is the default language
dw-free/cgi-bin/DW/Template/Filters.pm-99-    return $LJ::DEFAULT_LANG || $LJ::LANGS[0];
--
dw-free/cgi-bin/DW/External/XPostProtocol/LJXMLRPC.pm-39-}
dw-free/cgi-bin/DW/External/XPostProtocol/LJXMLRPC.pm-40-
dw-free/cgi-bin/DW/External/XPostProtocol/LJXMLRPC.pm-41-# internal xml-rpc call method.
dw-free/cgi-bin/DW/External/XPostProtocol/LJXMLRPC.pm:42:# FIXME we should probably combine this with the similar method in
dw-free/cgi-bin/DW/External/XPostProtocol/LJXMLRPC.pm-43-# DW::Worker::ContentImporter::LiveJournal, and move it to a general
dw-free/cgi-bin/DW/External/XPostProtocol/LJXMLRPC.pm-44-# LJ-XMLRPC library class.
dw-free/cgi-bin/DW/External/XPostProtocol/LJXMLRPC.pm-45-sub _call_xmlrpc {
--
dw-free/cgi-bin/DW/External/XPostProtocol/LJXMLRPC.pm-72-}
dw-free/cgi-bin/DW/External/XPostProtocol/LJXMLRPC.pm-73-
dw-free/cgi-bin/DW/External/XPostProtocol/LJXMLRPC.pm-74-# does the authentication call.
dw-free/cgi-bin/DW/External/XPostProtocol/LJXMLRPC.pm:75:# FIXME we should probably combine this with the similar method in
dw-free/cgi-bin/DW/External/XPostProtocol/LJXMLRPC.pm-76-# DW::Worker::ContentImporter::LiveJournal, and move it to a general
dw-free/cgi-bin/DW/External/XPostProtocol/LJXMLRPC.pm-77-# LJ-XMLRPC library class.
dw-free/cgi-bin/DW/External/XPostProtocol/LJXMLRPC.pm-78-sub do_auth {
--
dw-free/cgi-bin/DW/External/XPostProtocol/LJXMLRPC.pm-123-}
dw-free/cgi-bin/DW/External/XPostProtocol/LJXMLRPC.pm-124-
dw-free/cgi-bin/DW/External/XPostProtocol/LJXMLRPC.pm-125-# public xml-rpc call method.
dw-free/cgi-bin/DW/External/XPostProtocol/LJXMLRPC.pm:126:# FIXME we should probably combine this with the similar method in
dw-free/cgi-bin/DW/External/XPostProtocol/LJXMLRPC.pm-127-# DW::Worker::ContentImporter::LiveJournal, and move it to a general
dw-free/cgi-bin/DW/External/XPostProtocol/LJXMLRPC.pm-128-# LJ-XMLRPC library class.
dw-free/cgi-bin/DW/External/XPostProtocol/LJXMLRPC.pm-129-sub call_xmlrpc {
--
dw-free/cgi-bin/DW/External/XPostProtocol/LJXMLRPC.pm-188-        # if it's a post or edit, fully populate the request.
dw-free/cgi-bin/DW/External/XPostProtocol/LJXMLRPC.pm-189-        $req = $self->entry_to_req($entry, $extacct, $auth);
dw-free/cgi-bin/DW/External/XPostProtocol/LJXMLRPC.pm-190-
dw-free/cgi-bin/DW/External/XPostProtocol/LJXMLRPC.pm:191:        # FIXME: temporary hack to limit crossposts to one level, avoiding an infinite loop
dw-free/cgi-bin/DW/External/XPostProtocol/LJXMLRPC.pm-192-        $req->{xpost} = 0;
dw-free/cgi-bin/DW/External/XPostProtocol/LJXMLRPC.pm-193-
dw-free/cgi-bin/DW/External/XPostProtocol/LJXMLRPC.pm-194-        # are we disabling comments on the remote entry?
--
dw-free/cgi-bin/DW/External/XPostProtocol/LJXMLRPC.pm-385-    }
dw-free/cgi-bin/DW/External/XPostProtocol/LJXMLRPC.pm-386-    $req->{props}->{current_moodid} = $external_moodid if $external_moodid;
dw-free/cgi-bin/DW/External/XPostProtocol/LJXMLRPC.pm-387-
dw-free/cgi-bin/DW/External/XPostProtocol/LJXMLRPC.pm:388:    # and set the useragent - FIXME put this somewhere else?
dw-free/cgi-bin/DW/External/XPostProtocol/LJXMLRPC.pm-389-    $req->{props}->{useragent} = "Dreamwidth Crossposter";
dw-free/cgi-bin/DW/External/XPostProtocol/LJXMLRPC.pm-390-    
dw-free/cgi-bin/DW/External/XPostProtocol/LJXMLRPC.pm-391-    # do any per-site preprocessing
--
dw-free/cgi-bin/DW/Shop.pm-139-
dw-free/cgi-bin/DW/Shop.pm-140-# gets a link to the active user; this is done this way with a load_userid call
dw-free/cgi-bin/DW/Shop.pm-141-# to prevent circular references.  (we could just make it a weak reference...?)
dw-free/cgi-bin/DW/Shop.pm:142:# FIXME: explore if LJ uses weak references anywhere and if so we can use them
dw-free/cgi-bin/DW/Shop.pm-143-# to store a weakened-$u in $self in initialize()
dw-free/cgi-bin/DW/Shop.pm-144-sub u {
dw-free/cgi-bin/DW/Shop.pm-145-    return undef if $_[0]->{anon} || ! $_[0]->{userid};
--
dw-free/cgi-bin/DW/Collection.pm-95-}
dw-free/cgi-bin/DW/Collection.pm-96-
dw-free/cgi-bin/DW/Collection.pm-97-# if user can see this
dw-free/cgi-bin/DW/Collection.pm:98:# FIXME: move this out to a general function?
dw-free/cgi-bin/DW/Collection.pm-99-sub visible_to {
dw-free/cgi-bin/DW/Collection.pm-100-    my ( $self, $other_u ) = @_;
dw-free/cgi-bin/DW/Collection.pm-101-    return 0 unless $other_u;
--
dw-free/cgi-bin/DW/Routing/Test.pm-27-    handle_request handle_server_error handle_redirect
dw-free/cgi-bin/DW/Routing/Test.pm-28-    handler regex_handler
dw-free/cgi-bin/DW/Routing/Test.pm-29-    okay is todo_skip skip
dw-free/cgi-bin/DW/Routing/Test.pm:30:    $TODO
dw-free/cgi-bin/DW/Routing/Test.pm-31-);
dw-free/cgi-bin/DW/Routing/Test.pm-32-
dw-free/cgi-bin/DW/Routing/Test.pm-33-my $CLASS = __PACKAGE__;
--
dw-free/cgi-bin/DW/Routing/Test.pm-244-    $tb->todo_skip($why) for( 1 .. $how_many );
dw-free/cgi-bin/DW/Routing/Test.pm-245-
dw-free/cgi-bin/DW/Routing/Test.pm-246-    no warnings 'exiting';
dw-free/cgi-bin/DW/Routing/Test.pm:247:    last TODO;
dw-free/cgi-bin/DW/Routing/Test.pm-248-}
dw-free/cgi-bin/DW/Routing/Test.pm-249-
dw-free/cgi-bin/DW/Routing/Test.pm-250-
--
dw-free/cgi-bin/DW/Logic/Importer.pm-36-
dw-free/cgi-bin/DW/Logic/Importer.pm-37-    my $qs = join ",", map { "?" } @ids;
dw-free/cgi-bin/DW/Logic/Importer.pm-38-
dw-free/cgi-bin/DW/Logic/Importer.pm:39:    # FIXME: memcache this
dw-free/cgi-bin/DW/Logic/Importer.pm-40-    my $imports = $dbh->selectall_arrayref(
dw-free/cgi-bin/DW/Logic/Importer.pm-41-        "SELECT import_data_id, hostname, username, usejournal, password_md5, options FROM import_data WHERE userid = ? AND import_data_id IN ( $qs ) " .
dw-free/cgi-bin/DW/Logic/Importer.pm-42-        "ORDER BY import_data_id ASC",
--
dw-free/cgi-bin/DW/Logic/Importer.pm-63-        or die "No database.";
dw-free/cgi-bin/DW/Logic/Importer.pm-64-
dw-free/cgi-bin/DW/Logic/Importer.pm-65-    # load up their most recent (active) import
dw-free/cgi-bin/DW/Logic/Importer.pm:66:    # FIXME: memcache this
dw-free/cgi-bin/DW/Logic/Importer.pm-67-    my $imports = $dbh->selectall_arrayref(
dw-free/cgi-bin/DW/Logic/Importer.pm-68-        'SELECT import_data_id, hostname, username, usejournal, password_md5, options FROM import_data WHERE userid = ? ' .
dw-free/cgi-bin/DW/Logic/Importer.pm-69-        'ORDER BY import_data_id DESC LIMIT 1',
--
dw-free/cgi-bin/DW/Logic/ProfilePage.pm-311-    my $u = $self->{u};
dw-free/cgi-bin/DW/Logic/ProfilePage.pm-312-    return () unless $u->is_syndicated && LJ::is_enabled( 'hubbub' );
dw-free/cgi-bin/DW/Logic/ProfilePage.pm-313-
dw-free/cgi-bin/DW/Logic/ProfilePage.pm:314:    # FIXME: should probably have a PubSubHubbub module that gets this sort
dw-free/cgi-bin/DW/Logic/ProfilePage.pm-315-    # of thing so we don't have to scatter SQL in the profile logic...
dw-free/cgi-bin/DW/Logic/ProfilePage.pm-316-    my $dbr = LJ::get_db_reader();
dw-free/cgi-bin/DW/Logic/ProfilePage.pm-317-
--
dw-free/cgi-bin/DW/Logic/ProfilePage.pm-673-
dw-free/cgi-bin/DW/Logic/ProfilePage.pm-674-    if ( $ret = $u->bio ) {
dw-free/cgi-bin/DW/Logic/ProfilePage.pm-675-        if ( $u->is_identity && $LJ::ONLY_USER_VHOSTS ) {
dw-free/cgi-bin/DW/Logic/ProfilePage.pm:676:            $ret = LJ::ehtml( $ret ); # XXXXX FIXME: TEMP FIX
dw-free/cgi-bin/DW/Logic/ProfilePage.pm-677-            $ret =~ s!\n!<br />!g;
dw-free/cgi-bin/DW/Logic/ProfilePage.pm-678-        } else {
dw-free/cgi-bin/DW/Logic/ProfilePage.pm-679-            LJ::CleanHTML::clean_userbio( \$ret );
--
dw-free/cgi-bin/DW/Routing.pm-121-    }
dw-free/cgi-bin/DW/Routing.pm-122-
dw-free/cgi-bin/DW/Routing.pm-123-    # try the regex choices next
dw-free/cgi-bin/DW/Routing.pm:124:    # FIXME: this should be a dynamically sorting array so the most used items float to the top
dw-free/cgi-bin/DW/Routing.pm-125-    # for now it doesn't matter so much but eventually when everything is in the routing table
dw-free/cgi-bin/DW/Routing.pm-126-    # that will have to be done
dw-free/cgi-bin/DW/Routing.pm-127-    my @args;
--
dw-free/cgi-bin/DW/Media.pm-100-    my $obj = DW::Media->new( user => $opts{user}, mediaid => $id );
dw-free/cgi-bin/DW/Media.pm-101-
dw-free/cgi-bin/DW/Media.pm-102-    # now we have to stick this in MogileFS
dw-free/cgi-bin/DW/Media.pm:103:    # FIXME: have different MogileFS classes for different media types
dw-free/cgi-bin/DW/Media.pm-104-    my $fh = $mog->new_file( $obj->mogkey, 'media' )
dw-free/cgi-bin/DW/Media.pm:105:        or croak 'Unable to instantiate file in MogileFS.'; # FIXME: nuke the row!
dw-free/cgi-bin/DW/Media.pm-106-    $fh->print( $opts{data} );
dw-free/cgi-bin/DW/Media.pm-107-    $fh->close
dw-free/cgi-bin/DW/Media.pm:108:        or croak 'Unable to save file to MogileFS.'; # FIXME: nuke the row!
dw-free/cgi-bin/DW/Media.pm-109-
dw-free/cgi-bin/DW/Media.pm-110-    # uploaded, so return an object for this item
dw-free/cgi-bin/DW/Media.pm-111-    return $obj;
--
dw-free/cgi-bin/DW/Media.pm-114-sub get_upload_type {
dw-free/cgi-bin/DW/Media.pm-115-    my ( $class, $mime ) = @_;
dw-free/cgi-bin/DW/Media.pm-116-
dw-free/cgi-bin/DW/Media.pm:117:    # FIXME: This may not cover everything. :-)
dw-free/cgi-bin/DW/Media.pm-118-    return (TYPE_PHOTO, 'jpg') if $mime eq 'image/jpeg';
dw-free/cgi-bin/DW/Media.pm-119-    return (TYPE_PHOTO, 'gif') if $mime eq 'image/gif';
dw-free/cgi-bin/DW/Media.pm-120-    return (TYPE_PHOTO, 'png') if $mime eq 'image/png' || $mime eq 'image/x-png';
--
dw-free/cgi-bin/DW/StatData/AccountsByType.pm-51-    my %data;
dw-free/cgi-bin/DW/StatData/AccountsByType.pm-52-    my $dbslow = LJ::get_dbh( 'slow' ) or die "Can't get slow role";
dw-free/cgi-bin/DW/StatData/AccountsByType.pm-53-    
dw-free/cgi-bin/DW/StatData/AccountsByType.pm:54:    # FIXME: look into using a count(*) ... group by. Efficiency?
dw-free/cgi-bin/DW/StatData/AccountsByType.pm-55-    $data{redirect} = $dbslow->selectrow_array( "SELECT COUNT(*) FROM user WHERE journaltype='R'" ) if $opts{redirect};
dw-free/cgi-bin/DW/StatData/AccountsByType.pm-56-    $data{identity} = $dbslow->selectrow_array( "SELECT COUNT(*) FROM user WHERE journaltype='I'" ) if $opts{identity};
dw-free/cgi-bin/DW/StatData/AccountsByType.pm-57-    $data{personal} = $dbslow->selectrow_array( "SELECT COUNT(*) FROM user WHERE journaltype='P'" ) if $opts{personal};
--
dw-free/cgi-bin/DW/Worker/DistributeInvites.pm-41-
dw-free/cgi-bin/DW/Worker/DistributeInvites.pm-42-sub keep_exit_status_for { 86400 } # 24 hours
dw-free/cgi-bin/DW/Worker/DistributeInvites.pm-43-
dw-free/cgi-bin/DW/Worker/DistributeInvites.pm:44:# FIXME: tune value?
dw-free/cgi-bin/DW/Worker/DistributeInvites.pm-45-sub grab_for { 600 }
dw-free/cgi-bin/DW/Worker/DistributeInvites.pm-46-
dw-free/cgi-bin/DW/Worker/DistributeInvites.pm-47-sub work {
--
dw-free/cgi-bin/DW/Worker/DistributeInvites.pm-110-            my $inv_peruser = int( $adj_ninv / $inv_nusers );
dw-free/cgi-bin/DW/Worker/DistributeInvites.pm-111-            $reqemail_vars->{peruser} = $inv_peruser;
dw-free/cgi-bin/DW/Worker/DistributeInvites.pm-112-
dw-free/cgi-bin/DW/Worker/DistributeInvites.pm:113:            # FIXME: make magic number configurable
dw-free/cgi-bin/DW/Worker/DistributeInvites.pm-114-            for (my $start = 0; $start < $inv_nusers; $start += 1000) {
dw-free/cgi-bin/DW/Worker/DistributeInvites.pm-115-                my $end = ($start + 999 < $inv_nusers)
dw-free/cgi-bin/DW/Worker/DistributeInvites.pm-116-                    ? $start + 999
--
dw-free/cgi-bin/DW/Worker/ContentImporter/Local/Comments.pm-102-    my ( $class, $u, $cmt, $errref ) = @_;
dw-free/cgi-bin/DW/Worker/ContentImporter/Local/Comments.pm-103-    $errref ||= '';
dw-free/cgi-bin/DW/Worker/ContentImporter/Local/Comments.pm-104-
dw-free/cgi-bin/DW/Worker/ContentImporter/Local/Comments.pm:105:    # FIXME: we should try to do more than just update the picture keyword, this should handle
dw-free/cgi-bin/DW/Worker/ContentImporter/Local/Comments.pm-106-    # edits and such.  for now, I'm just trying to get the icons to update...
dw-free/cgi-bin/DW/Worker/ContentImporter/Local/Comments.pm-107-    my $c = LJ::Comment->instance( $u, jtalkid => $cmt->{id} )
dw-free/cgi-bin/DW/Worker/ContentImporter/Local/Comments.pm-108-        or return $$errref = 'Unable to instantiate LJ::Comment object.';
--
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal.pm-92-    my ( $class, $data, $url, $acct ) = @_;
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal.pm-93-    return undef unless $acct;
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal.pm-94-
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal.pm:95:# FIXME: have to do something to pass the errors up
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal.pm-96-    my $errors = [];
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal.pm-97-
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal.pm-98-    # canonicalize url
--
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal.pm-108-        return undef unless $acct;
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal.pm-109-
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal.pm-110-        # since we're creating, let's validate this against the deny list
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal.pm:111:        # FIXME: probably need to error nicely here, as we're not creating
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal.pm-112-        # the feed that the user is expecting...
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal.pm-113-        return undef
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal.pm-114-            if LJ::User->is_protected_username( $acct );
--
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal.pm-124-    # Try to figure out if this is a local user.
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal.pm-125-    my ( $hostname, $port ) = ( $1, $2 );
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal.pm-126-    if ( $hostname =~ /\Q$LJ::DOMAIN\E/i ) {
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal.pm:127:        # TODO: have to map this.. :(
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal.pm:128:        # FIXME: why submit a patch that has incomplete code? :|
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal.pm-129-    }
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal.pm-130-
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal.pm-131-    # disallow ports (do we ever see this in the wild and care to support it?)
--
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal.pm-182-            unless defined $oid;
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal.pm-183-    }
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal.pm-184-
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal.pm:185:# FIXME: this is temporarily disabled while we hash out exactly how we want
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal.pm-186-# this functionality to work.
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal.pm-187-#    unless ( defined $fid ) {
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal.pm-188-#        warn "[$$] Remapping feed userid of $data->{hostname}:$user\n";
--
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Userpics.pm-84-        or return $fail->( 'Unable to load target with id %d.', $data->{userid} );
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Userpics.pm-85-    $0 = sprintf( 'content-importer [userpics: %s(%d)]', $u->user, $u->id );
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Userpics.pm-86-
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Userpics.pm:87:# FIXME: URL may not be accurate here for all sites
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Userpics.pm-88-    my $fetch_error = "";
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Userpics.pm-89-    my $un = $data->{usejournal} || $data->{username};
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Userpics.pm-90-    my ( $default, @pics ) = $class->get_lj_userpic_data( "http://$data->{hostname}/users/$un/", $data, $log, \$fetch_error );
--
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Userpics.pm-96-    my $num_imported = scalar( @imported );
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Userpics.pm-97-    my $to_import = scalar( @pics );
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Userpics.pm-98-
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Userpics.pm:99:    # FIXME: Uncomment when "select userpics later is implemented"
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Userpics.pm-100-    #my $has_backup = 0;
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Userpics.pm-101-    # There's nothing the user can do at this point if Mogile is not available, and any error relating to that will likely confuse them.
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Userpics.pm-102-    if ( scalar( @imported ) != scalar( @pics ) ) {
--
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Userpics.pm-108-                pics => \@pics,
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Userpics.pm-109-            };
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Userpics.pm-110-            $mog->store_content( 'import_upi:' . $u->id, 'temp', $data );
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Userpics.pm:111:            # FIXME: Uncomment when "select userpics later is implemented"
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Userpics.pm-112-            #$has_backup = 1;
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Userpics.pm-113-        }
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Userpics.pm-114-    }
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Userpics.pm-115-
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Userpics.pm:116:    # FIXME: Link to "select userpics later" (once it is created) if we have the backup.
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Userpics.pm-117-    my $message = "$num_imported out of $to_import usericon" . ( $to_import == 1 ? "" : "s" ) . " successfully imported.";
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Userpics.pm-118-    $message = "None of your usericons imported successfully." if $num_imported == 0;
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Userpics.pm-119-    $message = "There were no usericons to import." if $to_import == 0;
--
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Userpics.pm-160-    my ( @upics, $upic, $default_upic, $text_tag );
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Userpics.pm-161-
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Userpics.pm-162-    my $cleanup_string = sub {
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Userpics.pm:163:        # FIXME: If LJ ever fixes their /data/userpics feed to double-escepe, this will cause issues.
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Userpics.pm-164-        # Probably need to figure out a way to detect that a double-escape happened and only fix in that case.
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Userpics.pm-165-        return HTML::Entities::decode_entities( encode_utf8( $_[0] || "" ) );
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Userpics.pm-166-    };
--
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/FriendGroups.pm-71-    );
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/FriendGroups.pm-72-
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/FriendGroups.pm-73-    # mark lj_friends item as able to be scheduled now, and save the map
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/FriendGroups.pm:74:# FIXME: what do we do on error case? well, hopefully that will be rare...
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/FriendGroups.pm-75-    $dbh->do(
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/FriendGroups.pm-76-        q{UPDATE import_items SET status = 'ready'
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/FriendGroups.pm-77-          WHERE userid = ? AND item IN ('lj_friends', 'lj_entries')
--
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Bio.pm-60-        timeout  => 20,     # 20 seconds, might need tuning for slow sites
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Bio.pm-61-    ) or return $temp_fail->( 'Unable to allocate useragent.' );
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Bio.pm-62-
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Bio.pm:63:# FIXME: have to flip this back to using the user_path value instead of hardcoded
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Bio.pm-64-# livejournal.com ... this should probably be part of the import_data structure?
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Bio.pm-65-# abstract out sites?
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Bio.pm-66-    my $un = $data->{usejournal} || $data->{username};
--
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Entries.pm-41-        return $class->temp_fail( $data, 'lj_entries', $job, 'Failure running job: %s', $msg );
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Entries.pm-42-    }
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Entries.pm-43-
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Entries.pm:44:    # FIXME: temporary hack to reclaim memory when we have imported entries
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Entries.pm-45-    exit 0;
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Entries.pm-46-}
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Entries.pm-47-
--
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Entries.pm-212-            my ( $posterid, $fid ) = $class->get_remapped_userids( $data, $evt->{poster} );
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Entries.pm-213-
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Entries.pm-214-            unless ( $posterid ) {
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Entries.pm:215:                # FIXME: need a better way of totally dying...
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Entries.pm-216-                push @item_errors, "Unable to map poster from LJ user '$evt->{poster}' to local user.";
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Entries.pm-217-                $status->(
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Entries.pm-218-                    remote_url => $evt->{url},
--
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Entries.pm-225-        }
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Entries.pm-226-
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Entries.pm-227-        # we just link polls to the original site
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Entries.pm:228:# FIXME: this URL should be from some method and not manually constructed
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Entries.pm-229-        my $event = $evt->{event};
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Entries.pm-230-        $event =~ s!<.+?-poll-(\d+?)>![<a href="http://www.$data->{hostname}/poll/?id=$1">Poll #$1</a>]!g;
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Entries.pm-231-
--
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Comments.pm-72-        return $class->temp_fail( $data, 'lj_comments', $job, 'Failure running job: %s', $msg );
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Comments.pm-73-    }
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Comments.pm-74-
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Comments.pm:75:    # FIXME: We leak memory, so exit to reclaim it. Hack.
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Comments.pm-76-    exit 0;
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Comments.pm-77-}
dw-free/cgi-bin/DW/Worker/ContentImporter/LiveJournal/Comments.pm-78-
--
dw-free/cgi-bin/DW/Worker/LatestFeed.pm-25-    my ( $class, $job ) = @_;
dw-free/cgi-bin/DW/Worker/LatestFeed.pm-26-    my $opts = $job->arg;
dw-free/cgi-bin/DW/Worker/LatestFeed.pm-27-
dw-free/cgi-bin/DW/Worker/LatestFeed.pm:28:    # FIXME: we might want to lock here, to protect against the sysadmin running
dw-free/cgi-bin/DW/Worker/LatestFeed.pm-29-    # more than one copy of this job?  otoh, we should just document that there
dw-free/cgi-bin/DW/Worker/LatestFeed.pm-30-    # should only ever be one of these running.
dw-free/cgi-bin/DW/Worker/LatestFeed.pm-31-
--
dw-free/cgi-bin/DW/Worker/XPostWorker.pm-41-
dw-free/cgi-bin/DW/Worker/XPostWorker.pm-42-sub keep_exit_status_for { 86400 } # 24 hours
dw-free/cgi-bin/DW/Worker/XPostWorker.pm-43-
dw-free/cgi-bin/DW/Worker/XPostWorker.pm:44:# FIXME: tune value?
dw-free/cgi-bin/DW/Worker/XPostWorker.pm-45-sub grab_for { 600 }
dw-free/cgi-bin/DW/Worker/XPostWorker.pm-46-
dw-free/cgi-bin/DW/Worker/XPostWorker.pm-47-sub work {
--
dw-free/cgi-bin/DW/Template.pm-251-
dw-free/cgi-bin/DW/Template.pm-252-=cut
dw-free/cgi-bin/DW/Template.pm-253-
dw-free/cgi-bin/DW/Template.pm:254:# FIXME(dre): Remove this method when BML is completely dead
dw-free/cgi-bin/DW/Template.pm-255-#   and refactor the journal scope bits up into render_template or render_string.
dw-free/cgi-bin/DW/Template.pm-256-sub render_template_misc {
dw-free/cgi-bin/DW/Template.pm-257-    my ( $class, $filename, $opts, $extra ) = @_;
--
dw-free/cgi-bin/DW/Captcha/textCAPTCHA.pm-56-
dw-free/cgi-bin/DW/Captcha/textCAPTCHA.pm-57-    # we can't use need_res, alas, because we're printing this inline
dw-free/cgi-bin/DW/Captcha/textCAPTCHA.pm-58-    # after the <head> has already been printed
dw-free/cgi-bin/DW/Captcha/textCAPTCHA.pm:59:    # FIXME: remove check when we get rid of the old library
dw-free/cgi-bin/DW/Captcha/textCAPTCHA.pm-60-    my $loading_text = LJ::Lang::ml( "captcha.loading" );
dw-free/cgi-bin/DW/Captcha/textCAPTCHA.pm-61-    my $captcha_load = $LJ::ACTIVE_RES_GROUP && $LJ::ACTIVE_RES_GROUP eq "jquery"
dw-free/cgi-bin/DW/Captcha/textCAPTCHA.pm-62-        ? qq!
--
dw-free/cgi-bin/DW/Shop/Item.pm-334-            if $u;
dw-free/cgi-bin/DW/Shop/Item.pm-335-    }
dw-free/cgi-bin/DW/Shop/Item.pm-336-
dw-free/cgi-bin/DW/Shop/Item.pm:337:    # FIXME: english strip
dw-free/cgi-bin/DW/Shop/Item.pm-338-    return "$desc for $for";
dw-free/cgi-bin/DW/Shop/Item.pm-339-}
dw-free/cgi-bin/DW/Shop/Item.pm-340-
--
dw-free/cgi-bin/DW/Shop/Engine.pm-97-
dw-free/cgi-bin/DW/Shop/Engine.pm-98-
dw-free/cgi-bin/DW/Shop/Engine.pm-99-# called when someone wants us to try to capture the points
dw-free/cgi-bin/DW/Shop/Engine.pm:100:# FIXME: should move the 'cart' accessor and logic up to this base class ...
dw-free/cgi-bin/DW/Shop/Engine.pm-101-sub try_capture_points {
dw-free/cgi-bin/DW/Shop/Engine.pm-102-    my $self = $_[0];
dw-free/cgi-bin/DW/Shop/Engine.pm-103-
--
dw-free/cgi-bin/DW/Shop/Item/Account.pm-314-}
dw-free/cgi-bin/DW/Shop/Item/Account.pm-315-
dw-free/cgi-bin/DW/Shop/Item/Account.pm-316-# this checks whether we can downgrade the premium to paid
dw-free/cgi-bin/DW/Shop/Item/Account.pm:317:# FIXME: a better fix for this is to have an autorenewal system, and have the paid time
dw-free/cgi-bin/DW/Shop/Item/Account.pm-318-# applied to their account once their current premium time expires
dw-free/cgi-bin/DW/Shop/Item/Account.pm-319-sub allow_account_conversion {
dw-free/cgi-bin/DW/Shop/Item/Account.pm-320-    my ( $class, $u, $to ) = @_;
--
dw-free/cgi-bin/DW/Shop/Engine/PayPal.pm-234-    );
dw-free/cgi-bin/DW/Shop/Engine/PayPal.pm-235-
dw-free/cgi-bin/DW/Shop/Engine/PayPal.pm-236-    # if there's a db error above, that's very disturbing and alarming
dw-free/cgi-bin/DW/Shop/Engine/PayPal.pm:237:    # FIXME: add $eng->send_alarm or something so that we can have the Management
dw-free/cgi-bin/DW/Shop/Engine/PayPal.pm-238-    # take a stab at fixing manually in exotic cases?
dw-free/cgi-bin/DW/Shop/Engine/PayPal.pm-239-    warn "Failure to save pp_trans: " . $dbh->errstr . "\n"
dw-free/cgi-bin/DW/Shop/Engine/PayPal.pm-240-        if $dbh->err;
--
dw-free/cgi-bin/DW/Shop/Engine/PayPal.pm-385-sub process_ipn {
dw-free/cgi-bin/DW/Shop/Engine/PayPal.pm-386-    my ( $class, $form ) = @_;
dw-free/cgi-bin/DW/Shop/Engine/PayPal.pm-387-
dw-free/cgi-bin/DW/Shop/Engine/PayPal.pm:388:    # FIXME: we have to do more than just log it :-)
dw-free/cgi-bin/DW/Shop/Engine/PayPal.pm-389-    my $dbh = DW::Pay::get_db_writer()
dw-free/cgi-bin/DW/Shop/Engine/PayPal.pm-390-        or die "failed, please retry later\n";
dw-free/cgi-bin/DW/Shop/Engine/PayPal.pm-391-    $dbh->do(
--
dw-free/cgi-bin/DW/Shop/Engine/CreditCard.pm-106-    my $dbh = DW::Pay::get_db_writer()
dw-free/cgi-bin/DW/Shop/Engine/CreditCard.pm-107-        or die "Unable to get database handle.\n";
dw-free/cgi-bin/DW/Shop/Engine/CreditCard.pm-108-
dw-free/cgi-bin/DW/Shop/Engine/CreditCard.pm:109:    # FIXME: "SELECT *" is for sad making :(
dw-free/cgi-bin/DW/Shop/Engine/CreditCard.pm-110-    my $row = $dbh->selectrow_hashref( 'SELECT * FROM cc_trans WHERE cctransid = ?', undef, $cctransid );
dw-free/cgi-bin/DW/Shop/Engine/CreditCard.pm-111-    die "Database error: " . $dbh->errstr . "\n"
dw-free/cgi-bin/DW/Shop/Engine/CreditCard.pm-112-        if $dbh->err;
--
dw-free/cgi-bin/DW/User/ContentFilters/Filter.pm-93-        if $tag_mode && $tag_mode !~ /^(?:any_of|all_of|none_of)$/;
dw-free/cgi-bin/DW/User/ContentFilters/Filter.pm-94-
dw-free/cgi-bin/DW/User/ContentFilters/Filter.pm-95-    # tags
dw-free/cgi-bin/DW/User/ContentFilters/Filter.pm:96:    # FIXME: validate that the tagids are valid for this user...?
dw-free/cgi-bin/DW/User/ContentFilters/Filter.pm-97-    my $tags = delete $args{tags} || [];
dw-free/cgi-bin/DW/User/ContentFilters/Filter.pm-98-    die "tags must be an arrayref\n"
dw-free/cgi-bin/DW/User/ContentFilters/Filter.pm-99-        if ref $tags ne 'ARRAY';
--
dw-free/cgi-bin/DW/User/ContentFilters/Filter.pm-229-    # okay, we need the entry object.  a little note here, this is fairly efficient
dw-free/cgi-bin/DW/User/ContentFilters/Filter.pm-230-    # because LJ::get_log2_recent_log actually creates all of the singletons for
dw-free/cgi-bin/DW/User/ContentFilters/Filter.pm-231-    # the entries it touches.  so when we call some sort of 'load data on something'
dw-free/cgi-bin/DW/User/ContentFilters/Filter.pm:232:    # on one of the entries, then it loads on all of them.  (FIXME: verify this
dw-free/cgi-bin/DW/User/ContentFilters/Filter.pm-233-    # by watching memcache/db queries.)
dw-free/cgi-bin/DW/User/ContentFilters/Filter.pm-234-    my $entry = LJ::Entry->new_from_item_hash( $item );
dw-free/cgi-bin/DW/User/ContentFilters/Filter.pm-235-    my ( $journalu, $posteru ) = ( $entry->journal, $entry->poster );
--
dw-free/cgi-bin/DW/User/ContentFilters/Filter.pm-332-
dw-free/cgi-bin/DW/User/ContentFilters/Filter.pm-333-
dw-free/cgi-bin/DW/User/ContentFilters/Filter.pm-334-# some simple accessors... we don't really support using these as setters
dw-free/cgi-bin/DW/User/ContentFilters/Filter.pm:335:# FIXME: we should sanitize on the object creation, not in these getters,
dw-free/cgi-bin/DW/User/ContentFilters/Filter.pm-336-# ...just hacking this together right now
dw-free/cgi-bin/DW/User/ContentFilters/Filter.pm-337-sub id        { $_[0]->{id}+0           }
dw-free/cgi-bin/DW/User/ContentFilters/Filter.pm-338-sub ownerid   { $_[0]->{ownerid}+0      }
--
dw-free/cgi-bin/DW/User/ContentFilters/Filter.pm-355-    # if no argument, just bail
dw-free/cgi-bin/DW/User/ContentFilters/Filter.pm-356-    return $self->{$which} unless defined $val;
dw-free/cgi-bin/DW/User/ContentFilters/Filter.pm-357-
dw-free/cgi-bin/DW/User/ContentFilters/Filter.pm:358:    # FIXME: we should probably have generic vetters somewhere... or something, I don't know,
dw-free/cgi-bin/DW/User/ContentFilters/Filter.pm-359-    # I just know that I don't really like doing this here
dw-free/cgi-bin/DW/User/ContentFilters/Filter.pm-360-    if ( $which eq 'name' ) {
dw-free/cgi-bin/DW/User/ContentFilters/Filter.pm-361-        $val = LJ::text_trim( $val, 255, 100 ) || '';
--
dw-free/cgi-bin/DW/User/Edges/WatchTrust/UserHelper.pm-47-    # should we exclude mutual watches from 'w_rev_userids'?
dw-free/cgi-bin/DW/User/Edges/WatchTrust/UserHelper.pm-48-    $self->{mutualsep} = delete $args{mutuals_separate};
dw-free/cgi-bin/DW/User/Edges/WatchTrust/UserHelper.pm-49-
dw-free/cgi-bin/DW/User/Edges/WatchTrust/UserHelper.pm:50:    # TODO: lame that we have to pass this in, but currently
dw-free/cgi-bin/DW/User/Edges/WatchTrust/UserHelper.pm-51-    # it's not cached on the $u singleton.  in future, remove this.
dw-free/cgi-bin/DW/User/Edges/WatchTrust/UserHelper.pm-52-    # it's a hashref of { $userid => 1 }, for user's trusts
dw-free/cgi-bin/DW/User/Edges/WatchTrust/UserHelper.pm-53-    $self->{t_userids} = delete $args{t_userids} || {};
--
dw-free/cgi-bin/DW/User/ContentFilters.pm-105-sub create_content_filter {
dw-free/cgi-bin/DW/User/ContentFilters.pm-106-    my ( $u, %args ) = @_;
dw-free/cgi-bin/DW/User/ContentFilters.pm-107-
dw-free/cgi-bin/DW/User/ContentFilters.pm:108:    # FIXME: this is probably the point we should implement limits on how many
dw-free/cgi-bin/DW/User/ContentFilters.pm-109-    # filters you can create...
dw-free/cgi-bin/DW/User/ContentFilters.pm-110-
dw-free/cgi-bin/DW/User/ContentFilters.pm-111-    # check if a filter with this name already exists, if so return its id, so the user can edit or remove it
--
dw-free/cgi-bin/DW/User/Rename.pm-339-
dw-free/cgi-bin/DW/User/Rename.pm-340-    my $dbh = LJ::get_db_writer() or die "Could not get DB handle";
dw-free/cgi-bin/DW/User/Rename.pm-341-
dw-free/cgi-bin/DW/User/Rename.pm:342:    # FIXME: transactions possible?
dw-free/cgi-bin/DW/User/Rename.pm-343-    foreach my $table ( qw( user useridmap ) )
dw-free/cgi-bin/DW/User/Rename.pm-344-    {
dw-free/cgi-bin/DW/User/Rename.pm-345-        $dbh->do( "UPDATE $table SET user=? WHERE user=?", 
--
dw-free/cgi-bin/DW/User/Edges.pm-25-use strict;
dw-free/cgi-bin/DW/User/Edges.pm-26-
dw-free/cgi-bin/DW/User/Edges.pm-27-# FYI - including edges is done at the end of this file.  scroll down to the
dw-free/cgi-bin/DW/User/Edges.pm:28:# comment denoted 'XXX'.
dw-free/cgi-bin/DW/User/Edges.pm-29-
dw-free/cgi-bin/DW/User/Edges.pm-30-# overall list of edges that are valid, if it's not in this list (and not one
dw-free/cgi-bin/DW/User/Edges.pm-31-# of the special edges like 'all') then we don't know how to deal with it
--
dw-free/cgi-bin/DW/User/Edges.pm-115-            return $err->( "Edge $edge of type hashref with invalid value." )
dw-free/cgi-bin/DW/User/Edges.pm-116-                unless ref $edges->{$edge} eq 'HASH';
dw-free/cgi-bin/DW/User/Edges.pm-117-
dw-free/cgi-bin/DW/User/Edges.pm:118:## FIXME: we don't assert all of the 'required' options are passed yet
dw-free/cgi-bin/DW/User/Edges.pm-119-
dw-free/cgi-bin/DW/User/Edges.pm-120-            my $opts = $er->{options};
dw-free/cgi-bin/DW/User/Edges.pm-121-            foreach my $opt ( keys %$opts ) {
--
dw-free/cgi-bin/DW/User/Edges.pm-141-    return 1;
dw-free/cgi-bin/DW/User/Edges.pm-142-}
dw-free/cgi-bin/DW/User/Edges.pm-143-
dw-free/cgi-bin/DW/User/Edges.pm:144:# XXX: add new edge modules that are global here
dw-free/cgi-bin/DW/User/Edges.pm-145-use DW::User::Edges::WatchTrust;
dw-free/cgi-bin/DW/User/Edges.pm-146-use DW::User::Edges::CommMembership;
dw-free/cgi-bin/DW/User/Edges.pm-147-
--
dw-free/cgi-bin/DW/Setting/XPostAccounts.pm-46-    if ($getargs) {
dw-free/cgi-bin/DW/Setting/XPostAccounts.pm-47-        if ($getargs->{create}) {
dw-free/cgi-bin/DW/Setting/XPostAccounts.pm-48-            my $acct = DW::External::Account->get_external_account($u, $getargs->{create});
dw-free/cgi-bin/DW/Setting/XPostAccounts.pm:49:            # FIXME blue is temporary.  move to css.
dw-free/cgi-bin/DW/Setting/XPostAccounts.pm-50-            $ret .= "<div style='color: blue;'>" . $class->ml('setting.xpost.message.create', { username => $acct->username, servername => $acct->servername }) . "</div>";
dw-free/cgi-bin/DW/Setting/XPostAccounts.pm-51-        } elsif ($getargs->{update}) {
dw-free/cgi-bin/DW/Setting/XPostAccounts.pm-52-            my $acct = DW::External::Account->get_external_account($u, $getargs->{update});
dw-free/cgi-bin/DW/Setting/XPostAccounts.pm:53:            # FIXME blue is temporary.  move to css.
dw-free/cgi-bin/DW/Setting/XPostAccounts.pm-54-            $ret .= "<div style='color: blue;'>" . $class->ml('setting.xpost.message.update', { username => $acct->username, servername => $acct->servername }) . "</div>";
dw-free/cgi-bin/DW/Setting/XPostAccounts.pm-55-        }
dw-free/cgi-bin/DW/Setting/XPostAccounts.pm-56-    }
--
dw-free/cgi-bin/DW/Controller/Entry.pm-311-            foreach my $acct ( @accounts ) {
dw-free/cgi-bin/DW/Controller/Entry.pm-312-                my $selected;
dw-free/cgi-bin/DW/Controller/Entry.pm-313-
dw-free/cgi-bin/DW/Controller/Entry.pm:314:                # FIXME: edit, spellcheck
dw-free/cgi-bin/DW/Controller/Entry.pm-315-                $selected = $acct->xpostbydefault;
dw-free/cgi-bin/DW/Controller/Entry.pm-316-
dw-free/cgi-bin/DW/Controller/Entry.pm-317-                push @crosspost_list, {
--
dw-free/cgi-bin/DW/Controller/Entry.pm-366-
dw-free/cgi-bin/DW/Controller/Entry.pm-367-    $displaydate{trust_initial} = $form_opts->{trust_datetime_value};
dw-free/cgi-bin/DW/Controller/Entry.pm-368-
dw-free/cgi-bin/DW/Controller/Entry.pm:369:# TODO:
dw-free/cgi-bin/DW/Controller/Entry.pm-370-#             # JavaScript sets this value, so we know that the time we get is correct
dw-free/cgi-bin/DW/Controller/Entry.pm-371-#             # but always trust the time if we've been through the form already
dw-free/cgi-bin/DW/Controller/Entry.pm-372-#             my $date_diff = ($opts->{'mode'} eq "edit" || $opts->{'spellcheck_html'}) ? 1 : 0;
--
dw-free/cgi-bin/DW/Controller/Entry.pm-412-
dw-free/cgi-bin/DW/Controller/Entry.pm-413-=cut
dw-free/cgi-bin/DW/Controller/Entry.pm-414-sub edit_handler {
dw-free/cgi-bin/DW/Controller/Entry.pm:415:    # FIXME: this needs careful handling for auth, but for right now let me just skip that altogether
dw-free/cgi-bin/DW/Controller/Entry.pm-416-    return _edit(@_);
dw-free/cgi-bin/DW/Controller/Entry.pm-417-}
dw-free/cgi-bin/DW/Controller/Entry.pm-418-
dw-free/cgi-bin/DW/Controller/Entry.pm:419:# FIXME: remove
dw-free/cgi-bin/DW/Controller/Entry.pm-420-sub _edit {
dw-free/cgi-bin/DW/Controller/Entry.pm-421-    my ( $opts, $username, $ditemid ) = @_;
dw-free/cgi-bin/DW/Controller/Entry.pm-422-}
--
dw-free/cgi-bin/DW/Controller/Entry.pm-516-            if defined $post->{$formname};
dw-free/cgi-bin/DW/Controller/Entry.pm-517-    }
dw-free/cgi-bin/DW/Controller/Entry.pm-518-    $props->{opt_backdated} = $post->{entrytime_outoforder} ? 1 : 0;
dw-free/cgi-bin/DW/Controller/Entry.pm:519:    # FIXME
dw-free/cgi-bin/DW/Controller/Entry.pm-520-    $props->{opt_preformatted} = 0;
dw-free/cgi-bin/DW/Controller/Entry.pm-521-#     $req->{"prop_opt_preformatted"} ||= $POST->{'switched_rte_on'} ? 1 :
dw-free/cgi-bin/DW/Controller/Entry.pm-522-#         $POST->{event_format} && $POST->{event_format} eq "preformatted" ? 1 : 0;
dw-free/cgi-bin/DW/Controller/Entry.pm-523-
dw-free/cgi-bin/DW/Controller/Entry.pm-524-    # old implementation of comments
dw-free/cgi-bin/DW/Controller/Entry.pm:525:    # FIXME: remove this before taking the page out of beta
dw-free/cgi-bin/DW/Controller/Entry.pm-526-    $props->{opt_screening}  = $post->{opt_screening};
dw-free/cgi-bin/DW/Controller/Entry.pm-527-    $props->{opt_nocomments} = $post->{comment_settings} && $post->{comment_settings} eq "nocomments" ? 1 : 0;
dw-free/cgi-bin/DW/Controller/Entry.pm-528-    $props->{opt_noemail}    = $post->{comment_settings} && $post->{comment_settings} eq "noemail" ? 1 : 0;
--
dw-free/cgi-bin/DW/Controller/Entry.pm-759-    my ( $u, $form ) = @_;
dw-free/cgi-bin/DW/Controller/Entry.pm-760-
dw-free/cgi-bin/DW/Controller/Entry.pm-761-    return unless $u;
dw-free/cgi-bin/DW/Controller/Entry.pm:762:# FIXME:
dw-free/cgi-bin/DW/Controller/Entry.pm-763-#
dw-free/cgi-bin/DW/Controller/Entry.pm-764-#                 # persist the default value of the disable auto-formatting option
dw-free/cgi-bin/DW/Controller/Entry.pm-765-#                 $u->disable_auto_formatting( $POST{event_format} ? 1 : 0 );
--
dw-free/cgi-bin/DW/Controller/Protected.pm-39-    # using the current request url
dw-free/cgi-bin/DW/Controller/Protected.pm-40-    my $returnto = $r->note( 'returnto' ) || LJ::ehtml( $r->get_args->{returnto} );
dw-free/cgi-bin/DW/Controller/Protected.pm-41-    if ( ( ! $returnto ) && ( $r->uri ne '/protected' ) ) {
dw-free/cgi-bin/DW/Controller/Protected.pm:42:        # FIXME: Convert this to create_url
dw-free/cgi-bin/DW/Controller/Protected.pm-43-        my $host = $r->host;
dw-free/cgi-bin/DW/Controller/Protected.pm-44-        my $query_string = $r->query_string ? "?" . $r->query_string : "";
dw-free/cgi-bin/DW/Controller/Protected.pm-45-        $returnto = LJ::ehtml( "http://$host" . $r->uri . "$query_string" );
--
dw-free/cgi-bin/DW/Controller/Shop.pm-149-                    reason => $reason,
dw-free/cgi-bin/DW/Controller/Shop.pm-150-                } );
dw-free/cgi-bin/DW/Controller/Shop.pm-151-
dw-free/cgi-bin/DW/Controller/Shop.pm:152:            # FIXME: esnify the notification
dw-free/cgi-bin/DW/Controller/Shop.pm-153-            LJ::send_mail( {
dw-free/cgi-bin/DW/Controller/Shop.pm-154-                to => $u->email_raw,
dw-free/cgi-bin/DW/Controller/Shop.pm-155-                from => $LJ::ACCOUNTS_EMAIL,
--
dw-free/cgi-bin/DW/Controller/RPC/CutExpander.pm-47-        my $uid = LJ::get_userid( $args->{journal} );
dw-free/cgi-bin/DW/Controller/RPC/CutExpander.pm-48-        my $entry = $uid ? LJ::Entry->new( $uid, ditemid => $ditemid ) : undef;
dw-free/cgi-bin/DW/Controller/RPC/CutExpander.pm-49-
dw-free/cgi-bin/DW/Controller/RPC/CutExpander.pm:50:        # FIXME: This returns 200 due to old library, Make return proper when we are jQuery only.
dw-free/cgi-bin/DW/Controller/RPC/CutExpander.pm-51-        return $error_out->( 200, BML::ml( "error.nopermission" ) ) unless $entry;
dw-free/cgi-bin/DW/Controller/RPC/CutExpander.pm-52-        
dw-free/cgi-bin/DW/Controller/RPC/CutExpander.pm-53-        # make sure the user can read the entry
dw-free/cgi-bin/DW/Controller/RPC/CutExpander.pm-54-        if ( $entry->visible_to( $remote ) ) {
dw-free/cgi-bin/DW/Controller/RPC/CutExpander.pm-55-            my $text = load_cuttext( $entry, $remote, $args->{cutid} );
dw-free/cgi-bin/DW/Controller/RPC/CutExpander.pm:56:            # FIXME: temporary fix.
dw-free/cgi-bin/DW/Controller/RPC/CutExpander.pm-57-            # remove some unicode characters that could cause the returned JSON to break
dw-free/cgi-bin/DW/Controller/RPC/CutExpander.pm-58-            # like in LJ::ejs, but we don't need to escape quotes, etc (objToJson does that)
dw-free/cgi-bin/DW/Controller/RPC/CutExpander.pm-59-            $text =~ s/\xE2\x80[\xA8\xA9]//gs;
--
dw-free/cgi-bin/DW/Controller/RPC/CutExpander.pm-62-        }
dw-free/cgi-bin/DW/Controller/RPC/CutExpander.pm-63-    }
dw-free/cgi-bin/DW/Controller/RPC/CutExpander.pm-64-
dw-free/cgi-bin/DW/Controller/RPC/CutExpander.pm:65:    # FIXME: This returns 200 due to old library, Make return proper when we are jQuery only.
dw-free/cgi-bin/DW/Controller/RPC/CutExpander.pm-66-    return $error_out->( 200, BML::ml( "error.nopermission" ) );
dw-free/cgi-bin/DW/Controller/RPC/CutExpander.pm-67-}
dw-free/cgi-bin/DW/Controller/RPC/CutExpander.pm-68-
--
dw-free/cgi-bin/DW/Controller/Search/Multisearch.pm-217-
dw-free/cgi-bin/DW/Controller/Search/Multisearch.pm-218-    # Unknown type, try running site hooks
dw-free/cgi-bin/DW/Controller/Search/Multisearch.pm-219-    if ( $type ) {
dw-free/cgi-bin/DW/Controller/Search/Multisearch.pm:220:        # TODO: check return value of this hook, and fall back to another hook
dw-free/cgi-bin/DW/Controller/Search/Multisearch.pm-221-        # that shows the results here, rather than redirecting to another page
dw-free/cgi-bin/DW/Controller/Search/Multisearch.pm-222-        return LJ::Hooks::run_hook( 'multisearch_custom_search_redirect',
dw-free/cgi-bin/DW/Controller/Search/Multisearch.pm-223-                                    { type => $type, query => $q } );
--
dw-free/cgi-bin/DW/Controller/Dev.pm-132-
dw-free/cgi-bin/DW/Controller/Dev.pm-133-        return $r->OK;
dw-free/cgi-bin/DW/Controller/Dev.pm-134-    }
dw-free/cgi-bin/DW/Controller/Dev.pm:135:    # FIXME: handle post as well
dw-free/cgi-bin/DW/Controller/Dev.pm-136-}
dw-free/cgi-bin/DW/Controller/Dev.pm-137-1;
dw-free/cgi-bin/DW/Controller/Dev.pm-138-
--
dw-free/cgi-bin/DW/Controller/Media.pm-67-                $media->set_security( security => $secval, allowmask => $amask );
dw-free/cgi-bin/DW/Controller/Media.pm-68-            }
dw-free/cgi-bin/DW/Controller/Media.pm-69-        } elsif ( $post_args->{"action:delete"} ) {
dw-free/cgi-bin/DW/Controller/Media.pm:70:            # FIXME: update with more efficient mass loader
dw-free/cgi-bin/DW/Controller/Media.pm-71-            my @to_delete = $post_args->get_all( "delete" );
dw-free/cgi-bin/DW/Controller/Media.pm-72-            foreach my $id ( @to_delete ) {
dw-free/cgi-bin/DW/Controller/Media.pm:73:                # FIXME: error messages
dw-free/cgi-bin/DW/Controller/Media.pm-74-                my $mediaid = $id >> 8;
dw-free/cgi-bin/DW/Controller/Media.pm-75-                my $media = DW::Media->new( user => $rv->{u}, mediaid => $mediaid );
dw-free/cgi-bin/DW/Controller/Media.pm-76-                next unless $media;
--
dw-free/cgi-bin/DW/Controller/Media.pm-119-        unless $obj->is_active && $obj->anum == $anum && $obj->ext eq $ext;
dw-free/cgi-bin/DW/Controller/Media.pm-120-
dw-free/cgi-bin/DW/Controller/Media.pm-121-    # access control
dw-free/cgi-bin/DW/Controller/Media.pm:122:# FIXME: support viewall
dw-free/cgi-bin/DW/Controller/Media.pm-123-    return $error_out->( 403, 'Not authorized' )
dw-free/cgi-bin/DW/Controller/Media.pm-124-        unless $obj->visible_to( LJ::get_remote() );
dw-free/cgi-bin/DW/Controller/Media.pm-125-
dw-free/cgi-bin/DW/Controller/Media.pm-126-    # load the data for this object
dw-free/cgi-bin/DW/Controller/Media.pm:127:# FIXME: support X-REPROXY headers here
dw-free/cgi-bin/DW/Controller/Media.pm-128-    my $dataref = LJ::mogclient()->get_file_data( $obj->mogkey );
dw-free/cgi-bin/DW/Controller/Media.pm-129-    return $error_out->( 500, 'Unexpected internal error locating file' )
dw-free/cgi-bin/DW/Controller/Media.pm-130-        unless defined $dataref && ref $dataref eq 'SCALAR';
--
dw-free/cgi-bin/DW/Controller/Admin/ThemeMetadata.pm-84-    if ( $r->method eq 'POST' ) {
dw-free/cgi-bin/DW/Controller/Admin/ThemeMetadata.pm-85-        return $r->redirect( "/admin/themes/theme?theme=$uniq" ) unless LJ::check_form_auth( $args->{lj_form_auth} );
dw-free/cgi-bin/DW/Controller/Admin/ThemeMetadata.pm-86-
dw-free/cgi-bin/DW/Controller/Admin/ThemeMetadata.pm:87:        # FIXME: This should be in S2Themes
dw-free/cgi-bin/DW/Controller/Admin/ThemeMetadata.pm-88-        my $cats = $theme->metadata->{cats};
dw-free/cgi-bin/DW/Controller/Admin/ThemeMetadata.pm-89-        my %kwid_map = map { $_->{kwid} => $_ } values %$cats;
dw-free/cgi-bin/DW/Controller/Admin/ThemeMetadata.pm-90-        my @kwids = keys %kwid_map;
--
dw-free/cgi-bin/DW/Controller/Rename.pm-265-                from    => $token->fromuser,
dw-free/cgi-bin/DW/Controller/Rename.pm-266-                to      => $token->touser,
dw-free/cgi-bin/DW/Controller/Rename.pm-267-
dw-free/cgi-bin/DW/Controller/Rename.pm:268:                # FIXME: these should probably just be in DW::RenameToken instead
dw-free/cgi-bin/DW/Controller/Rename.pm-269-                owner   => LJ::load_userid( $token->ownerid ),
dw-free/cgi-bin/DW/Controller/Rename.pm-270-                target  => LJ::load_userid( $token->renuserid ),
dw-free/cgi-bin/DW/Controller/Rename.pm-271-                date    => LJ::mysql_time( $token->rendate ),
--
dw-free/cgi-bin/DW/Controller/Admin.pm-285-}
dw-free/cgi-bin/DW/Controller/Admin.pm-286-
dw-free/cgi-bin/DW/Controller/Admin.pm-287-# DO NOT USE OUTSIDE THIS FILE!
dw-free/cgi-bin/DW/Controller/Admin.pm:288:# FIXME: Remove once the big scary array up above is gone!
dw-free/cgi-bin/DW/Controller/Admin.pm-289-sub _register_admin_pages_legacy {
dw-free/cgi-bin/DW/Controller/Admin.pm-290-    my ( $class, $scope, @pages ) = @_;
dw-free/cgi-bin/DW/Controller/Admin.pm-291-
--
dw-free/cgi-bin/DW/Controller/Interface/AtomAPI.pm-198-
dw-free/cgi-bin/DW/Controller/Interface/AtomAPI.pm-199-    my $r = DW::Request->get;
dw-free/cgi-bin/DW/Controller/Interface/AtomAPI.pm-200-
dw-free/cgi-bin/DW/Controller/Interface/AtomAPI.pm:201:    # FIXME: use XML::Atom::Service?
dw-free/cgi-bin/DW/Controller/Interface/AtomAPI.pm-202-    my $ret = qq{<?xml version="1.0"?>};
dw-free/cgi-bin/DW/Controller/Interface/AtomAPI.pm-203-    $ret .= qq{<service xmlns="http://www.w3.org/2007/app" xmlns:atom="http://www.w3.org/2005/Atom">};
dw-free/cgi-bin/DW/Controller/Interface/AtomAPI.pm-204-
--
dw-free/cgi-bin/DW/Controller/Interface/AtomAPI.pm-292-    # post to the protocol
dw-free/cgi-bin/DW/Controller/Interface/AtomAPI.pm-293-    # we ignore some things provided by the user,
dw-free/cgi-bin/DW/Controller/Interface/AtomAPI.pm-294-    # such as the entry id, and the update time
dw-free/cgi-bin/DW/Controller/Interface/AtomAPI.pm:295:    # FIXME: use an XML::Atom extension to add security options
dw-free/cgi-bin/DW/Controller/Interface/AtomAPI.pm-296-    my $req = {
dw-free/cgi-bin/DW/Controller/Interface/AtomAPI.pm-297-        ver         => 1,
dw-free/cgi-bin/DW/Controller/Interface/AtomAPI.pm-298-        username    => $remote->user,
--
dw-free/cgi-bin/DW/Controller/SiteStats.pm-210-
dw-free/cgi-bin/DW/Controller/SiteStats.pm-211-<<COMMENT;
dw-free/cgi-bin/DW/Controller/SiteStats.pm-212-
dw-free/cgi-bin/DW/Controller/SiteStats.pm:213:FIXME: remove this when you have implemented them all
dw-free/cgi-bin/DW/Controller/SiteStats.pm-214-
dw-free/cgi-bin/DW/Controller/SiteStats.pm-215-* Number of accounts, total (done)
dw-free/cgi-bin/DW/Controller/SiteStats.pm-216-* Number of accounts active (done)
--
dw-free/cgi-bin/DW/Panel.pm-49-
dw-free/cgi-bin/DW/Panel.pm-50-    my $ret = fields::new( $class );
dw-free/cgi-bin/DW/Panel.pm-51-
dw-free/cgi-bin/DW/Panel.pm:52:    # TODO: store/retrieve user settings from database
dw-free/cgi-bin/DW/Panel.pm-53-    # possible settings: display or not, position, possibly per-widget config
dw-free/cgi-bin/DW/Panel.pm-54-    $ret->{primary} = [
dw-free/cgi-bin/DW/Panel.pm-55-        "DW::Widget::LatestNews",
--
dw-free/cgi-bin/DW/Panel.pm-114-    return "" unless $widget_body;
dw-free/cgi-bin/DW/Panel.pm-115-
dw-free/cgi-bin/DW/Panel.pm-116-    my $css_subclass = lc $widget->subclass;
dw-free/cgi-bin/DW/Panel.pm:117:    # TODO: this can contain the non-js controls to enable customization of display
dw-free/cgi-bin/DW/Panel.pm-118-    return "<div class='panel' id='panel-$css_subclass' >$widget_body</div>";
dw-free/cgi-bin/DW/Panel.pm-119-}
dw-free/cgi-bin/DW/Panel.pm-120-
--
dw-free/cgi-bin/Apache/LiveJournal.pm-466-    }
dw-free/cgi-bin/Apache/LiveJournal.pm-467-
dw-free/cgi-bin/Apache/LiveJournal.pm-468-    # see if we should setup a minimal scheme based on the initial part of the
dw-free/cgi-bin/Apache/LiveJournal.pm:469:    # user-agent string; FIXME: maybe this should do more than just look at the
dw-free/cgi-bin/Apache/LiveJournal.pm-470-    # initial letters?
dw-free/cgi-bin/Apache/LiveJournal.pm-471-    if (my $ua = $r->headers_in->{'User-Agent'}) {
dw-free/cgi-bin/Apache/LiveJournal.pm-472-        if (($ua =~ /^([a-z]+)/i) && $LJ::MINIMAL_USERAGENT{$1}) {
--
dw-free/cgi-bin/Apache/LiveJournal.pm-946-
dw-free/cgi-bin/Apache/LiveJournal.pm-947-        # need to redirect them to canonical version
dw-free/cgi-bin/Apache/LiveJournal.pm-948-        if ($LJ::ONLY_USER_VHOSTS && ! $LJ::DEBUG{'user_vhosts_no_old_redirect'}) {
dw-free/cgi-bin/Apache/LiveJournal.pm:949:            # FIXME: skip two redirects and send them right to __setdomsess with the right
dw-free/cgi-bin/Apache/LiveJournal.pm-950-            #        cookie-to-be-set arguments.  below is the easy/slow route.
dw-free/cgi-bin/Apache/LiveJournal.pm-951-            my $u = LJ::load_user($cuser)
dw-free/cgi-bin/Apache/LiveJournal.pm-952-                or return 404;
--
dw-free/cgi-bin/Apache/LiveJournal.pm-1023-        my $host = $r->headers_in->{"Host"};
dw-free/cgi-bin/Apache/LiveJournal.pm-1024-        unless (    $LJ::USERPIC_ROOT =~ m!^http://\Q$host\E!i
dw-free/cgi-bin/Apache/LiveJournal.pm-1025-                    || $LJ::USERPIC_ROOT_CDN && $LJ::USERPIC_ROOT_CDN =~ m!^http://\Q$host\E!i
dw-free/cgi-bin/Apache/LiveJournal.pm:1026:                    || $host eq '127.0.0.1' # FIXME: lame hack for DW config
dw-free/cgi-bin/Apache/LiveJournal.pm-1027-        ) {
dw-free/cgi-bin/Apache/LiveJournal.pm-1028-            return redir($r, "$LJ::USERPIC_ROOT/$picid/$userid");
dw-free/cgi-bin/Apache/LiveJournal.pm-1029-        }
--
dw-free/cgi-bin/Apache/LiveJournal.pm-1639-
dw-free/cgi-bin/Apache/LiveJournal.pm-1640-sub db_logger
dw-free/cgi-bin/Apache/LiveJournal.pm-1641-{
dw-free/cgi-bin/Apache/LiveJournal.pm:1642:    # FIXME: ModPerl 2.0: how to get last item, bucket brigade? ->last here bad
dw-free/cgi-bin/Apache/LiveJournal.pm-1643-    return;
dw-free/cgi-bin/Apache/LiveJournal.pm-1644-
dw-free/cgi-bin/Apache/LiveJournal.pm-1645-    my $r = shift;
--
dw-free/cgi-bin/Apache/BML.pm-104-    my $file = Apache::BML::decide_file_and_stat($r);
dw-free/cgi-bin/Apache/BML.pm-105-
dw-free/cgi-bin/Apache/BML.pm-106-    # $file was stat'd by decide_file_and_stat above, so use '_'
dw-free/cgi-bin/Apache/BML.pm:107:    # FIXME: ModPerl: this is not true in ModPerl 2.0, so we are using $file.
dw-free/cgi-bin/Apache/BML.pm-108-    unless (-e $file) {
dw-free/cgi-bin/Apache/BML.pm-109-        $r->log_error("File does not exist: $file");
dw-free/cgi-bin/Apache/BML.pm-110-        return NOT_FOUND;
--
dw-free/cgi-bin/Apache/BML.pm-437-        }
dw-free/cgi-bin/Apache/BML.pm-438-        $r->headers_out->{'Content-length'} = $length;
dw-free/cgi-bin/Apache/BML.pm-439-
dw-free/cgi-bin/Apache/BML.pm:440:        # FIXME: removed in ModPerl 2.0 is that okay?  replacement function?
dw-free/cgi-bin/Apache/BML.pm-441-        #$r->send_http_header();
dw-free/cgi-bin/Apache/BML.pm-442-    }
dw-free/cgi-bin/Apache/BML.pm-443-
--
dw-free/cgi-bin/Apache/BML.pm-499-    my $err = shift;
dw-free/cgi-bin/Apache/BML.pm-500-
dw-free/cgi-bin/Apache/BML.pm-501-    $r->content_type("text/html");
dw-free/cgi-bin/Apache/BML.pm:502:    # FIXME: ModPerl: doesn't seem to be used/required anymore
dw-free/cgi-bin/Apache/BML.pm-503-    #$r->send_http_header();
dw-free/cgi-bin/Apache/BML.pm-504-    $r->print($err);
dw-free/cgi-bin/Apache/BML.pm-505-
dw-free/cgi-bin/Apache/BML.pm:506:    return OK;  # TODO: something else?
dw-free/cgi-bin/Apache/BML.pm-507-}
dw-free/cgi-bin/Apache/BML.pm-508-
dw-free/cgi-bin/Apache/BML.pm-509-sub file_dontcheck
--
dw-free/cgi-bin/Apache/BML.pm-697-    my $env = $req->{'env'};
dw-free/cgi-bin/Apache/BML.pm-698-
dw-free/cgi-bin/Apache/BML.pm-699-    # Bail out if we're over 200 frames deep
dw-free/cgi-bin/Apache/BML.pm:700:    # :TODO: Make the max depth configurable?
dw-free/cgi-bin/Apache/BML.pm-701-    if ( @{$req->{BlockStack}} > 200 ) {
dw-free/cgi-bin/Apache/BML.pm-702-        my $stackSlice = join " -> ", @{$req->{BlockStack}}[0..10];
dw-free/cgi-bin/Apache/BML.pm-703-        return "<b>[Error: Too deep recursion: $stackSlice]</b>";
--
dw-free/cgi-bin/Apache/BML.pm-1287-
dw-free/cgi-bin/Apache/BML.pm-1288-sub parse_inputs {
dw-free/cgi-bin/Apache/BML.pm-1289-    # only run once
dw-free/cgi-bin/Apache/BML.pm:1290:    # FIXME: ModPerl 2.0: make sure this only runs once or this will be buggy as hell
dw-free/cgi-bin/Apache/BML.pm-1291-
dw-free/cgi-bin/Apache/BML.pm-1292-    # we expect as input a typical request object, we will upgrade it to a proper
dw-free/cgi-bin/Apache/BML.pm-1293-    # request object
--
dw-free/cgi-bin/Apache/BML.pm-1539-    return 1;
dw-free/cgi-bin/Apache/BML.pm-1540-}
dw-free/cgi-bin/Apache/BML.pm-1541-
dw-free/cgi-bin/Apache/BML.pm:1542:# FIXME: document the hooks
dw-free/cgi-bin/Apache/BML.pm-1543-sub parse_multipart_interactive {
dw-free/cgi-bin/Apache/BML.pm-1544-    my ($errref, $hooks) = @_;
dw-free/cgi-bin/Apache/BML.pm-1545-    my $r = $Apache::BML::r;
--
dw-free/cgi-bin/Apache/BML.pm-1846-    $Apache::BML::conf_pl->{"HOOK-$name"} = $code;
dw-free/cgi-bin/Apache/BML.pm-1847-}
dw-free/cgi-bin/Apache/BML.pm-1848-
dw-free/cgi-bin/Apache/BML.pm:1849:# FIXME: these became necessary with ModPerl 2.0, but it would be great if we could
dw-free/cgi-bin/Apache/BML.pm-1850-# review this change and ensure that this is what we want to be doing here...  i.e., if
dw-free/cgi-bin/Apache/BML.pm-1851-# we haven't defined these yet, then we should define them here?  confused.
dw-free/cgi-bin/Apache/BML.pm-1852-sub get_GET {
--
dw-free/cgi-bin/DW.pm-32-
dw-free/cgi-bin/DW.pm-33-=cut
dw-free/cgi-bin/DW.pm-34-
dw-free/cgi-bin/DW.pm:35:# FIXME the plan is that at one point we will use File::ShareDir->dist_dir('DW')
dw-free/cgi-bin/DW.pm-36-# or some similar way to return the home directory
dw-free/cgi-bin/DW.pm-37-# See also http://bugs.dwscoalition.org/show_bug.cgi?id=1760
dw-free/cgi-bin/DW.pm-38-sub home {
--
dw-free/cgi-bin/JSON.pm-472-
dw-free/cgi-bin/JSON.pm-473-C<objToJson>, C<jsonToObj>.
dw-free/cgi-bin/JSON.pm-474-
dw-free/cgi-bin/JSON.pm:475:=head1 TODO
dw-free/cgi-bin/JSON.pm-476-
dw-free/cgi-bin/JSON.pm-477-C<JSONRPC::Transport::HTTP::Daemon> in L<JSON> 1.00
dw-free/cgi-bin/JSON.pm-478-(The code has be actually written in JSONRPC::Transport::HTTP.)
--
dw-free/bin/moveucluster.pl-881-                # so we'll try as big as possible.  but not with myisam -- need to start
dw-free/bin/moveucluster.pl-882-                # small there too, unless we have a guess at the number of rows remaining.
dw-free/bin/moveucluster.pl-883-
dw-free/bin/moveucluster.pl:884:                my $src_is_innodb = 0;  # FIXME: detect this.  but first verify HANDLER differences.
dw-free/bin/moveucluster.pl-885-                if ($src_is_innodb) {
dw-free/bin/moveucluster.pl-886-                    $batch_size = $max_batch;
dw-free/bin/moveucluster.pl-887-                } else {
--
dw-free/bin/ljubackup.pl-686-                }
dw-free/bin/ljubackup.pl-687-
dw-free/bin/ljubackup.pl-688-                # Mark the user as "in progress" by setting the destination
dw-free/bin/ljubackup.pl:689:                # cluster field. :FIXME: This is obviously stupid to disconnect
dw-free/bin/ljubackup.pl-690-                # and reconnect every time, but since the handle is b0rked after
dw-free/bin/ljubackup.pl-691-                # the ->run() below fork()s, this is necessary for it to work.
dw-free/bin/ljubackup.pl-692-
dw-free/bin/ljubackup.pl:693:                # :FIXME: Is this necessary? We obviously don't have a
dw-free/bin/ljubackup.pl-694-                # destination cluster...
dw-free/bin/ljubackup.pl-695-
dw-free/bin/ljubackup.pl-696-                #LJ::DB::disconnect_dbs();
--
dw-free/bin/ljubackup.pl-823-		$user,		# User object iterator
dw-free/bin/ljubackup.pl-824-       );
dw-free/bin/ljubackup.pl-825-
dw-free/bin/ljubackup.pl:826:    # :FIXME: This is the only way I can make this query work. If I don't do
dw-free/bin/ljubackup.pl-827-    # this, I get "MySQL has gone away" on the second query, despite calling
dw-free/bin/ljubackup.pl-828-    # disconnect_dbs() in the thread's start() method immediately after the
dw-free/bin/ljubackup.pl-829-    # fork(), too. Perhaps I'll revisit this after hacking on DBI::Role for a
--
dw-free/bin/deleteusers.pl-42-    if (time() - $lastbreak > 3) { print "pause.\n"; sleep(1); $lastbreak = time(); }
dw-free/bin/deleteusers.pl-43-};
dw-free/bin/deleteusers.pl-44-
dw-free/bin/deleteusers.pl:45:# FIXME: This will soon need to be changed to use methods of the $u
dw-free/bin/deleteusers.pl-46-#    object rather than global LJ:: functions, but this should work
dw-free/bin/deleteusers.pl-47-#    for now.
dw-free/bin/deleteusers.pl-48-
--
dw-free/bin/worker/subscribe-hubbub-78-            'hub.topic'         => $topicurl,
dw-free/bin/worker/subscribe-hubbub-79-            'hub.verify'        => 'async',
dw-free/bin/worker/subscribe-hubbub-80-            'hub.lease_seconds' => 86400 * 30,  # 30 days.  we assume we care for a while.
dw-free/bin/worker/subscribe-hubbub:81:#            'hub.secret' FIXME: implement, this is part of PSHB 0.2
dw-free/bin/worker/subscribe-hubbub-82-            'hub.verify_token'  => $verifytoken,
dw-free/bin/worker/subscribe-hubbub-83-        } );
dw-free/bin/worker/subscribe-hubbub-84-
--
dw-free/bin/worker/subscribe-hubbub-96-    # time we see a feed reference a (userid, huburl, topicurl) combination.  if one of those
dw-free/bin/worker/subscribe-hubbub-97-    # stops getting referenced for some period of time (24 hours?) then we should consider
dw-free/bin/worker/subscribe-hubbub-98-    # that subscription to be invalid.  (and in fact, we should unsubscribe.)
dw-free/bin/worker/subscribe-hubbub:99:    # FIXME: implement this ;)
dw-free/bin/worker/subscribe-hubbub-100-}
dw-free/bin/worker/subscribe-hubbub-101-
dw-free/bin/worker/subscribe-hubbub-102-
--
dw-free/bin/worker/sphinx-search-gm-122-            push @out, $match;
dw-free/bin/worker/sphinx-search-gm-123-        }
dw-free/bin/worker/sphinx-search-gm-124-
dw-free/bin/worker/sphinx-search-gm:125:        # FIXME: this should use some other index name than 'test1' heh, and we should probably
dw-free/bin/worker/sphinx-search-gm-126-        # try to figure out the language of the journal being searched (or the searcher?) and use
dw-free/bin/worker/sphinx-search-gm-127-        # an appropriate stemming library?  (future expansion opportunity)
dw-free/bin/worker/sphinx-search-gm-128-        my $exc = $sx->BuildExcerpts( [ map { $_->{entry} } @out ], 'dw1stemmed', $query, {} ) || [];
--
dw-free/bin/worker/incoming-email-330-    );
dw-free/bin/worker/incoming-email-331-
dw-free/bin/worker/incoming-email-332-    if (@errors) {
dw-free/bin/worker/incoming-email:333:        # FIXME: detect trasient vs. permanent errors (changes to
dw-free/bin/worker/incoming-email-334-        # file_request above, probably) and either dequeue or try
dw-free/bin/worker/incoming-email-335-        # later
dw-free/bin/worker/incoming-email-336-        return dequeue("Support errors: @errors");
--
dw-free/bin/worker/import-scheduler-100-        } @$statusrows
dw-free/bin/worker/import-scheduler-101-    );
dw-free/bin/worker/import-scheduler-102-
dw-free/bin/worker/import-scheduler:103:# FIXME: handle the case where the user already has an import_job going and it's
dw-free/bin/worker/import-scheduler-104-# different from the current import_data_id that we are trying to import for.
dw-free/bin/worker/import-scheduler-105-# if we don't handle this case, we're going to get pretty confused about what
dw-free/bin/worker/import-scheduler-106-# to update later...
--
dw-free/bin/ljdb-88-$role ||= "master";
dw-free/bin/ljdb-89-
dw-free/bin/ljdb-90-# find a database (not necessarily an alive one) that matches the role
dw-free/bin/ljdb:91:# you need.  FIXME: capture mysql's output and try and reconnect to
dw-free/bin/ljdb-92-# another one if it fails?
dw-free/bin/ljdb-93-
dw-free/bin/ljdb-94-my $db;
--
dw-free/bin/moveuclusterd.pl-1058-    my JobServer $self = shift;
dw-free/bin/moveuclusterd.pl-1059-    my $agent = shift;
dw-free/bin/moveuclusterd.pl-1060-
dw-free/bin/moveuclusterd.pl:1061:    # Stop incoming connections (:TODO: remove it from Danga::Socket?)
dw-free/bin/moveuclusterd.pl-1062-    $self->{listener}->close;
dw-free/bin/moveuclusterd.pl-1063-
dw-free/bin/moveuclusterd.pl-1064-    # Clear jobs so no more get handed out while clients are closing
--
dw-free/bin/moveuclusterd.pl-1875-    # command is assumed by the help system to be standalone and take no arguments.
dw-free/bin/moveuclusterd.pl-1876-    %CommandTable = (
dw-free/bin/moveuclusterd.pl-1877-
dw-free/bin/moveuclusterd.pl:1878:        # :TODO: Implement a 'desc' or 'longhelp' or something to augment the
dw-free/bin/moveuclusterd.pl-1879-        # per-command help.
dw-free/bin/moveuclusterd.pl-1880-
dw-free/bin/moveuclusterd.pl-1881-        get_job  => {
--
dw-free/bin/ljumover.pl-876-                }
dw-free/bin/ljumover.pl-877-
dw-free/bin/ljumover.pl-878-                # Mark the user as "in progress" by setting the destination
dw-free/bin/ljumover.pl:879:                # cluster field. :FIXME: This is obviously stupid to disconnect
dw-free/bin/ljumover.pl-880-                # and reconnect every time, but since the handle is b0rked after
dw-free/bin/ljumover.pl-881-                # the ->run() below fork()s, this is necessary for it to work.
dw-free/bin/ljumover.pl-882-                LJ::DB::disconnect_dbs();
--
dw-free/bin/ljumover.pl-1023-        @users,     # User rows
dw-free/bin/ljumover.pl-1024-       );
dw-free/bin/ljumover.pl-1025-
dw-free/bin/ljumover.pl:1026:    # :FIXME: This is the only way I can make this query work. If I don't do
dw-free/bin/ljumover.pl-1027-    # this, I get "MySQL has gone away" on the second query, despite calling
dw-free/bin/ljumover.pl-1028-    # disconnect_dbs() in the thread's start() method immediately after the
dw-free/bin/ljumover.pl-1029-    # fork(), too. Perhaps I'll revisit this after hacking on DBI::Role for a
--
dw-free/bin/upgrading/s2layers/zesty/layout.s2-2131-#      #                                          #
dw-free/bin/upgrading/s2layers/zesty/layout.s2-2132-###################################################
dw-free/bin/upgrading/s2layers/zesty/layout.s2-2133-
dw-free/bin/upgrading/s2layers/zesty/layout.s2:2134:# TODO: this is broken in the core.
dw-free/bin/upgrading/s2layers/zesty/layout.s2-2135-# Waiting on http://rt.livejournal.org/Ticket/Display.html?id=1266 .
dw-free/bin/upgrading/s2layers/zesty/layout.s2-2136-#
dw-free/bin/upgrading/s2layers/zesty/layout.s2-2137-function EntryPage::lay_comment_poster_is_suspended(Comment c) : bool {
--
dw-free/bin/upgrading/s2layers/database/layout.s2-347-    var string display_type = ($*userlite_interaction_links == "text") ? " text-links" : " icon-links";
dw-free/bin/upgrading/s2layers/database/layout.s2-348-
dw-free/bin/upgrading/s2layers/database/layout.s2-349-    """<ul class="userlite-interaction-links$display_type">""";
dw-free/bin/upgrading/s2layers/database/layout.s2:350:    # FIXME: HTML is not valid if there are no items inside a list, so there should be a
dw-free/bin/upgrading/s2layers/database/layout.s2-351-    # check that there are user interaction links before opening the ul class.
dw-free/bin/upgrading/s2layers/database/layout.s2-352-    var Link link;
dw-free/bin/upgrading/s2layers/database/layout.s2-353-    var string icon_url;
--
dw-free/bin/upgrading/s2layers/database/layout.s2-543-        "edit_comment" => $*image_edit,
dw-free/bin/upgrading/s2layers/database/layout.s2-544-    };
dw-free/bin/upgrading/s2layers/database/layout.s2-545-
dw-free/bin/upgrading/s2layers/database/layout.s2:546:    # FIXME: HTML is not valid if there are no items inside a list, so there should
dw-free/bin/upgrading/s2layers/database/layout.s2-547-    # be a check that there are comment management links before opening the ul class.
dw-free/bin/upgrading/s2layers/database/layout.s2-548-
dw-free/bin/upgrading/s2layers/database/layout.s2-549-    var string display_type = ($*comment_management_links == "text") ? " text-links" : " icon-links";
--
dw-free/bin/upgrading/s2layers/core2.s2-1145-## Basic options
dw-free/bin/upgrading/s2layers/core2.s2-1146-##=======================================
dw-free/bin/upgrading/s2layers/core2.s2-1147-
dw-free/bin/upgrading/s2layers/core2.s2:1148:# FIXME: Not sure if none is a sensible value, but need something appropriate as a default for designers who are not using this option.
dw-free/bin/upgrading/s2layers/core2.s2-1149-# In order to use layout_type on /customize/ in official layouts, the associated S2Theme file needs to be edited, and then changing the layout type will select a different wizard-layer.  Non-official layouts can use this property on the /customize/options.bml page.  Both methods will add the layout_type to <body> in the Page::print-wrapper to allow CSS to be written accordingly.
dw-free/bin/upgrading/s2layers/core2.s2-1150-
dw-free/bin/upgrading/s2layers/core2.s2-1151-property string layout_type {
--
dw-free/bin/upgrading/s2layers/core2.s2-1732-    grouped = 1;
dw-free/bin/upgrading/s2layers/core2.s2-1733-    allow_other = 1;
dw-free/bin/upgrading/s2layers/core2.s2-1734-}
dw-free/bin/upgrading/s2layers/core2.s2:1735:# FIXME: This should be grouped, but then it doesn't get a label.
dw-free/bin/upgrading/s2layers/core2.s2-1736-property int image_background_header_height {
dw-free/bin/upgrading/s2layers/core2.s2-1737-    des = "The height of your header, in pixels.  Use 0 for default.";
dw-free/bin/upgrading/s2layers/core2.s2-1738-    example = "50";
--
dw-free/bin/upgrading/s2layers/core2.s2-3351-    var string display_type = ($*userlite_interaction_links == "text") ? " text-links" : " icon-links";
dw-free/bin/upgrading/s2layers/core2.s2-3352-
dw-free/bin/upgrading/s2layers/core2.s2-3353-    """<ul class="userlite-interaction-links$display_type">""";
dw-free/bin/upgrading/s2layers/core2.s2:3354:    # FIXME: HTML is not valid if there are no items inside a list, so there should be a
dw-free/bin/upgrading/s2layers/core2.s2-3355-    # check that there are user interaction links before opening the ul class.
dw-free/bin/upgrading/s2layers/core2.s2-3356-    var Link link;
dw-free/bin/upgrading/s2layers/core2.s2-3357-    var int count;
--
dw-free/bin/upgrading/s2layers/core2.s2-4795-function EntryLite::print_wrapper_start() {
dw-free/bin/upgrading/s2layers/core2.s2-4796-}
dw-free/bin/upgrading/s2layers/core2.s2-4797-function Entry::print_wrapper_start() {
dw-free/bin/upgrading/s2layers/core2.s2:4798:# FIXME: need to ensure that calling the alternate function doesn't interfere with the printing of comments or the printing of module groups.
dw-free/bin/upgrading/s2layers/core2.s2-4799-    var Page p = get_page();
dw-free/bin/upgrading/s2layers/core2.s2-4800-    var string alternate = alternate ("entry-wrapper-odd", "entry-wrapper-even");
dw-free/bin/upgrading/s2layers/core2.s2-4801-    var string security = $this.security ? $this.security : "public";
--
dw-free/bin/upgrading/s2layers/core2.s2-4957-
dw-free/bin/upgrading/s2layers/core2.s2-4958-    var string display_type = ($*comment_management_links == "text") ? " text-links" : " icon-links";
dw-free/bin/upgrading/s2layers/core2.s2-4959-
dw-free/bin/upgrading/s2layers/core2.s2:4960:    # FIXME: HTML is not valid if there are no items inside a list, so there should
dw-free/bin/upgrading/s2layers/core2.s2-4961-    # be a check that there are comment management links before opening the ul class.
dw-free/bin/upgrading/s2layers/core2.s2-4962-    """<ul class="comment-management-links$display_type">""";
dw-free/bin/upgrading/s2layers/core2.s2-4963-    var Link link;
--
dw-free/bin/upgrading/s2layers/strata/layout.s2-5-layerinfo lang = "en";
dw-free/bin/upgrading/s2layers/strata/layout.s2-6-
dw-free/bin/upgrading/s2layers/strata/layout.s2-7-set layout_authors = [ { "name" => "yati", "type" => "user" }];
dw-free/bin/upgrading/s2layers/strata/layout.s2:8:set use_journalstyle_icons_page = true; #FIXME: REMOVE THIS LINE BEFORE COMMIT
dw-free/bin/upgrading/s2layers/strata/layout.s2-9-
dw-free/bin/upgrading/s2layers/strata/layout.s2-10-set layout_type = "two-columns-right";
dw-free/bin/upgrading/s2layers/strata/layout.s2-11-set sidebar_width = "15em";
--
dw-free/bin/upgrading/gen-secrets.pl-90-
dw-free/bin/upgrading/gen-secrets.pl-91-foreach my $secret ( sort keys %sec_out ) {
dw-free/bin/upgrading/gen-secrets.pl-92-    my $value = $sec_out{$secret};
dw-free/bin/upgrading/gen-secrets.pl:93:    # FIXME: There has to be a better way to do this.
dw-free/bin/upgrading/gen-secrets.pl-94-    $value =~ s/\\/\\\\/g;
dw-free/bin/upgrading/gen-secrets.pl-95-    $value =~ s/'/\\'/g;
dw-free/bin/upgrading/gen-secrets.pl-96-
--
dw-free/bin/upgrading/update-db-general.pl-392-    insert_time INT UNSIGNED NOT NULL,
dw-free/bin/upgrading/update-db-general.pl-393-    value INT UNSIGNED NOT NULL,
dw-free/bin/upgrading/update-db-general.pl-394-
dw-free/bin/upgrading/update-db-general.pl:395:    -- FIXME: This is good for retrieving data for a single category+key, but
dw-free/bin/upgrading/update-db-general.pl-396-    -- maybe not as good if we want all keys for the category, with a limit on
dw-free/bin/upgrading/update-db-general.pl-397-    -- time (ie, last 5 entries, or last 2 weeks). Do we need an extra index?
dw-free/bin/upgrading/update-db-general.pl-398-    INDEX (category_id, key_id, insert_time)
--
dw-free/bin/upgrading/update-db-general.pl-1925-)
dw-free/bin/upgrading/update-db-general.pl-1926-EOC
dw-free/bin/upgrading/update-db-general.pl-1927-
dw-free/bin/upgrading/update-db-general.pl:1928:# TODO: why is this myisam?
dw-free/bin/upgrading/update-db-general.pl-1929-register_tablecreate("recentactions", <<'EOC');
dw-free/bin/upgrading/update-db-general.pl-1930-CREATE TABLE recentactions (
dw-free/bin/upgrading/update-db-general.pl-1931-    what CHAR(2) NOT NULL
--
dw-free/bin/upgrading/update-db-general.pl-3131-)
dw-free/bin/upgrading/update-db-general.pl-3132-EOC
dw-free/bin/upgrading/update-db-general.pl-3133-
dw-free/bin/upgrading/update-db-general.pl:3134:# FIXME: add alt text, etc. mediaprops?
dw-free/bin/upgrading/update-db-general.pl-3135-register_tablecreate("media", <<'EOC');
dw-free/bin/upgrading/update-db-general.pl-3136-CREATE TABLE `media` (
dw-free/bin/upgrading/update-db-general.pl-3137-  `userid` int(10) unsigned NOT NULL,
--
dw-free/bin/upgrading/update-db-general.pl-3165-)
dw-free/bin/upgrading/update-db-general.pl-3166-EOC
dw-free/bin/upgrading/update-db-general.pl-3167-
dw-free/bin/upgrading/update-db-general.pl:3168:# FIXME: the indexes here are totally whack
dw-free/bin/upgrading/update-db-general.pl-3169-register_tablecreate("collection_items", <<'EOC');
dw-free/bin/upgrading/update-db-general.pl-3170-CREATE TABLE `collection_items` (
dw-free/bin/upgrading/update-db-general.pl-3171-  `userid` int(10) unsigned NOT NULL,
--
dw-free/bin/upgrading/update-db-general.pl-3493-                 "exptype ENUM('short', 'long', 'once') NOT NULL");
dw-free/bin/upgrading/update-db-general.pl-3494-    }
dw-free/bin/upgrading/update-db-general.pl-3495-
dw-free/bin/upgrading/update-db-general.pl:3496:    # TODO: fix initial definition to match this, make table innodb
dw-free/bin/upgrading/update-db-general.pl-3497-    if (column_type("ml_items", "itid") =~ /auto_increment/) {
dw-free/bin/upgrading/update-db-general.pl-3498-        do_alter("ml_items",
dw-free/bin/upgrading/update-db-general.pl-3499-                 "ALTER TABLE ml_items MODIFY COLUMN " .
dw-free/bin/upgrading/update-db-general.pl-3500-                 "itid MEDIUMINT UNSIGNED NOT NULL DEFAULT 0");
dw-free/bin/upgrading/update-db-general.pl-3501-    }
dw-free/bin/upgrading/update-db-general.pl-3502-
dw-free/bin/upgrading/update-db-general.pl:3503:    # TODO: fix initial definition to match this, make table innodb
dw-free/bin/upgrading/update-db-general.pl-3504-    if (column_type("ml_text", "txtid") =~ /auto_increment/) {
dw-free/bin/upgrading/update-db-general.pl-3505-        do_alter("ml_text",
dw-free/bin/upgrading/update-db-general.pl-3506-                 "ALTER TABLE ml_text MODIFY COLUMN " .
--
dw-free/bin/upgrading/texttool.pl-496-    $out->('-', "Done.");
dw-free/bin/upgrading/texttool.pl-497-}
dw-free/bin/upgrading/texttool.pl-498-
dw-free/bin/upgrading/texttool.pl:499:# TODO: use LJ::LangDatFile->save
dw-free/bin/upgrading/texttool.pl-500-sub dumptext {
dw-free/bin/upgrading/texttool.pl-501-    my $to_cvs = shift;
dw-free/bin/upgrading/texttool.pl-502-    my $append = shift;
--
dw-free/bin/ljblockwatcher.pl-79-
dw-free/bin/ljblockwatcher.pl-80-=cut
dw-free/bin/ljblockwatcher.pl-81-
dw-free/bin/ljblockwatcher.pl:82:# :TODO: Change param order in received msgs
dw-free/bin/ljblockwatcher.pl-83-
dw-free/bin/ljblockwatcher.pl-84-##############################################################################
dw-free/bin/ljblockwatcher.pl-85-package dbreportd;
--
dw-free/bin/dbcheck.pl-174-            if ($ss->{'master_log_file'} eq $ss->{'relay_master_log_file'}) {
dw-free/bin/dbcheck.pl-175-                $diff = $ss->{'read_master_log_pos'} - $ss->{'exec_master_log_pos'};
dw-free/bin/dbcheck.pl-176-            } else {
dw-free/bin/dbcheck.pl:177:                $diff = "XXXXXXX";
dw-free/bin/dbcheck.pl-178-                push @errors, "Wrong log file: $d->{name}";
dw-free/bin/dbcheck.pl-179-            }
dw-free/bin/dbcheck.pl-180-        } else {
dw-free/bin/dbcheck.pl:181:            $diff = "XXXXXXX";
dw-free/bin/dbcheck.pl-182-            $ss->{last_error} =~ s/[^\n\r\t\x20-\x7e]//g;
dw-free/bin/dbcheck.pl-183-            push @errors, "Slave not running: $d->{name}: $ss->{last_error}";
dw-free/bin/dbcheck.pl-184-        }
--
dw-free/htdocs/doc/server/style.css-50-  border-top-width: 1px;
dw-free/htdocs/doc/server/style.css-51-}
dw-free/htdocs/doc/server/style.css-52-
dw-free/htdocs/doc/server/style.css:53:/* FIXME: make bottom bar prettier */
dw-free/htdocs/doc/server/style.css-54-div.navfooter
dw-free/htdocs/doc/server/style.css-55-{
dw-free/htdocs/doc/server/style.css-56-  border-top: 1px solid #c1272c; 
--
dw-free/htdocs/preview/entry.bml-115-        $stylesys = 1; $styleid = 0;
dw-free/htdocs/preview/entry.bml-116-    }
dw-free/htdocs/preview/entry.bml-117-
dw-free/htdocs/preview/entry.bml:118:    # TODO: clean up this codepath/logic
dw-free/htdocs/preview/entry.bml-119-    # "stylesys == 1" in here means that you're viewing a BML page, not customized comemnts
dw-free/htdocs/preview/entry.bml-120-    if ($stylesys == 1) {
dw-free/htdocs/preview/entry.bml-121-        # pre-load common strings for little speed and less typing later
--
dw-free/htdocs/admin/faq/faqedit.bml-25-{
dw-free/htdocs/admin/faq/faqedit.bml-26-    use strict;
dw-free/htdocs/admin/faq/faqedit.bml-27-
dw-free/htdocs/admin/faq/faqedit.bml:28:    # FIXME: add crumb
dw-free/htdocs/admin/faq/faqedit.bml-29-    
dw-free/htdocs/admin/faq/faqedit.bml-30-    my $id = $FORM{id} + 0;
dw-free/htdocs/admin/faq/faqedit.bml-31-    my $ret = "";
--
dw-free/htdocs/admin/faq/faqedit.bml-137-                $dbh->do( "DELETE FROM faq WHERE faqid=?", undef, $id );
dw-free/htdocs/admin/faq/faqedit.bml-138-                $ret .= "FAQ item deleted.";
dw-free/htdocs/admin/faq/faqedit.bml-139-
dw-free/htdocs/admin/faq/faqedit.bml:140:                # FIXME: delete translation from ml_* ?
dw-free/htdocs/admin/faq/faqedit.bml-141-            }
dw-free/htdocs/admin/faq/faqedit.bml-142-
dw-free/htdocs/admin/faq/faqedit.bml-143-            return $ret;
dw-free/htdocs/admin/faq/faqedit.bml-144-        }
dw-free/htdocs/admin/faq/faqedit.bml-145-
dw-free/htdocs/admin/faq/faqedit.bml-146-        if ( $POST{'action:preview'} ) { # Preview FAQ
dw-free/htdocs/admin/faq/faqedit.bml:147:            # FIXME: make lastmodtime look more like in LJ::Faq->load
dw-free/htdocs/admin/faq/faqedit.bml-148-            my $fake_faq
dw-free/htdocs/admin/faq/faqedit.bml-149-                = LJ::Faq->new( faqid => $id, question => $question,
dw-free/htdocs/admin/faq/faqedit.bml-150-                                summary => $summary, answer => $answer,
--
dw-free/htdocs/admin/faq/faqedit.bml-177-                                  && LJ::is_enabled( 'faq_summaries' );
dw-free/htdocs/admin/faq/faqedit.bml-178-
dw-free/htdocs/admin/faq/faqedit.bml-179-            # escape question
dw-free/htdocs/admin/faq/faqedit.bml:180:            # FIXME: do we still need to check for \n? Did we ever?
dw-free/htdocs/admin/faq/faqedit.bml-181-            my $q_html
dw-free/htdocs/admin/faq/faqedit.bml-182-                = LJ::html_newlines( LJ::trim( $fake_faq->question_html ) );
dw-free/htdocs/admin/faq/faqedit.bml-183-
--
dw-free/htdocs/admin/faq/faqedit.bml-190-                if $display_answer;
dw-free/htdocs/admin/faq/faqedit.bml-191-
dw-free/htdocs/admin/faq/faqedit.bml-192-            # run hook to transform the text of this FAQ before it's rendered
dw-free/htdocs/admin/faq/faqedit.bml:193:            # FIXME: hook is responsible for clean-up if it changes $display_*
dw-free/htdocs/admin/faq/faqedit.bml-194-            # from false to true. Should that be checked/enforced here instead?
dw-free/htdocs/admin/faq/faqedit.bml:195:            # FIXME: do we even need that hook? It looks like LJ only ever used
dw-free/htdocs/admin/faq/faqedit.bml-196-            # it to add stuff to LJ Talk FAQs, for Gizmo sponsorship.
dw-free/htdocs/admin/faq/faqedit.bml-197-            LJ::Hooks::run_hook( "faq.$id.transform", $remote, answer => \$a_html,
dw-free/htdocs/admin/faq/faqedit.bml-198-                          question => \$q_html, summary => \$s_html,
--
dw-free/htdocs/admin/faq/faqedit.bml-211-
dw-free/htdocs/admin/faq/faqedit.bml-212-            $ret .= "</div>";
dw-free/htdocs/admin/faq/faqedit.bml-213-
dw-free/htdocs/admin/faq/faqedit.bml:214:            # FIXME: lastmodtime and lastmodwho should be vars in .lastupdated
dw-free/htdocs/admin/faq/faqedit.bml-215-            # Also, using the string in htdocs/support/faqbrowse.bml.text for
dw-free/htdocs/admin/faq/faqedit.bml-216-            # now, but this may change (either duplicate it here, or remove it
dw-free/htdocs/admin/faq/faqedit.bml-217-            # altogether, since $remote presumably knows who they are and what
--
dw-free/htdocs/admin/invites/promo.bml-274-    } elsif ( DW::InviteCodes::Promo->is_promo_code( code => $code ) ) {
dw-free/htdocs/admin/invites/promo.bml-275-        $create_form->( DW::InviteCodes::Promo->load( code => $code ) );
dw-free/htdocs/admin/invites/promo.bml-276-    } else {
dw-free/htdocs/admin/invites/promo.bml:277:        # FIXME: Do not do hash accesses on this.
dw-free/htdocs/admin/invites/promo.bml-278-        my $codes = DW::InviteCodes::Promo->load_bulk( state => $state );
dw-free/htdocs/admin/invites/promo.bml-279-
dw-free/htdocs/admin/invites/promo.bml-280-        $ret .= '<a href="/admin/invites/promo?state=create">' . $ML{'.state.new'} . '</a> | ';
--
dw-free/htdocs/admin/entryprops.bml-86-            if ( $prop eq "xpost" || $prop eq "xpostdetail" ) {
dw-free/htdocs/admin/entryprops.bml-87-                my %external_accounts_map = map { $_->acctid => $_->servername } DW::External::Account->get_external_accounts( $pu );
dw-free/htdocs/admin/entryprops.bml-88-
dw-free/htdocs/admin/entryprops.bml:89:                # FIXME: temporary; trying to figure out when this is undef
dw-free/htdocs/admin/entryprops.bml-90-                my $xpost_prop = $props{$prop};
dw-free/htdocs/admin/entryprops.bml-91-                my $xpost_hash = DW::External::Account->xpost_string_to_hash( $props{$prop} );
dw-free/htdocs/admin/entryprops.bml-92-                my %xpost_map = %{ $xpost_hash || {} };
--
dw-free/htdocs/admin/entryprops.bml-99-                    $p->{des} .= " (site name => { itemid, url })";
dw-free/htdocs/admin/entryprops.bml-100-                }
dw-free/htdocs/admin/entryprops.bml-101-
dw-free/htdocs/admin/entryprops.bml:102:                # FIXME: temporary
dw-free/htdocs/admin/entryprops.bml-103-                $props{$prop} .= "raw information about $prop - <input type='text' value='$xpost_prop' />" 
dw-free/htdocs/admin/entryprops.bml-104-                    unless $xpost_hash;
dw-free/htdocs/admin/entryprops.bml-105-            } elsif ( $prop eq 'picture_mapid' && $pu->userpic_have_mapid ) {
--
dw-free/htdocs/admin/theschwartz.bml-42-    # by TheScwartz without this manual hackery... also, this requires that we not
dw-free/htdocs/admin/theschwartz.bml-43-    # be using roled TheSchwartz, or multiple (undefined results)
dw-free/htdocs/admin/theschwartz.bml-44-    #
dw-free/htdocs/admin/theschwartz.bml:45:    # FIXME: this can be so much better.
dw-free/htdocs/admin/theschwartz.bml-46-    return "Site configuration is not valid for using this tool."
dw-free/htdocs/admin/theschwartz.bml-47-        if scalar( grep { defined $_->{role} } @LJ::THESCHWARTZ_DBS ) > 0 ||
dw-free/htdocs/admin/theschwartz.bml-48-           scalar( @LJ::THESCHWARTZ_DBS ) > 1;
--
dw-free/htdocs/admin/pay/view.bml-16-    return BML::ml( "admin.noprivserror", { numprivs => $numprivs, needprivs => "<b>" . join(", ", @displayprivs) . "</b>"} )
dw-free/htdocs/admin/pay/view.bml-17-        unless $remote->has_priv( 'payments' );
dw-free/htdocs/admin/pay/view.bml-18-
dw-free/htdocs/admin/pay/view.bml:19:    # FIXME: there should be a better page for this or something
dw-free/htdocs/admin/pay/view.bml-20-    if ( my $acid = $GET{striptimefrom} ) {
dw-free/htdocs/admin/pay/view.bml-21-        if ( LJ::did_post() && LJ::check_form_auth() ) {
dw-free/htdocs/admin/pay/view.bml-22-            my $dbh = LJ::get_db_writer();
--
dw-free/htdocs/admin/translate/editpage.bml-320-             if ( $extra_checkboxes ) {
dw-free/htdocs/admin/translate/editpage.bml-321-                 # Not gonna bother to refactor to LJ::Lang as the whole
dw-free/htdocs/admin/translate/editpage.bml-322-                 # translation system will get thrown away and redone later.
dw-free/htdocs/admin/translate/editpage.bml:323:                 # FIXME: make sure my words don't come back to haunt me.
dw-free/htdocs/admin/translate/editpage.bml-324-                 $dbh->do( "UPDATE ml_items SET proofed = ?, updated = ? " .
dw-free/htdocs/admin/translate/editpage.bml-325-                           "WHERE dmid = ? AND itid = ?", undef, $proofed ? 1 : 0,
dw-free/htdocs/admin/translate/editpage.bml-326-                           $updated ? 1 : 0, $dom, $itid );
--
dw-free/htdocs/admin/userlog.bml-120-            $action = "Email address changed to: $extra->{new}";
dw-free/htdocs/admin/userlog.bml-121-        } elsif ($row->{action} eq 'mass_privacy_change') {
dw-free/htdocs/admin/userlog.bml-122-            $action = "Entry privacy updated (from $extra->{s_security} to $extra->{e_security})";
dw-free/htdocs/admin/userlog.bml:123:            # TODO: parse out e_unixtime and s_unixtime and display?
dw-free/htdocs/admin/userlog.bml-124-        } elsif ($row->{action} eq 'delete_userpic') {
dw-free/htdocs/admin/userlog.bml-125-            $action = "Deleted userpic #$extra->{picid}";
dw-free/htdocs/admin/userlog.bml-126-        } elsif ( $row->{action} eq 'impersonated' ) {
--
dw-free/htdocs/mobile/read.bml-36-#    my $filter;
dw-free/htdocs/mobile/read.bml-37-    my $groupname = "All friends";
dw-free/htdocs/mobile/read.bml-38-
dw-free/htdocs/mobile/read.bml:39:# FIXME: WTF reading groups
dw-free/htdocs/mobile/read.bml-40-#    foreach ("Mobile View", "Default View") {
dw-free/htdocs/mobile/read.bml-41-#        if (my $grp = LJ::get_friend_group($u, { 'name' => $_ })) {
dw-free/htdocs/mobile/read.bml-42-#            $groupname = $_;
--
dw-free/htdocs/talkpost_do.bml-123-        if LJ::BetaFeatures->user_in_beta( $remote => "journaljquery" );
dw-free/htdocs/talkpost_do.bml-124-
dw-free/htdocs/talkpost_do.bml-125-
dw-free/htdocs/talkpost_do.bml:126:    # FIXME: this isn't entirely correct, if ecphash is present but ignored/incorrect
dw-free/htdocs/talkpost_do.bml-127-    # that fix would need to be done in talklib.pl
dw-free/htdocs/talkpost_do.bml-128-
dw-free/htdocs/talkpost_do.bml-129-    # show this error along with the regenerated comment form down below
--
dw-free/htdocs/talkpost_do.bml-222-    # Allow style=mine, etc for QR redirects
dw-free/htdocs/talkpost_do.bml-223-    my $style_args = LJ::viewing_style_args( %POST );
dw-free/htdocs/talkpost_do.bml-224-
dw-free/htdocs/talkpost_do.bml:225:    # FIXME: potentially can be replaced with some form of additional logic when we have multiple account linkage
dw-free/htdocs/talkpost_do.bml-226-    my $posted = $comment->{state} eq 'A' ? "posted=1" : "";
dw-free/htdocs/talkpost_do.bml-227-
dw-free/htdocs/talkpost_do.bml-228-    my $cthread = $POST{'viewing_thread'} ? "thread=$POST{viewing_thread}" : "view=$dtalkid";
--
dw-free/htdocs/support/faqbrowse.bml-42-
dw-free/htdocs/support/faqbrowse.bml-43-    # get faqid and redirect to faq.bml if none
dw-free/htdocs/support/faqbrowse.bml-44-    my $faqidarg = $GET{'faqid'} + 0;
dw-free/htdocs/support/faqbrowse.bml:45:    # FIXME: disallow both faqid and faqcat (or ignore one)
dw-free/htdocs/support/faqbrowse.bml-46-    my $faqcatarg = $GET{'faqcat'};
dw-free/htdocs/support/faqbrowse.bml-47-    
dw-free/htdocs/support/faqbrowse.bml-48-    unless ($faqidarg || $faqcatarg) {
--
dw-free/htdocs/support/faqbrowse.bml-172-            $question =~ s/(\Q$qterm\E)/$term->($1)/ige;
dw-free/htdocs/support/faqbrowse.bml-173-
dw-free/htdocs/support/faqbrowse.bml-174-            # don't highlight terms in URLs or HTML tags
dw-free/htdocs/support/faqbrowse.bml:175:            # FIXME: if the search term is present in a tag, should still
dw-free/htdocs/support/faqbrowse.bml-176-            # highlight occurences outside tags.
dw-free/htdocs/support/faqbrowse.bml-177-            $summary =~ s!((?:https?://[^>]+)?\Q$qterm\E)!$term->($1)!ige
dw-free/htdocs/support/faqbrowse.bml-178-                unless $summary =~ m!<[^>]*\Q$qterm\E[^>]*>!;
--
dw-free/htdocs/support/faqbrowse.bml-182-        }
dw-free/htdocs/support/faqbrowse.bml-183-
dw-free/htdocs/support/faqbrowse.bml-184-        # run hook to transform the text of this FAQ before it's rendered
dw-free/htdocs/support/faqbrowse.bml:185:        # FIXME: hook is responsible for clean-up if it changes $display_*
dw-free/htdocs/support/faqbrowse.bml-186-        # from false to true. Should that be checked/enforced here instead?
dw-free/htdocs/support/faqbrowse.bml:187:        # FIXME: do we even need that hook? It looks like LJ only ever used
dw-free/htdocs/support/faqbrowse.bml-188-        # it to add stuff to LJ Talk FAQs, for Gizmo sponsorship.
dw-free/htdocs/support/faqbrowse.bml-189-        LJ::Hooks::run_hook( "faq.$faqid.transform", $remote, question => \$question,
dw-free/htdocs/support/faqbrowse.bml-190-                      summary => \$summary, display_summary => \$display_summary,
--
dw-free/htdocs/support/faqbrowse.bml-225-
dw-free/htdocs/support/faqbrowse.bml-226-        my $lastmodwho = LJ::get_username($f->lastmoduserid);
dw-free/htdocs/support/faqbrowse.bml-227-        if ($lastmodwho) {
dw-free/htdocs/support/faqbrowse.bml:228:            # FIXME: lastmodtime and lastmodwho should be vars in .lastupdated
dw-free/htdocs/support/faqbrowse.bml-229-            $$body .= "<p align=\"right\"><b>$ML{'.lastupdated'}</b><br />"
dw-free/htdocs/support/faqbrowse.bml-230-                . $f->lastmodtime . " ($lastmodwho)</p>";
dw-free/htdocs/support/faqbrowse.bml-231-        }
--
dw-free/htdocs/support/see_request.bml-707-
dw-free/htdocs/support/see_request.bml-708-        my %faqcat;
dw-free/htdocs/support/see_request.bml-709-        my %faqq;
dw-free/htdocs/support/see_request.bml:710:        # FIXME: must refactor that somewhere
dw-free/htdocs/support/see_request.bml-711-        my $deflang = BML::get_language_default();
dw-free/htdocs/support/see_request.bml-712-        my $mll = LJ::Lang::get_lang( $curlang );
dw-free/htdocs/support/see_request.bml-713-        my $mld = LJ::Lang::get_dom( "faq" );
--
dw-free/htdocs/support/stock_answers.bml-79-        foreach my $ref (\$subj, \$body) {
dw-free/htdocs/support/stock_answers.bml-80-            $$ref =~ s/^\s+//;
dw-free/htdocs/support/stock_answers.bml-81-            $$ref =~ s/\s+$//;
dw-free/htdocs/support/stock_answers.bml:82:            # FIXME: more stuff to clean it up?
dw-free/htdocs/support/stock_answers.bml-83-        }
dw-free/htdocs/support/stock_answers.bml-84-
dw-free/htdocs/support/stock_answers.bml-85-        return "<?h1 $ML{'.error'} h1?><?p $ML{'.fill.out.all.friends'} p?>"
--
dw-free/htdocs/editprivacy.bml-226-        }
dw-free/htdocs/editprivacy.bml-227-
dw-free/htdocs/editprivacy.bml-228-        $body .= "<p>$ML{'.notified'}</p>";
dw-free/htdocs/editprivacy.bml:229:        # TODO: Let the user know when the job is complete
dw-free/htdocs/editprivacy.bml-230-
dw-free/htdocs/editprivacy.bml-231-        return $body;
dw-free/htdocs/editprivacy.bml-232-    }
Binary file dw-free/htdocs/img/silk/profile/access_grant_disabled.png matches
Binary file dw-free/htdocs/img/mood/rainbow-child/working.png matches
Binary file dw-free/htdocs/img/external/dj-community.gif matches
Binary file dw-free/htdocs/img/profile_icons/arrow-right.gif matches
Binary file dw-free/htdocs/img/profile_icons/arrow-down.gif matches
Binary file dw-free/htdocs/img/profile_icons/track.gif matches
Binary file dw-free/htdocs/img/customize/previews/zesty/white.png matches
Binary file dw-free/htdocs/img/customize/previews/tranquilityiii/happynow.png matches
Binary file dw-free/htdocs/img/customize/previews/tranquilityiii/lightondark.png matches
Binary file dw-free/htdocs/img/customize/previews/database/gray.png matches
Binary file dw-free/htdocs/img/customize/previews/bases/steele.png matches
Binary file dw-free/htdocs/img/customize/previews/compartmentalize/contemplation.png matches
Binary file dw-free/htdocs/img/customize/previews/compartmentalize/gentleterra.png matches
Binary file dw-free/htdocs/img/customize/previews/compartmentalize/underworld.png matches
Binary file dw-free/htdocs/img/customize/previews/brittle/wolfhood.png matches
Binary file dw-free/htdocs/img/customize/previews/fluidmeasure/officegreen.png matches
Binary file dw-free/htdocs/img/customize/previews/nouveauoleanders/pigeonblue.png matches
Binary file dw-free/htdocs/img/customize/previews/easyread/fullsky.png matches
Binary file dw-free/htdocs/img/customize/previews/steppingstones/olive.png matches
Binary file dw-free/htdocs/img/customize/previews/modular/mediterraneanpeach.png matches
Binary file dw-free/htdocs/img/customize/previews/fiveam/acidity.png matches
Binary file dw-free/htdocs/img/customize/previews/funkycircles/industrialteal.png matches
Binary file dw-free/htdocs/img/customize/previews/drifting/lightondark.png matches
Binary file dw-free/htdocs/img/customize/previews/practicality/cosmos.png matches
Binary file dw-free/htdocs/img/customize/previews/modish/greyscale.png matches
Binary file dw-free/htdocs/img/customize/previews/modish/tigerlilies.png matches
Binary file dw-free/htdocs/img/customize/previews/crisped/velvetsteel.png matches
Binary file dw-free/htdocs/img/customize/previews/basicboxes/danceinthedark.png matches
Binary file dw-free/htdocs/img/ins-object.gif matches
--
dw-free/htdocs/update.bml-610-            $pageload
dw-free/htdocs/update.bml-611-        }
dw-free/htdocs/update.bml-612-
dw-free/htdocs/update.bml:613:        // TODO: make these function calls
dw-free/htdocs/update.bml-614-        LJDraft.autoSaveInterval = $LJ::AUTOSAVE_DRAFT_INTERVAL;
dw-free/htdocs/update.bml-615-        LJDraft.savedMsg = '$eMLautosave';
dw-free/htdocs/update.bml-616-
--
dw-free/htdocs/talkscreen.bml-30-    my $error = sub {
dw-free/htdocs/talkscreen.bml-31-        if ($jsmode) {
dw-free/htdocs/talkscreen.bml-32-            BML::finish();
dw-free/htdocs/talkscreen.bml:33:            # FIXME: remove once we've switched over completely to jquery
dw-free/htdocs/talkscreen.bml-34-            if ( !!$GET{json} ) {
dw-free/htdocs/talkscreen.bml-35-                return JSON::objToJson( { error => $_[0] } );
dw-free/htdocs/talkscreen.bml-36-            } else {
--
dw-free/htdocs/talkscreen.bml-160-        if ($state ne 'S') {
dw-free/htdocs/talkscreen.bml-161-            LJ::Talk::screen_comment($u, $qitemid, $qtalkid);
dw-free/htdocs/talkscreen.bml-162-        }
dw-free/htdocs/talkscreen.bml:163:        # FIXME: no error checking?
dw-free/htdocs/talkscreen.bml-164-        return $jsres->($mode, $ML{'.screened.body'}) if $jsmode;
dw-free/htdocs/talkscreen.bml-165-        $body = "<?h1 $ML{'.screened.title'} h1?><?p $ML{'.screened.body'} $linktext p?>";
dw-free/htdocs/talkscreen.bml-166-        return;
--
dw-free/htdocs/talkscreen.bml-185-        if ($state ne 'A') {
dw-free/htdocs/talkscreen.bml-186-            LJ::Talk::unscreen_comment($u, $qitemid, $qtalkid);
dw-free/htdocs/talkscreen.bml-187-        }
dw-free/htdocs/talkscreen.bml:188:        # FIXME: no error checking?
dw-free/htdocs/talkscreen.bml-189-        return $jsres->($mode, $ML{'.unscreened.body'}) if $jsmode;
dw-free/htdocs/talkscreen.bml-190-        $body = "<?h1 $ML{'.unscreened.title'} h1?><?p $ML{'.unscreened.body'} $linktext p?>";
dw-free/htdocs/talkscreen.bml-191-        return;
--
dw-free/htdocs/js/jquery.autocompletewithunknown.js-22-            // check if the tag is empty, or if we had previously used it
dw-free/htdocs/js/jquery.autocompletewithunknown.js-23-            if ( tag == "" ) return;
dw-free/htdocs/js/jquery.autocompletewithunknown.js-24-
dw-free/htdocs/js/jquery.autocompletewithunknown.js:25:            // TODO: don't put it in if the word exceeds the maximum length of a tag
dw-free/htdocs/js/jquery.autocompletewithunknown.js-26-            if ( ! self.tagslist[tag] ) {
dw-free/htdocs/js/jquery.autocompletewithunknown.js-27-                self.tagslist[tag] = true;
dw-free/htdocs/js/jquery.autocompletewithunknown.js-28-
--
dw-free/htdocs/js/jquery.autocompletewithunknown.js-296-                    // this tries to make sure that we don't try to validate crossposting, if we only hit enter
dw-free/htdocs/js/jquery.autocompletewithunknown.js-297-                    // to autocomplete. Workaround for opera.
dw-free/htdocs/js/jquery.autocompletewithunknown.js-298-                    // Sort of like a lock, to mark which handler last prevented the form submission.
dw-free/htdocs/js/jquery.autocompletewithunknown.js:299:                    // TODO: refactor this out into something that we're sure works. We are at the mercy
dw-free/htdocs/js/jquery.autocompletewithunknown.js-300-                    // of the way that Opera and other browsers order the handlers.
dw-free/htdocs/js/jquery.autocompletewithunknown.js-301-                    if ( self.element.data("preventedby") == self.options.id)
dw-free/htdocs/js/jquery.autocompletewithunknown.js-302-                        self.element.data("preventedby", null)
--
dw-free/htdocs/js/s2edit/xlib.js-88-		range.collapse(true);
dw-free/htdocs/js/s2edit/xlib.js-89-		range.moveEnd('character', pos);
dw-free/htdocs/js/s2edit/xlib.js-90-		range.moveStart('character', pos);
dw-free/htdocs/js/s2edit/xlib.js:91:		range.select();		// TODO: test this
dw-free/htdocs/js/s2edit/xlib.js-92-	} else {
dw-free/htdocs/js/s2edit/xlib.js-93-		obj.selectionStart = obj.selectionEnd = pos;
dw-free/htdocs/js/s2edit/xlib.js-94-		obj.focus();
--
dw-free/htdocs/js/thread_expander.js-109-
dw-free/htdocs/js/thread_expander.js-110-Expander.prototype.getS1width = function(canvas){
dw-free/htdocs/js/thread_expander.js-111-  var w;
dw-free/htdocs/js/thread_expander.js:112:  //TODO:  may be we should should add somie ID to the spacer img instead of searching it
dw-free/htdocs/js/thread_expander.js-113-  //yet, this works until we have not changed the spacers url = 'dot.gif');
dw-free/htdocs/js/thread_expander.js-114-  var img, imgs, found;
dw-free/htdocs/js/thread_expander.js-115-  imgs = canvas.getElementsByTagName('img');
--
dw-free/htdocs/js/thread_expander.js-163-                                            if(obj.is_S1 && w!==null){
dw-free/htdocs/js/thread_expander.js-164-                                                    obj.setS1width(comments_page[id].canvas,w);
dw-free/htdocs/js/thread_expander.js-165-                                            }
dw-free/htdocs/js/thread_expander.js:166:                                            //TODO: may be this should be uncommented
dw-free/htdocs/js/thread_expander.js-167-                                            //comments_page[id].canvas.className = new_comment.canvas.className;
dw-free/htdocs/js/thread_expander.js-168-                                            LJ_cmtinfo[id].full=1;
dw-free/htdocs/js/thread_expander.js-169-                                        }
--
dw-free/htdocs/js/jquery/jquery.ui.datepicker.js-120-			console.log.apply('', arguments);
dw-free/htdocs/js/jquery/jquery.ui.datepicker.js-121-	},
dw-free/htdocs/js/jquery/jquery.ui.datepicker.js-122-	
dw-free/htdocs/js/jquery/jquery.ui.datepicker.js:123:	// TODO rename to "widget" when switching to widget factory
dw-free/htdocs/js/jquery/jquery.ui.datepicker.js-124-	_widgetDatepicker: function() {
dw-free/htdocs/js/jquery/jquery.ui.datepicker.js-125-		return this.dpDiv;
dw-free/htdocs/js/jquery/jquery.ui.datepicker.js-126-	},
--
dw-free/htdocs/js/jquery/jquery.ui.datepicker.js-674-		var borders = $.datepicker._getBorders(inst.dpDiv);
dw-free/htdocs/js/jquery/jquery.ui.datepicker.js-675-		inst.dpDiv.empty().append(this._generateHTML(inst));
dw-free/htdocs/js/jquery/jquery.ui.datepicker.js-676-		var cover = inst.dpDiv.find('iframe.ui-datepicker-cover'); // IE6- only
dw-free/htdocs/js/jquery/jquery.ui.datepicker.js:677:		if( !!cover.length ){ //avoid call to outerXXXX() when not in IE6
dw-free/htdocs/js/jquery/jquery.ui.datepicker.js-678-			cover.css({left: -borders[0], top: -borders[1], width: inst.dpDiv.outerWidth(), height: inst.dpDiv.outerHeight()})
dw-free/htdocs/js/jquery/jquery.ui.datepicker.js-679-		}
dw-free/htdocs/js/jquery/jquery.ui.datepicker.js-680-		inst.dpDiv.find('button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a')
--
dw-free/htdocs/js/jquery/jquery.ui.dialog.js-172-
dw-free/htdocs/js/jquery/jquery.ui.dialog.js-173-		//handling of deprecated beforeclose (vs beforeClose) option
dw-free/htdocs/js/jquery/jquery.ui.dialog.js-174-		//Ticket #4669 http://dev.jqueryui.com/ticket/4669
dw-free/htdocs/js/jquery/jquery.ui.dialog.js:175:		//TODO: remove in 1.9pre
dw-free/htdocs/js/jquery/jquery.ui.dialog.js-176-		if ($.isFunction(options.beforeclose) && !$.isFunction(options.beforeClose)) {
dw-free/htdocs/js/jquery/jquery.ui.dialog.js-177-			options.beforeClose = options.beforeclose;
dw-free/htdocs/js/jquery/jquery.ui.dialog.js-178-		}
--
dw-free/htdocs/js/jquery/jquery.ui.dialog.js-564-		switch (key) {
dw-free/htdocs/js/jquery/jquery.ui.dialog.js-565-			//handling of deprecated beforeclose (vs beforeClose) option
dw-free/htdocs/js/jquery/jquery.ui.dialog.js-566-			//Ticket #4669 http://dev.jqueryui.com/ticket/4669
dw-free/htdocs/js/jquery/jquery.ui.dialog.js:567:			//TODO: remove in 1.9pre
dw-free/htdocs/js/jquery/jquery.ui.dialog.js-568-			case "beforeclose":
dw-free/htdocs/js/jquery/jquery.ui.dialog.js-569-				key = "beforeClose";
dw-free/htdocs/js/jquery/jquery.ui.dialog.js-570-				break;
--
dw-free/htdocs/js/jquery/jquery.ui.mouse.js-36-		this.started = false;
dw-free/htdocs/js/jquery/jquery.ui.mouse.js-37-	},
dw-free/htdocs/js/jquery/jquery.ui.mouse.js-38-
dw-free/htdocs/js/jquery/jquery.ui.mouse.js:39:	// TODO: make sure destroying one instance of mouse doesn't mess with
dw-free/htdocs/js/jquery/jquery.ui.mouse.js-40-	// other instances of mouse
dw-free/htdocs/js/jquery/jquery.ui.mouse.js-41-	_mouseDestroy: function() {
dw-free/htdocs/js/jquery/jquery.ui.mouse.js-42-		this.element.unbind('.'+this.widgetName);
--
dw-free/htdocs/js/jquery/jquery.ui.mouse.js-44-
dw-free/htdocs/js/jquery/jquery.ui.mouse.js-45-	_mouseDown: function(event) {
dw-free/htdocs/js/jquery/jquery.ui.mouse.js-46-		// don't let more than one widget handle mouseStart
dw-free/htdocs/js/jquery/jquery.ui.mouse.js:47:		// TODO: figure out why we have to use originalEvent
dw-free/htdocs/js/jquery/jquery.ui.mouse.js-48-		event.originalEvent = event.originalEvent || {};
dw-free/htdocs/js/jquery/jquery.ui.mouse.js-49-		if (event.originalEvent.mouseHandled) { return; }
dw-free/htdocs/js/jquery/jquery.ui.mouse.js-50-
--
dw-free/htdocs/js/jquery/jquery.ui.position.js-37-		targetWidth = target.width();
dw-free/htdocs/js/jquery/jquery.ui.position.js-38-		targetHeight = target.height();
dw-free/htdocs/js/jquery/jquery.ui.position.js-39-		basePosition = { top: 0, left: 0 };
dw-free/htdocs/js/jquery/jquery.ui.position.js:40:	// TODO: use $.isWindow() in 1.9
dw-free/htdocs/js/jquery/jquery.ui.position.js-41-	} else if ( targetElem.setTimeout ) {
dw-free/htdocs/js/jquery/jquery.ui.position.js-42-		targetWidth = target.width();
dw-free/htdocs/js/jquery/jquery.ui.position.js-43-		targetHeight = target.height();
--
dw-free/htdocs/js/jquery/jquery.ui.autocomplete.js-41-		this.element
dw-free/htdocs/js/jquery/jquery.ui.autocomplete.js-42-			.addClass( "ui-autocomplete-input" )
dw-free/htdocs/js/jquery/jquery.ui.autocomplete.js-43-			.attr( "autocomplete", "off" )
dw-free/htdocs/js/jquery/jquery.ui.autocomplete.js:44:			// TODO verify these actually work as intended
dw-free/htdocs/js/jquery/jquery.ui.autocomplete.js-45-			.attr({
dw-free/htdocs/js/jquery/jquery.ui.autocomplete.js-46-				role: "textbox",
dw-free/htdocs/js/jquery/jquery.ui.autocomplete.js-47-				"aria-autocomplete": "list",
--
dw-free/htdocs/js/jquery/jquery.ui.autocomplete.js-356-			.empty()
dw-free/htdocs/js/jquery/jquery.ui.autocomplete.js-357-			.zIndex( this.element.zIndex() + 1 );
dw-free/htdocs/js/jquery/jquery.ui.autocomplete.js-358-		this._renderMenu( ul, items );
dw-free/htdocs/js/jquery/jquery.ui.autocomplete.js:359:		// TODO refresh should check if the active item is still in the dom, removing the need for a manual deactivate
dw-free/htdocs/js/jquery/jquery.ui.autocomplete.js-360-		this.menu.deactivate();
dw-free/htdocs/js/jquery/jquery.ui.autocomplete.js-361-		this.menu.refresh();
dw-free/htdocs/js/jquery/jquery.ui.autocomplete.js-362-
--
dw-free/htdocs/js/jquery/jquery.ui.autocomplete.js-545-		}
dw-free/htdocs/js/jquery/jquery.ui.autocomplete.js-546-	},
dw-free/htdocs/js/jquery/jquery.ui.autocomplete.js-547-
dw-free/htdocs/js/jquery/jquery.ui.autocomplete.js:548:	// TODO merge with previousPage
dw-free/htdocs/js/jquery/jquery.ui.autocomplete.js-549-	nextPage: function(event) {
dw-free/htdocs/js/jquery/jquery.ui.autocomplete.js-550-		if (this.hasScroll()) {
dw-free/htdocs/js/jquery/jquery.ui.autocomplete.js:551:			// TODO merge with no-scroll-else
dw-free/htdocs/js/jquery/jquery.ui.autocomplete.js-552-			if (!this.active || this.last()) {
dw-free/htdocs/js/jquery/jquery.ui.autocomplete.js-553-				this.activate(event, this.element.children(".ui-menu-item:first"));
dw-free/htdocs/js/jquery/jquery.ui.autocomplete.js-554-				return;
--
dw-free/htdocs/js/jquery/jquery.ui.autocomplete.js-557-				height = this.element.height(),
dw-free/htdocs/js/jquery/jquery.ui.autocomplete.js-558-				result = this.element.children(".ui-menu-item").filter(function() {
dw-free/htdocs/js/jquery/jquery.ui.autocomplete.js-559-					var close = $(this).offset().top - base - height + $(this).height();
dw-free/htdocs/js/jquery/jquery.ui.autocomplete.js:560:					// TODO improve approximation
dw-free/htdocs/js/jquery/jquery.ui.autocomplete.js-561-					return close < 10 && close > -10;
dw-free/htdocs/js/jquery/jquery.ui.autocomplete.js-562-				});
dw-free/htdocs/js/jquery/jquery.ui.autocomplete.js-563-
dw-free/htdocs/js/jquery/jquery.ui.autocomplete.js:564:			// TODO try to catch this earlier when scrollTop indicates the last page anyway
dw-free/htdocs/js/jquery/jquery.ui.autocomplete.js-565-			if (!result.length) {
dw-free/htdocs/js/jquery/jquery.ui.autocomplete.js-566-				result = this.element.children(".ui-menu-item:last");
dw-free/htdocs/js/jquery/jquery.ui.autocomplete.js-567-			}
--
dw-free/htdocs/js/jquery/jquery.ui.autocomplete.js-572-		}
dw-free/htdocs/js/jquery/jquery.ui.autocomplete.js-573-	},
dw-free/htdocs/js/jquery/jquery.ui.autocomplete.js-574-
dw-free/htdocs/js/jquery/jquery.ui.autocomplete.js:575:	// TODO merge with nextPage
dw-free/htdocs/js/jquery/jquery.ui.autocomplete.js-576-	previousPage: function(event) {
dw-free/htdocs/js/jquery/jquery.ui.autocomplete.js-577-		if (this.hasScroll()) {
dw-free/htdocs/js/jquery/jquery.ui.autocomplete.js:578:			// TODO merge with no-scroll-else
dw-free/htdocs/js/jquery/jquery.ui.autocomplete.js-579-			if (!this.active || this.first()) {
dw-free/htdocs/js/jquery/jquery.ui.autocomplete.js-580-				this.activate(event, this.element.children(".ui-menu-item:last"));
dw-free/htdocs/js/jquery/jquery.ui.autocomplete.js-581-				return;
--
dw-free/htdocs/js/jquery/jquery.ui.autocomplete.js-585-				height = this.element.height();
dw-free/htdocs/js/jquery/jquery.ui.autocomplete.js-586-				result = this.element.children(".ui-menu-item").filter(function() {
dw-free/htdocs/js/jquery/jquery.ui.autocomplete.js-587-					var close = $(this).offset().top - base + height - $(this).height();
dw-free/htdocs/js/jquery/jquery.ui.autocomplete.js:588:					// TODO improve approximation
dw-free/htdocs/js/jquery/jquery.ui.autocomplete.js-589-					return close < 10 && close > -10;
dw-free/htdocs/js/jquery/jquery.ui.autocomplete.js-590-				});
dw-free/htdocs/js/jquery/jquery.ui.autocomplete.js-591-
dw-free/htdocs/js/jquery/jquery.ui.autocomplete.js:592:			// TODO try to catch this earlier when scrollTop indicates the last page anyway
dw-free/htdocs/js/jquery/jquery.ui.autocomplete.js-593-			if (!result.length) {
dw-free/htdocs/js/jquery/jquery.ui.autocomplete.js-594-				result = this.element.children(".ui-menu-item:first");
dw-free/htdocs/js/jquery/jquery.ui.autocomplete.js-595-			}
--
dw-free/htdocs/js/jquery/jquery-1.5.2.js-1386-		if ( !cache[ id ] ) {
dw-free/htdocs/js/jquery/jquery-1.5.2.js-1387-			cache[ id ] = {};
dw-free/htdocs/js/jquery/jquery-1.5.2.js-1388-
dw-free/htdocs/js/jquery/jquery-1.5.2.js:1389:			// TODO: This is a hack for 1.5 ONLY. Avoids exposing jQuery
dw-free/htdocs/js/jquery/jquery-1.5.2.js-1390-			// metadata on plain JS objects when the object is serialized using
dw-free/htdocs/js/jquery/jquery-1.5.2.js-1391-			// JSON.stringify
dw-free/htdocs/js/jquery/jquery-1.5.2.js-1392-			if ( !isNode ) {
--
dw-free/htdocs/js/jquery/jquery-1.5.2.js-1421-			thisCache[ name ] = data;
dw-free/htdocs/js/jquery/jquery-1.5.2.js-1422-		}
dw-free/htdocs/js/jquery/jquery-1.5.2.js-1423-
dw-free/htdocs/js/jquery/jquery-1.5.2.js:1424:		// TODO: This is a hack for 1.5 ONLY. It will be removed in 1.6. Users should
dw-free/htdocs/js/jquery/jquery-1.5.2.js-1425-		// not attempt to inspect the internal events object using jQuery.data, as this
dw-free/htdocs/js/jquery/jquery-1.5.2.js-1426-		// internal data object is undocumented and subject to change.
dw-free/htdocs/js/jquery/jquery-1.5.2.js-1427-		if ( name === "events" && !thisCache[name] ) {
--
dw-free/htdocs/js/jquery/jquery-1.5.2.js-1491-		// data if it existed
dw-free/htdocs/js/jquery/jquery-1.5.2.js-1492-		if ( internalCache ) {
dw-free/htdocs/js/jquery/jquery-1.5.2.js-1493-			cache[ id ] = {};
dw-free/htdocs/js/jquery/jquery-1.5.2.js:1494:			// TODO: This is a hack for 1.5 ONLY. Avoids exposing jQuery
dw-free/htdocs/js/jquery/jquery-1.5.2.js-1495-			// metadata on plain JS objects when the object is serialized using
dw-free/htdocs/js/jquery/jquery-1.5.2.js-1496-			// JSON.stringify
dw-free/htdocs/js/jquery/jquery-1.5.2.js-1497-			if ( !isNode ) {
--
dw-free/htdocs/js/jquery/jquery-1.5.2.js-1626-	return data;
dw-free/htdocs/js/jquery/jquery-1.5.2.js-1627-}
dw-free/htdocs/js/jquery/jquery-1.5.2.js-1628-
dw-free/htdocs/js/jquery/jquery-1.5.2.js:1629:// TODO: This is a hack for 1.5 ONLY to allow objects with a single toJSON
dw-free/htdocs/js/jquery/jquery-1.5.2.js-1630-// property to be considered empty objects; this property always exists in
dw-free/htdocs/js/jquery/jquery-1.5.2.js-1631-// order to make sure JSON.stringify does not expose internal metadata
dw-free/htdocs/js/jquery/jquery-1.5.2.js-1632-function isEmptyDataObject( obj ) {
--
dw-free/htdocs/js/jquery/jquery-1.5.2.js-2153-			return;
dw-free/htdocs/js/jquery/jquery-1.5.2.js-2154-		}
dw-free/htdocs/js/jquery/jquery-1.5.2.js-2155-
dw-free/htdocs/js/jquery/jquery-1.5.2.js:2156:		// TODO :: Use a try/catch until it's safe to pull this out (likely 1.6)
dw-free/htdocs/js/jquery/jquery-1.5.2.js-2157-		// Minor release fix for bug #8018
dw-free/htdocs/js/jquery/jquery-1.5.2.js-2158-		try {
dw-free/htdocs/js/jquery/jquery-1.5.2.js-2159-			// For whatever reason, IE has trouble passing the window object
--
dw-free/htdocs/js/jquery/jquery-1.5.2.js-2434-
dw-free/htdocs/js/jquery/jquery-1.5.2.js-2435-				// Only trigger if we've ever bound an event for it
dw-free/htdocs/js/jquery/jquery-1.5.2.js-2436-				if ( jQuery.event.global[ type ] ) {
dw-free/htdocs/js/jquery/jquery-1.5.2.js:2437:					// XXX This code smells terrible. event.js should not be directly
dw-free/htdocs/js/jquery/jquery-1.5.2.js-2438-					// inspecting the data cache
dw-free/htdocs/js/jquery/jquery-1.5.2.js-2439-					jQuery.each( jQuery.cache, function() {
dw-free/htdocs/js/jquery/jquery-1.5.2.js-2440-						// internalKey variable is just used to make it easier to find
--
dw-free/htdocs/js/jquery/jquery-1.5.2.js-3845-				Sizzle.error( match[0] );
dw-free/htdocs/js/jquery/jquery-1.5.2.js-3846-			}
dw-free/htdocs/js/jquery/jquery-1.5.2.js-3847-
dw-free/htdocs/js/jquery/jquery-1.5.2.js:3848:			// TODO: Move to normal caching system
dw-free/htdocs/js/jquery/jquery-1.5.2.js-3849-			match[0] = done++;
dw-free/htdocs/js/jquery/jquery-1.5.2.js-3850-
dw-free/htdocs/js/jquery/jquery-1.5.2.js-3851-			return match;
--
dw-free/htdocs/js/jquery/jquery-1.5.2.js-6925-});
dw-free/htdocs/js/jquery/jquery-1.5.2.js-6926-
dw-free/htdocs/js/jquery/jquery-1.5.2.js-6927-/* Handles responses to an ajax request:
dw-free/htdocs/js/jquery/jquery-1.5.2.js:6928: * - sets all responseXXX fields accordingly
dw-free/htdocs/js/jquery/jquery-1.5.2.js-6929- * - finds the right dataType (mediates between content-type and expected dataType)
dw-free/htdocs/js/jquery/jquery-1.5.2.js-6930- * - returns the corresponding response
dw-free/htdocs/js/jquery/jquery-1.5.2.js-6931- */
--
dw-free/htdocs/js/jquery/jquery-1.5.2.js-6939-		finalDataType,
dw-free/htdocs/js/jquery/jquery-1.5.2.js-6940-		firstDataType;
dw-free/htdocs/js/jquery/jquery-1.5.2.js-6941-
dw-free/htdocs/js/jquery/jquery-1.5.2.js:6942:	// Fill responseXXX fields
dw-free/htdocs/js/jquery/jquery-1.5.2.js-6943-	for( type in responseFields ) {
dw-free/htdocs/js/jquery/jquery-1.5.2.js-6944-		if ( type in responses ) {
dw-free/htdocs/js/jquery/jquery-1.5.2.js-6945-			jqXHR[ responseFields[type] ] = responses[ type ];
--
dw-free/htdocs/js/jquery/jquery-1.5.2.js-7585-		}
dw-free/htdocs/js/jquery/jquery-1.5.2.js-7586-
dw-free/htdocs/js/jquery/jquery-1.5.2.js-7587-		return this[ optall.queue === false ? "each" : "queue" ](function() {
dw-free/htdocs/js/jquery/jquery-1.5.2.js:7588:			// XXX 'this' does not always have a nodeName when running the
dw-free/htdocs/js/jquery/jquery-1.5.2.js-7589-			// test suite
dw-free/htdocs/js/jquery/jquery-1.5.2.js-7590-
dw-free/htdocs/js/jquery/jquery-1.5.2.js-7591-			var opt = jQuery.extend({}, optall), p,
--
dw-free/htdocs/js/jquery/jquery.ui.widget.js-100-					methodValue = instance && $.isFunction( instance[options] ) ?
dw-free/htdocs/js/jquery/jquery.ui.widget.js-101-						instance[ options ].apply( instance, args ) :
dw-free/htdocs/js/jquery/jquery.ui.widget.js-102-						instance;
dw-free/htdocs/js/jquery/jquery.ui.widget.js:103:				// TODO: add this back in 1.9 and use $.error() (see #5972)
dw-free/htdocs/js/jquery/jquery.ui.widget.js-104-//				if ( !instance ) {
dw-free/htdocs/js/jquery/jquery.ui.widget.js-105-//					throw "cannot call methods on " + name + " prior to initialization; " +
dw-free/htdocs/js/jquery/jquery.ui.widget.js-106-//						"attempted to call method '" + options + "'";
--
dw-free/htdocs/js/jquery/jquery.ui.sortable.js-152-		};
dw-free/htdocs/js/jquery/jquery.ui.sortable.js-153-
dw-free/htdocs/js/jquery/jquery.ui.sortable.js-154-		// Only after we got the offset, we can change the helper's position to absolute
dw-free/htdocs/js/jquery/jquery.ui.sortable.js:155:		// TODO: Still need to figure out a way to make relative sorting possible
dw-free/htdocs/js/jquery/jquery.ui.sortable.js-156-		this.helper.css("position", "absolute");
dw-free/htdocs/js/jquery/jquery.ui.sortable.js-157-		this.cssPosition = this.helper.css("position");
dw-free/htdocs/js/jquery/jquery.ui.sortable.js-158-
--
dw-free/htdocs/js/jquery/jquery.ui.sortable.js-679-		//Append it after the actual current item
dw-free/htdocs/js/jquery/jquery.ui.sortable.js-680-		self.currentItem.after(self.placeholder);
dw-free/htdocs/js/jquery/jquery.ui.sortable.js-681-
dw-free/htdocs/js/jquery/jquery.ui.sortable.js:682:		//Update the size of the placeholder (TODO: Logic to fuzzy, see line 316/317)
dw-free/htdocs/js/jquery/jquery.ui.sortable.js-683-		o.placeholder.update(self, self.placeholder);
dw-free/htdocs/js/jquery/jquery.ui.sortable.js-684-
dw-free/htdocs/js/jquery/jquery.ui.sortable.js-685-	},
--
dw-free/htdocs/js/jquery/jquery.ui.core.js-285-			return true;
dw-free/htdocs/js/jquery/jquery.ui.core.js-286-		}
dw-free/htdocs/js/jquery/jquery.ui.core.js-287-	
dw-free/htdocs/js/jquery/jquery.ui.core.js:288:		// TODO: determine which cases actually cause this to happen
dw-free/htdocs/js/jquery/jquery.ui.core.js-289-		// if the element doesn't have the scroll set, see if it's possible to
dw-free/htdocs/js/jquery/jquery.ui.core.js-290-		// set the scroll
dw-free/htdocs/js/jquery/jquery.ui.core.js-291-		el[ scroll ] = 1;
--
dw-free/htdocs/js/jquery.tagselector.js-30-    };
dw-free/htdocs/js/jquery.tagselector.js-31-
dw-free/htdocs/js/jquery.tagselector.js-32-    function _tags() {
dw-free/htdocs/js/jquery.tagselector.js:33:        // FIXME: more generic, please
dw-free/htdocs/js/jquery.tagselector.js-34-        var tags_data = $("#taglist").data("autocompletewithunknown");
dw-free/htdocs/js/jquery.tagselector.js-35-        return tags_data ? tags_data.cache[tags_data.currentCache] : null;
dw-free/htdocs/js/jquery.tagselector.js-36-    }
--
dw-free/htdocs/js/6alib/core.js-379-        if( c >= " " )
dw-free/htdocs/js/6alib/core.js-380-            return c;
dw-free/htdocs/js/6alib/core.js-381-        
dw-free/htdocs/js/6alib/core.js:382:        // try \uXXXX escaping, but shouldn't make it for case 1, 2
dw-free/htdocs/js/6alib/core.js-383-        c = c.charCodeAt( 0 ).toString( 16 );
dw-free/htdocs/js/6alib/core.js-384-        switch( c.length ) {
dw-free/htdocs/js/6alib/core.js-385-            case 1: return "\\u000" + c;
--
dw-free/htdocs/js/6alib/inputcomplete.js-1-/* input completion library */
dw-free/htdocs/js/6alib/inputcomplete.js-2-
dw-free/htdocs/js/6alib/inputcomplete.js:3:/* TODO:
dw-free/htdocs/js/6alib/inputcomplete.js-4-    -- test on non-US keyboard layouts (too much use of KeyCode)
dw-free/htdocs/js/6alib/inputcomplete.js-5-    -- lazy data model (xmlhttprequest, or generic callbacks)
dw-free/htdocs/js/6alib/inputcomplete.js-6-    -- drop-down menu?
--
dw-free/htdocs/js/6alib/inputcomplete.js-307-
dw-free/htdocs/js/6alib/inputcomplete.js-308-    this.dbg("onKeyDown, code="+code+", shift="+e.shiftKey);
dw-free/htdocs/js/6alib/inputcomplete.js-309-    
dw-free/htdocs/js/6alib/inputcomplete.js:310:    // if comma, but not with a shift which would be "<".  (FIXME: what about other keyboards layouts?)
dw-free/htdocs/js/6alib/inputcomplete.js:311:    //FIXME: may be there is a stable cross-browser way to detect so-called other keyboard layouts - but i don't know anything easier than ... (see onKeyUp changes in tis revision)
dw-free/htdocs/js/6alib/inputcomplete.js-312-    /*if ((code == 188 || code == 44) && ! e.shiftKey && this.caretAtEndOfNotSelected()) {
dw-free/htdocs/js/6alib/inputcomplete.js-313-        this.moveCaretToEnd();
dw-free/htdocs/js/6alib/inputcomplete.js-314-        return Event.stop(e);
--
dw-free/htdocs/js/tests/qunit.js-75-		} );
dw-free/htdocs/js/tests/qunit.js-76-
dw-free/htdocs/js/tests/qunit.js-77-		// allow utility functions to access the current test environment
dw-free/htdocs/js/tests/qunit.js:78:		// TODO why??
dw-free/htdocs/js/tests/qunit.js-79-		QUnit.current_testEnvironment = this.testEnvironment;
dw-free/htdocs/js/tests/qunit.js-80-		
dw-free/htdocs/js/tests/qunit.js-81-		try {
--
dw-free/htdocs/js/subfilters.js-335-    $.post( '/__rpc_contentfilters?mode=save_filters&user=' + DW.currentUser,
dw-free/htdocs/js/subfilters.js-336-        { 'json': JSON.stringify( cfFilters ) },
dw-free/htdocs/js/subfilters.js-337-        function( data ) {
dw-free/htdocs/js/subfilters.js:338:            // FIXME: error handling...
dw-free/htdocs/js/subfilters.js-339-            if ( !data.ok )
dw-free/htdocs/js/subfilters.js-340-                return;
dw-free/htdocs/js/subfilters.js-341-
--
dw-free/htdocs/js/subfilters.js-368-    if ( !filt || !member )
dw-free/htdocs/js/subfilters.js-369-        return;
dw-free/htdocs/js/subfilters.js-370-
dw-free/htdocs/js/subfilters.js:371:    // FIXME: don't always reget the tags
dw-free/htdocs/js/subfilters.js-372-    $.getJSON( '/__rpc_general?mode=list_tags&user=' + user.username, cfUpdateTags );
dw-free/htdocs/js/subfilters.js-373-
dw-free/htdocs/js/subfilters.js-374-    // clear out both of the tag lists
--
dw-free/htdocs/js/subfilters.js-506-    $.getJSON( '/__rpc_contentfilters?mode=create_filter&user=' + DW.currentUser + '&name=' + name,
dw-free/htdocs/js/subfilters.js-507-        function( data ) {
dw-free/htdocs/js/subfilters.js-508-            // no id means some sort of failure
dw-free/htdocs/js/subfilters.js:509:            // FIXME: error handling so the user knows what's up
dw-free/htdocs/js/subfilters.js-510-            if ( !data.id || !data.name )
dw-free/htdocs/js/subfilters.js-511-                return;
dw-free/htdocs/js/subfilters.js-512-
--
dw-free/htdocs/js/subfilters.js-535-    if ( !filt )
dw-free/htdocs/js/subfilters.js-536-        return;
dw-free/htdocs/js/subfilters.js-537-
dw-free/htdocs/js/subfilters.js:538:    // FIXME: don't think dialogs are accessible at all
dw-free/htdocs/js/subfilters.js-539-    var renamed = prompt( 'Rename filter to:', filt.name );
dw-free/htdocs/js/subfilters.js-540-    if ( renamed != null )
dw-free/htdocs/js/subfilters.js-541-        filt.name = renamed;
--
dw-free/htdocs/js/subfilters.js-595-
dw-free/htdocs/js/subfilters.js-596-    $.getJSON( '/__rpc_contentfilters?mode=delete_filter&user=' + DW.currentUser + '&id=' + filt.id,
dw-free/htdocs/js/subfilters.js-597-        function( data ) {
dw-free/htdocs/js/subfilters.js:598:            // FIXME: error handling ...
dw-free/htdocs/js/subfilters.js-599-            if ( !data.ok )
dw-free/htdocs/js/subfilters.js-600-                return;
dw-free/htdocs/js/subfilters.js-601-
--
dw-free/htdocs/js/xbStyle.js-444-// elements, left,top are measured from the element's normal inline position.
dw-free/htdocs/js/xbStyle.js-445-// getLeft(), setLeft() operate on this type of coordinate.
dw-free/htdocs/js/xbStyle.js-446-//
dw-free/htdocs/js/xbStyle.js:447:// to allow dynamic positioning the getOffsetXXX and setOffsetXXX methods are
dw-free/htdocs/js/xbStyle.js-448-// defined to return and set the position of either an absolutely or relatively
dw-free/htdocs/js/xbStyle.js-449-// positioned element relative to the containing element.
dw-free/htdocs/js/xbStyle.js-450-//
--
dw-free/htdocs/js/xbStyle.js-546-  var position;
dw-free/htdocs/js/xbStyle.js-547-  
dw-free/htdocs/js/xbStyle.js-548-  //xxxHack: Due to limitations in Gecko's (0.9.6) ability to determine the 
dw-free/htdocs/js/xbStyle.js:549:  // effective position attribute , attempt to use offsetXXX
dw-free/htdocs/js/xbStyle.js-550-
dw-free/htdocs/js/xbStyle.js-551-  if (typeof(elm.offsetLeft) == 'number')
dw-free/htdocs/js/xbStyle.js-552-  {
--
dw-free/htdocs/js/xbStyle.js-590-  var position;
dw-free/htdocs/js/xbStyle.js-591-  
dw-free/htdocs/js/xbStyle.js-592-  //xxxHack: Due to limitations in Gecko's (0.9.6) ability to determine the 
dw-free/htdocs/js/xbStyle.js:593:  // effective position attribute , attempt to use offsetXXX
dw-free/htdocs/js/xbStyle.js-594-
dw-free/htdocs/js/xbStyle.js-595-  if (elm && typeof(elm.offsetLeft) == 'number')
dw-free/htdocs/js/xbStyle.js-596-  {
--
dw-free/htdocs/js/xbStyle.js-636-  var position;
dw-free/htdocs/js/xbStyle.js-637-  
dw-free/htdocs/js/xbStyle.js-638-  //xxxHack: Due to limitations in Gecko's (0.9.6) ability to determine the 
dw-free/htdocs/js/xbStyle.js:639:  // effective position attribute , attempt to use offsetXXX
dw-free/htdocs/js/xbStyle.js-640-
dw-free/htdocs/js/xbStyle.js-641-  if (typeof(elm.offsetTop) == 'number')
dw-free/htdocs/js/xbStyle.js-642-  {
--
dw-free/htdocs/js/xbStyle.js-680-  var position;
dw-free/htdocs/js/xbStyle.js-681-  
dw-free/htdocs/js/xbStyle.js-682-  //xxxHack: Due to limitations in Gecko's (0.9.6) ability to determine the 
dw-free/htdocs/js/xbStyle.js:683:  // effective position attribute , attempt to use offsetXXX
dw-free/htdocs/js/xbStyle.js-684-
dw-free/htdocs/js/xbStyle.js-685-  if (elm && typeof(elm.offsetTop) == 'number')
dw-free/htdocs/js/xbStyle.js-686-  {
--
dw-free/htdocs/js/jquery.contextualhover.js-260-        $relation.addClass("RelationshipStatus");
dw-free/htdocs/js/jquery.contextualhover.js-261-    }
dw-free/htdocs/js/jquery.contextualhover.js-262-
dw-free/htdocs/js/jquery.contextualhover.js:263:    // FIXME: double-check this when vgifts come out
dw-free/htdocs/js/jquery.contextualhover.js-264-    if ( ( data.is_person || data.is_comm ) && ! data.is_requester && data.can_receive_vgifts ) {
dw-free/htdocs/js/jquery.contextualhover.js-265-        var $sendvgift = $("<a></a>", { href: Site.siteroot + "/shop/vgift?to=" + data.username })
dw-free/htdocs/js/jquery.contextualhover.js-266-            .html("Send a virtual gift");
--
dw-free/htdocs/editicons.bml-520-            $body .= "<div class='pkg userpic_wrapper'>";
dw-free/htdocs/editicons.bml-521-            $body .= "<span class='EditIconsUserpic'>" .  $pic->imgtag . "</span>\n";
dw-free/htdocs/editicons.bml-522-
dw-free/htdocs/editicons.bml:523:            # FIXME: if no keywords then light grey text and empty out when you click in it
dw-free/htdocs/editicons.bml-524-            my $keywords = $pic->keywords;
dw-free/htdocs/editicons.bml-525-            my $comment = $pic->comment;
dw-free/htdocs/editicons.bml-526-            my $description = $pic->description;
--
dw-free/htdocs/misc/vcard.bml-8-    # Return a vCard for a user.
dw-free/htdocs/misc/vcard.bml-9-    # If mode=jabber, Return a Jabber vCard as per JEP-0054
dw-free/htdocs/misc/vcard.bml-10-    # For invalid users, just returns nothing.
dw-free/htdocs/misc/vcard.bml:11:    # FIXME: Should probably return 404 Not Found or something
dw-free/htdocs/misc/vcard.bml-12-
dw-free/htdocs/misc/vcard.bml-13-    if ($GET{'user'}) {
dw-free/htdocs/misc/vcard.bml-14-        my $user = LJ::canonical_username($GET{'user'});
--
dw-free/htdocs/misc/vcard.bml-46-
dw-free/htdocs/misc/vcard.bml-47-                    my $imagedata = $pic->imagedata;
dw-free/htdocs/misc/vcard.bml-48-
dw-free/htdocs/misc/vcard.bml:49:                    # TODO: If mode=jabber, scale the userpic to 96x96px.
dw-free/htdocs/misc/vcard.bml-50-
dw-free/htdocs/misc/vcard.bml-51-                    $ret .= "<PHOTO>";
dw-free/htdocs/misc/vcard.bml-52-                    $ret .= "<TYPE>".LJ::exml($type)."</TYPE>";
--
dw-free/htdocs/talkmulti.bml-92-        # first, unscreen everything for replycount and hasscreened to adjust
dw-free/htdocs/talkmulti.bml-93-        my @unscreen = grep { $talkinfo{$_}->[0] eq "S" } @talkids;
dw-free/htdocs/talkmulti.bml-94-        LJ::Talk::unscreen_comment($u, $itemid, @unscreen);
dw-free/htdocs/talkmulti.bml:95:        # FIXME: race condition here... somebody could get lucky and view items while unscreened.
dw-free/htdocs/talkmulti.bml-96-        # then delete, updating the log2 replycount as necessary
dw-free/htdocs/talkmulti.bml-97-
dw-free/htdocs/talkmulti.bml-98-        # Mark as spam
--
dw-free/htdocs/talkread.bml-84-    my $ditemid = $init->{'ditemid'}+0;
dw-free/htdocs/talkread.bml-85-
dw-free/htdocs/talkread.bml-86-    if ($old_url && $GET{'journal'}) {
dw-free/htdocs/talkread.bml:87:        # FIXME: add args
dw-free/htdocs/talkread.bml-88-        my %args = %GET;
dw-free/htdocs/talkread.bml-89-        delete $args{'journal'};
dw-free/htdocs/talkread.bml-90-        delete $args{'itemid'};
--
dw-free/htdocs/talkread.bml-104-    # now check for init->error, since we know the account wasn't renamed
dw-free/htdocs/talkread.bml-105-    return "<?h1 $ML{'Error'} h1?><?p $init->{'error'} p?>" if $init->{'error'};
dw-free/htdocs/talkread.bml-106-
dw-free/htdocs/talkread.bml:107:    # FIXME: Only gets past here if handle_with_bml has been set
dw-free/htdocs/talkread.bml-108-    # to 1. (eg. format=light, lynx site scheme)
dw-free/htdocs/talkread.bml-109-
dw-free/htdocs/talkread.bml-110-    $r->notes->{journalid} = $u->{userid};
--
dw-free/htdocs/latest.bml-31-    $feed = '' unless $feed && exists $LJ::LATEST_TAG_FEEDS{group_names}->{$feed};
dw-free/htdocs/latest.bml-32-    $tag = '' unless $tag = LJ::get_sitekeyword_id( $tag, 0 );
dw-free/htdocs/latest.bml-33-
dw-free/htdocs/latest.bml:34:    # if they want a format we don't support ... FIXME: implement all formats
dw-free/htdocs/latest.bml-35-    return "Sorry, that format is not supported yet."
dw-free/htdocs/latest.bml-36-        if $fmt ne 'html';
dw-free/htdocs/latest.bml-37-
--
dw-free/htdocs/latest.bml-132-    # put filtering options in a standout box
dw-free/htdocs/latest.bml-133-    $tagfeeds = "<div class='highlight-box' id='tagfeeds'>$tagfeeds</div>" if $tagfeeds;
dw-free/htdocs/latest.bml-134-
dw-free/htdocs/latest.bml:135:    # FIXME: don't english-strip this just yet. Needs some extra work
dw-free/htdocs/latest.bml-136-    # The entire page is cached for efficiency, so if anyone does ?uselang=x
dw-free/htdocs/latest.bml-137-    # /latest will show as that language to all users until cache expires
dw-free/htdocs/latest.bml-138-    my $ret = <<EOC;
--
dw-free/htdocs/shop/entercc.bml-57-    return BML::redirect( "$LJ::SITEROOT/shop/creditcard_wait?ordernum=" . $cart->ordernum . "&cctransid=" & $cart->{cctransid} )
dw-free/htdocs/shop/entercc.bml-58-        unless $cart->state == $DW::Shop::STATE_OPEN;
dw-free/htdocs/shop/entercc.bml-59-
dw-free/htdocs/shop/entercc.bml:60:    # FIXME: if they have a $0 cart, we don't support that yet
dw-free/htdocs/shop/entercc.bml-61-    return $ML{'.error.zerocart'}
dw-free/htdocs/shop/entercc.bml-62-        if $cart->total_cash == 0.00;
dw-free/htdocs/shop/entercc.bml-63-
--
dw-free/htdocs/shop/entercc.bml-209-    return $ML{'.error.megafail'}
dw-free/htdocs/shop/entercc.bml-210-        unless $cctransid && $cctransid > 0;
dw-free/htdocs/shop/entercc.bml-211-
dw-free/htdocs/shop/entercc.bml:212:    # FIXME: mega hack, we're depending on the storable state of the cart here
dw-free/htdocs/shop/entercc.bml-213-    # and this should really be in a db row somewhere so we can reverse it
dw-free/htdocs/shop/entercc.bml-214-    $cart->{cctransid} = $cctransid;
dw-free/htdocs/shop/entercc.bml-215-    $cart->save;
--
dw-free/htdocs/shop/checkout.bml-40-    return $ML{'.error.emptycart'}
dw-free/htdocs/shop/checkout.bml-41-        unless $cart->has_items;
dw-free/htdocs/shop/checkout.bml-42-
dw-free/htdocs/shop/checkout.bml:43:    # FIXME: if they have a $0 cart, we don't support that yet
dw-free/htdocs/shop/checkout.bml-44-    return $ML{'.error.zerocart'}
dw-free/htdocs/shop/checkout.bml-45-        if $cart->total_cash == 0.00 && $cart->total_points == 0;
dw-free/htdocs/shop/checkout.bml-46-
--
dw-free/htdocs/shop/creditcard.bml-47-    return BML::redirect( "$LJ::SITEROOT/shop/receipt?ordernum=" . $cart->ordernum )
dw-free/htdocs/shop/creditcard.bml-48-        unless $cart->state == $DW::Shop::STATE_OPEN;
dw-free/htdocs/shop/creditcard.bml-49-
dw-free/htdocs/shop/creditcard.bml:50:    # FIXME: if they have a $0 cart, we don't support that yet
dw-free/htdocs/shop/creditcard.bml-51-    return $ML{'.error.zerocart'}
dw-free/htdocs/shop/creditcard.bml-52-        if $cart->total_cash == 0.00;
dw-free/htdocs/shop/creditcard.bml-53-
--
dw-free/htdocs/search.bml-22-    use vars qw/ %POST %GET /;
dw-free/htdocs/search.bml-23-    use Storable;
dw-free/htdocs/search.bml-24-
dw-free/htdocs/search.bml:25:    # FIXME: english strip and make the UI a lot better :)
dw-free/htdocs/search.bml-26-
dw-free/htdocs/search.bml-27-    # if no gearman, bail
dw-free/htdocs/search.bml-28-    my $gc = LJ::gearman_client();
--
dw-free/htdocs/go.bml-26-     my $vhost;
dw-free/htdocs/go.bml-27-     $vhost = $POST{'redir_vhost'} if $POST{'redir_vhost'}=~/users|tilde|community|front|other/;
dw-free/htdocs/go.bml-28-     if ($vhost eq "other") {
dw-free/htdocs/go.bml:29:         # FIXME: lookup their domain alias, and make vhost be "other:domain.com";
dw-free/htdocs/go.bml-30-     }
dw-free/htdocs/go.bml-31-     my $base = LJ::journal_base($user, $vhost);
dw-free/htdocs/go.bml-32-     return $ML{'.error.redirkey'} unless $POST{'redir_key'} =~/^(\d\d\d\d)(\d\d)$/;
--
dw-free/htdocs/stats.bml-216-
dw-free/htdocs/stats.bml-217-
dw-free/htdocs/stats.bml-218- # return early, since the graphs below are pretty much broken now
dw-free/htdocs/stats.bml:219: # with index changes.  FIXME: make alternate means to generate stats
dw-free/htdocs/stats.bml-220- return $ret;
dw-free/htdocs/stats.bml-221-
dw-free/htdocs/stats.bml-222- ### graphs!
--
dw-free/htdocs/manage/banusers.bml-78-            $submit_msg = "<?warningbar $ML{'.editmsg'} warningbar?>";
dw-free/htdocs/manage/banusers.bml-79-        } elsif ( $POST{ban_list} ) {
dw-free/htdocs/manage/banusers.bml-80-            # first remove any users from the list that are not valid users
dw-free/htdocs/manage/banusers.bml:81:            # FIXME: we need load_user_multiple
dw-free/htdocs/manage/banusers.bml-82-            my @banlist_orig = split(/,/, $POST{ban_list});
dw-free/htdocs/manage/banusers.bml-83-            my @banlist;
dw-free/htdocs/manage/banusers.bml-84-            foreach my $banusername (@banlist_orig) {
--
dw-free/htdocs/manage/profile/index.bml-619-            push @errors, $ML{'.error.bio.toolong'};
dw-free/htdocs/manage/profile/index.bml-620-        }
dw-free/htdocs/manage/profile/index.bml-621-
dw-free/htdocs/manage/profile/index.bml:622:        # FIXME: validation AND POSTING are handled by widgets' handle_post() methods
dw-free/htdocs/manage/profile/index.bml-623-        # (introduce validate_post() ?)
dw-free/htdocs/manage/profile/index.bml-624-        my $save_search_index = $POST{'opt_showlocation'} =~ /^[YR]$/;
dw-free/htdocs/manage/profile/index.bml-625-        LJ::Widget->handle_post(\%POST, 'Location' => {save_search_index => $save_search_index});
--
dw-free/htdocs/manage/subscriptions/filters.bml-30-    return "<?needlogin?>" unless $remote;
dw-free/htdocs/manage/subscriptions/filters.bml-31-
dw-free/htdocs/manage/subscriptions/filters.bml-32-    # stick in some JS to set the current user
dw-free/htdocs/manage/subscriptions/filters.bml:33:    # FIXME: this should be done automatically as part of the templates!
dw-free/htdocs/manage/subscriptions/filters.bml-34-    my $ret = "<script type='text/javascript'>\n" .
dw-free/htdocs/manage/subscriptions/filters.bml-35-              "DW.currentUser = '" . $remote->user . "';\n" .
dw-free/htdocs/manage/subscriptions/filters.bml-36-              "DW.userIsPaid = " . ( $remote->is_paid ? 'true' : 'false' ) . ";\n" .
--
dw-free/htdocs/manage/emailpost.bml-353-        $ret .= "<?p $ML{'.success.helpmessage'} p?>" if @send_helpmessage;
dw-free/htdocs/manage/emailpost.bml-354-        if ($LJ::HELPURL{emailpost}) {
dw-free/htdocs/manage/emailpost.bml-355-            $ret .= "<?h1 $ML{'.instructions.header'} h1?>";
dw-free/htdocs/manage/emailpost.bml:356:            $ret .= "<?p FIXME: link to helpurl p?>";
dw-free/htdocs/manage/emailpost.bml-357-        }
dw-free/htdocs/manage/emailpost.bml-358-        return $ret;
dw-free/htdocs/manage/emailpost.bml-359-    }
--
dw-free/htdocs/manage/externalaccount.bml-274-    return "" unless $errs;
dw-free/htdocs/manage/externalaccount.bml-275-
dw-free/htdocs/manage/externalaccount.bml-276-    my $err = $errs->{$key}   or return "";
dw-free/htdocs/manage/externalaccount.bml:277:    # FIXME: red is temporary.  move to css.
dw-free/htdocs/manage/externalaccount.bml-278-    return "<div style='color: red' class='ljinlinesettingerror'>$err</div>";
dw-free/htdocs/manage/externalaccount.bml-279-}
dw-free/htdocs/manage/externalaccount.bml-280-
--
dw-free/htdocs/manage/externalaccount.bml-385-        $opts{password} = "" unless $opts{savepassword};
dw-free/htdocs/manage/externalaccount.bml-386-
dw-free/htdocs/manage/externalaccount.bml-387-        my $new_acct = DW::External::Account->create($u, \%opts);
dw-free/htdocs/manage/externalaccount.bml:388:        # FIXME add error if create fails.
dw-free/htdocs/manage/externalaccount.bml-389-        if ($new_acct) {
dw-free/htdocs/manage/externalaccount.bml-390-            return "&create=". $new_acct->acctid;
dw-free/htdocs/manage/externalaccount.bml-391-        } else {
--
dw-free/htdocs/tools/endpoints/getuserpics.bml-44-            width => $upic->width,
dw-free/htdocs/tools/endpoints/getuserpics.bml-45-            height => $upic->height,
dw-free/htdocs/tools/endpoints/getuserpics.bml-46-
dw-free/htdocs/tools/endpoints/getuserpics.bml:47:            # FIXME: update to a simple . "" conversion when we have a newer JSON version
dw-free/htdocs/tools/endpoints/getuserpics.bml-48-            #        ( no code ref will be required )
dw-free/htdocs/tools/endpoints/getuserpics.bml-49-            # we don't want the full version of alttext here, because the keywords, etc
dw-free/htdocs/tools/endpoints/getuserpics.bml-50-            # will already likely be displayed by the icon
--
dw-free/htdocs/tools/endpoints/contentfilters.bml-64-        foreach my $uid ( keys %$data ) {
dw-free/htdocs/tools/endpoints/contentfilters.bml-65-            my $member = $data->{$uid};
dw-free/htdocs/tools/endpoints/contentfilters.bml-66-
dw-free/htdocs/tools/endpoints/contentfilters.bml:67:            # FIXME: use load_userids_multiple to get the user objects...
dw-free/htdocs/tools/endpoints/contentfilters.bml-68-            $ret{members}->{$uid} = {
dw-free/htdocs/tools/endpoints/contentfilters.bml-69-                user => LJ::load_userid( $uid )->user,
dw-free/htdocs/tools/endpoints/contentfilters.bml-70-                adultcontent => $member->{adultcontent} || 'any',
--
dw-free/htdocs/tools/recent_email.bml-52-                unless $u;
dw-free/htdocs/tools/recent_email.bml-53-        }
dw-free/htdocs/tools/recent_email.bml-54-    } else {
dw-free/htdocs/tools/recent_email.bml:55:        # TODO: add a link to upgrading your account if you don't have the cap
dw-free/htdocs/tools/recent_email.bml-56-        return "Sorry, you are not able to view outgoing email."
dw-free/htdocs/tools/recent_email.bml-57-            unless $u->can_view_mailqueue;
dw-free/htdocs/tools/recent_email.bml-58-
--
dw-free/htdocs/tools/recent_email.bml-85-            $body .= "Errors:";
dw-free/htdocs/tools/recent_email.bml-86-            $body .= '<ul>';
dw-free/htdocs/tools/recent_email.bml-87-            foreach my $failure ($job->handle->failure_log) {
dw-free/htdocs/tools/recent_email.bml:88:                # TODO: we should get the error_time here and show it, but it isn't available currently :(
dw-free/htdocs/tools/recent_email.bml-89-                $body .= "<li>$failure</li>";
dw-free/htdocs/tools/recent_email.bml-90-            }
dw-free/htdocs/tools/recent_email.bml-91-            $body .= '</ul>';
--
dw-free/htdocs/tools/recent_comments.bml-217-                 }
dw-free/htdocs/tools/recent_comments.bml-218-            }
dw-free/htdocs/tools/recent_comments.bml-219-
dw-free/htdocs/tools/recent_comments.bml:220:            # FIXME: (David?) We'll have to make talk_multi.bml understand jtalkids in multiple posts
dw-free/htdocs/tools/recent_comments.bml-221-            #$ret .= " <nobr><input type='checkbox' name='selected_$r->{jtalkid}' id='s$r->{jtalkid}' />";
dw-free/htdocs/tools/recent_comments.bml-222-            #$ret .= " <label for='s$r->{jtalkid}'>$ML{'/talkread.bml.select'}</label></nobr>";
dw-free/htdocs/tools/recent_comments.bml-223-
Binary file dw-free/htdocs/palimg/colorpicker/longgrad.gif matches
Binary file dw-free/htdocs/palimg/shadow/topleft/tr.gif matches
Binary file dw-free/htdocs/palimg/shadow/bottomright/bl.gif matches
Binary file dw-free/htdocs/palimg/shadow/t.gif matches
Binary file dw-free/htdocs/palimg/shadow/topright/tl.gif matches
Binary file dw-free/htdocs/palimg/shadow/b.gif matches
Binary file dw-free/htdocs/palimg/shadow/bottomleft/br.gif matches
Binary file dw-free/htdocs/palimg/textures/terracotta.png matches
Binary file dw-free/htdocs/palimg/textures/wood.png matches
Binary file dw-free/htdocs/palimg/s1gradient.gif matches
Binary file dw-free/htdocs/palimg/deardiary/titleimages/nature.png matches
Binary file dw-free/htdocs/palimg/deardiary/titleimages/explosion.png matches
Binary file dw-free/htdocs/palimg/deardiary/titleimages/diamonds.png matches
Binary file dw-free/htdocs/palimg/deardiary/titleimages/bubbles.png matches
Binary file dw-free/htdocs/palimg/deardiary/titleimages/camouflage.png matches
Binary file dw-free/htdocs/palimg/deardiary/titleimages/clouds.png matches
Binary file dw-free/htdocs/palimg/deardiary/titleimages/urban.png matches
Binary file dw-free/htdocs/palimg/deardiary/titleimages/ramblings.png matches
Binary file dw-free/htdocs/palimg/deardiary/titleimages/nature2.png matches
Binary file dw-free/htdocs/palimg/deardiary/titleimages/bubblewrap.png matches
Binary file dw-free/htdocs/palimg/deardiary/titleimages/letters.png matches
Binary file dw-free/htdocs/palimg/deardiary/titleimages/futuristic.png matches
Binary file dw-free/htdocs/palimg/deardiary/headinggrad.png matches
--
dw-free/htdocs/delcomment.bml-28-    my $error = sub {
dw-free/htdocs/delcomment.bml-29-        if ($jsmode) {
dw-free/htdocs/delcomment.bml-30-            BML::finish();
dw-free/htdocs/delcomment.bml:31:            # FIXME: remove once we've switched over completely to jquery
dw-free/htdocs/delcomment.bml-32-            if ( !!$GET{json} ) {
dw-free/htdocs/delcomment.bml-33-                sleep 1 if $LJ::IS_DEV_SERVER;
dw-free/htdocs/delcomment.bml-34-                return JSON::objToJson( { error => $_[0] } );
--
dw-free/htdocs/profile.bml-236-        };
dw-free/htdocs/profile.bml-237-
dw-free/htdocs/profile.bml-238-        # separate openids by site
dw-free/htdocs/profile.bml:239:        # FIXME: use DW::External methods here?
dw-free/htdocs/profile.bml-240-        foreach my $u ( @$openids ) {
dw-free/htdocs/profile.bml-241-            my $id = $u->display_name;
dw-free/htdocs/profile.bml-242-            my @parts = split /\./, $id;
--
dw-free/htdocs/profile.bml-742-            # if the option to hide subscribers is set and the person cannot manage the communities.
dw-free/htdocs/profile.bml-743-            # It means the profile page is still broken to people who manage the community, though, but
dw-free/htdocs/profile.bml-744-            # it doesn't break things for smaller communities by not loading them for the admins.
dw-free/htdocs/profile.bml:745:            # FIXME: This overall situation of profile pages choking up for large amounts of subscribers or members
dw-free/htdocs/profile.bml-746-            #   needs to be fixed in a more elegant and useful way.
dw-free/htdocs/profile.bml-747-            unless $u->prop( 'opt_hidefriendofs' ) && ( !$remote || !$remote->can_manage( $u ) );
dw-free/htdocs/profile.bml-748-    }
Binary file dw-free/htdocs/stc/database/purple.png matches
Binary file dw-free/htdocs/stc/database/red.png matches
Binary file dw-free/htdocs/stc/database/blue.png matches
Binary file dw-free/htdocs/stc/fck/editor/skins/silver/toolbar/imagebutton.gif matches
--
dw-free/htdocs/stc/fck/editor/fckdialog.html-180-	 * Safari seems to have a bug with the time when RefreshSize() is executed - it
dw-free/htdocs/stc/fck/editor/fckdialog.html-181-	 * thinks frmMain's innerHeight is 0 if we query the value too soon after the
dw-free/htdocs/stc/fck/editor/fckdialog.html-182-	 * page is loaded in some circumstances. (#1316)
dw-free/htdocs/stc/fck/editor/fckdialog.html:183:	 * TODO : Maybe this is not needed anymore after #35.
dw-free/htdocs/stc/fck/editor/fckdialog.html-184-	 */
dw-free/htdocs/stc/fck/editor/fckdialog.html-185-	if ( FCKBrowserInfo.IsSafari )
dw-free/htdocs/stc/fck/editor/fckdialog.html-186-	{
--
dw-free/htdocs/stc/fck/editor/dialog/fck_table.html-137-	}
dw-free/htdocs/stc/fck/editor/dialog/fck_table.html-138-	else if ( bExists && eCaption )
dw-free/htdocs/stc/fck/editor/dialog/fck_table.html-139-	{
dw-free/htdocs/stc/fck/editor/dialog/fck_table.html:140:		// TODO: It causes an IE internal error if using removeChild or
dw-free/htdocs/stc/fck/editor/dialog/fck_table.html-141-		// table.deleteCaption() (see #505).
dw-free/htdocs/stc/fck/editor/dialog/fck_table.html-142-		if ( oEditor.FCKBrowserInfo.IsIE )
dw-free/htdocs/stc/fck/editor/dialog/fck_table.html-143-			eCaption.innerHTML = '' ;
Binary file dw-free/htdocs/stc/funkycircles/nevermore-background.png matches
Binary file dw-free/htdocs/stc/bannering/blackhill.jpg matches
Binary file dw-free/htdocs/stc/bannering/frostynight_tile.png matches
Binary file dw-free/htdocs/stc/abstractia/blacklace.png matches
--
dw-free/htdocs/editjournal.bml-206-                $spellcheck_html = "<?inerr $ML{'entryform.spellcheck.noerrors'} inerr?>" unless $spellcheck_html ne "";
dw-free/htdocs/editjournal.bml-207-            }
dw-free/htdocs/editjournal.bml-208-
dw-free/htdocs/editjournal.bml:209:            # TODO: Move this to the protocol?
dw-free/htdocs/editjournal.bml-210-            if ($POST{'action:savemaintainer'} && !$disabled_spamdelete) {
dw-free/htdocs/editjournal.bml-211-                return LJ::bad_input($ML{'error.invalidform'}) unless LJ::check_form_auth();
dw-free/htdocs/editjournal.bml-212-
--
dw-free/htdocs/editjournal.bml-430-            $entry->{prop_last_fm_user} = $u_for_entry->prop('last_fm_user');
dw-free/htdocs/editjournal.bml-431-
dw-free/htdocs/editjournal.bml-432-            # add property for xpost data (this is removed by the getevents protocol)
dw-free/htdocs/editjournal.bml:433:            # FIXME: this should be added by the entry form, but since it doesn't have an
dw-free/htdocs/editjournal.bml-434-            # entry object right now, this is just easier
dw-free/htdocs/editjournal.bml-435-            $entry->{prop_xpost} = $entry_obj->prop( 'xpost' );
dw-free/htdocs/editjournal.bml-436-
--
dw-free/htdocs/openid/approve.bml-41-    $site =~ s/\?.*//;
dw-free/htdocs/openid/approve.bml-42-    return $err->($ML{'.error.invalid_site_address'}) unless $site =~ m!^https?://!;
dw-free/htdocs/openid/approve.bml-43-
dw-free/htdocs/openid/approve.bml:44:    # TODO: check URL and see if it contains images or external scripts/css/images, where
dw-free/htdocs/openid/approve.bml-45-    # an attacker could sniff the validation tokens in the Referer header?
dw-free/htdocs/openid/approve.bml-46-    
dw-free/htdocs/openid/approve.bml-47-    my $nos = LJ::OpenID::server();
--
dw-free/htdocs/feeds/index.bml-109-                    my ($type, $val) = ($1, $2);
dw-free/htdocs/feeds/index.bml-110-                    # RSS/Atom
dw-free/htdocs/feeds/index.bml-111-                    # <link rel="alternate" type="application/(?:rss|atom)+xml" title="RSS" href="http://...." />
dw-free/htdocs/feeds/index.bml:112:                    # FIXME: deal with relative paths (eg, href="blah.rss") ... right now we need the full URI
dw-free/htdocs/feeds/index.bml-113-                    if ($type eq "link" &&
dw-free/htdocs/feeds/index.bml-114-                        $val =~ m!rel=.alternate.!i &&
dw-free/htdocs/feeds/index.bml-115-                        $val =~ m!type=.application/(?:rss|atom)\+xml.!i &&
--
dw-free/htdocs/community/members.bml-503-    my $dbr = LJ::get_db_reader();
dw-free/htdocs/community/members.bml-504-
dw-free/htdocs/community/members.bml-505-    # get all community edges
dw-free/htdocs/community/members.bml:506:    # FIXME: kind of lame to do it this way, manually, instead of having accessors for this...
dw-free/htdocs/community/members.bml-507-    my $sth = $dbr->prepare("SELECT r.targetid, r.type, u.user FROM reluser r, useridmap u " .
dw-free/htdocs/community/members.bml-508-                            "WHERE r.targetid = u.userid AND r.userid=? AND r.type IN ($typein)");
dw-free/htdocs/community/members.bml-509-    $sth->execute($cid);
--
dw-free/views/admin/stats.tt-20-
dw-free/views/admin/stats.tt-21-[%#
dw-free/views/admin/stats.tt-22-
dw-free/views/admin/stats.tt:23:FIXME: remove this when you have implemented them all 
dw-free/views/admin/stats.tt-24-
dw-free/views/admin/stats.tt-25-* Number of accounts, total (done)
dw-free/views/admin/stats.tt-26-* Number of accounts active (done)
--
dw-free/views/dev/tests/quickreply.js-289-});
dw-free/views/dev/tests/quickreply.js-290-
dw-free/views/dev/tests/quickreply.js-291-test( "submit post", 0, function() {
dw-free/views/dev/tests/quickreply.js:292:    // FIXME: add test
dw-free/views/dev/tests/quickreply.js-293-});
dw-free/views/dev/tests/quickreply.js-294-test( "submit preview", 0, function() {
dw-free/views/dev/tests/quickreply.js:295:    // FIXME: add test
dw-free/views/dev/tests/quickreply.js-296-});
dw-free/views/dev/tests/quickreply.js-297-test( "submit more options", 0, function() {
dw-free/views/dev/tests/quickreply.js:298:    // FIXME: add test
dw-free/views/dev/tests/quickreply.js-299-});
--
dw-free/views/dev/tests/quickreply.html-39-            <tr>
dw-free/views/dev/tests/quickreply.html-40-                <td>&nbsp;</td>
dw-free/views/dev/tests/quickreply.html-41-                <td colspan="3" align="left">
dw-free/views/dev/tests/quickreply.html:42:                    <input type="submit" name="submitpost" value="Post Comment" id="submitpost" onclick="/*if (checkLength()) {submitform();}*/"> <!-- TODO: -->
dw-free/views/dev/tests/quickreply.html-43-                    &nbsp;
dw-free/views/dev/tests/quickreply.html:44:                    <input type="submit" name="submitpview" value="Preview" id="submitpview" onclick="/*preview()*/"> <!-- TODO -->
dw-free/views/dev/tests/quickreply.html-45-                    <input type="hidden" name="submitpreview" value="0">
dw-free/views/dev/tests/quickreply.html-46-                    &nbsp;
dw-free/views/dev/tests/quickreply.html:47:                    <input type="submit" name="submitmoreopts" value="More Options..." id="submitmoreopts" onclick="/*if (moreopts()) {submitform();}*/"> <!-- TODO -->
dw-free/views/dev/tests/quickreply.html-48-                    <br><span class="de"><b>Notice!</b> This user has turned on the option that logs your IP address when posting.</span>
dw-free/views/dev/tests/quickreply.html-49-                </td>
dw-free/views/dev/tests/quickreply.html-50-            </tr>
--
dw-free/views/dev/tests/tagselector.js-34-    // (so we must fix this at a server level)
dw-free/views/dev/tests/tagselector.js-35-    var breaking = [ 1337 ];
dw-free/views/dev/tests/tagselector.js-36-
dw-free/views/dev/tests/tagselector.js:37:    // FIXME: needs to be more generic
dw-free/views/dev/tests/tagselector.js-38-    var tags_data = { currentCache: "foo",
dw-free/views/dev/tests/tagselector.js-39-                      cache: { "foo": tags, "breaking": breaking },
dw-free/views/dev/tests/tagselector.js-40-                      cachemap: {},
--
dw-free/views/shop/points.tt-26-
dw-free/views/shop/points.tt-27-<p id='points-about'>[% '.about2' | ml %]</p>
dw-free/views/shop/points.tt-28-
dw-free/views/shop/points.tt:29:[%# FIXME: move this to shop.js or something %]
dw-free/views/shop/points.tt-30-<script type='text/javascript'>
dw-free/views/shop/points.tt-31-    jQuery( function($) {
dw-free/views/shop/points.tt-32-        setInterval(
--
dw-free/views/shop/icons.tt-27-
dw-free/views/shop/icons.tt-28-<p id='icons-about'>[% '.about2' | ml %]</p>
dw-free/views/shop/icons.tt-29-
dw-free/views/shop/icons.tt:30:[%# FIXME: move this to shop.js or something %]
dw-free/views/shop/icons.tt-31-<script type='text/javascript'>
dw-free/views/shop/icons.tt-32-    jQuery( function($) {
dw-free/views/shop/icons.tt-33-        setInterval(
--
dw-free/views/entry/module-displaydate.tt-19-        [%- form.hidden(
dw-free/views/entry/module-displaydate.tt-20-            name  = "trust_datetime"
dw-free/views/entry/module-displaydate.tt-21-            id    = "trust_datetime"
dw-free/views/entry/module-displaydate.tt:22:            value = displaydate.trust_initial   # FIXME: do this in the controller, rather than here?
dw-free/views/entry/module-displaydate.tt-23-        ) -%]
dw-free/views/entry/module-displaydate.tt-24-
dw-free/views/entry/module-displaydate.tt-25-        [%- entrytime_title = ".title.entrytime" | ml( example = "$displaydate.year-01-30" );
--
dw-free/views/entry/module-comments-new.tt-24-    </select>
dw-free/views/entry/module-comments-new.tt-25-  </p>
dw-free/views/entry/module-comments-new.tt-26-  <p>
dw-free/views/entry/module-comments-new.tt:27:    <!-- TODO: also tweak "Enable comments" under the privacy tab: remove no one, rename to "Commenting Security" -->
dw-free/views/entry/module-comments-new.tt-28-    <label class='unimplemented' for="comment_permissions">Allow from:</label>
dw-free/views/entry/module-comments-new.tt-29-    <select class='unimplemented select' name="comment_permissions" id="comment_permissions" class="select">
dw-free/views/entry/module-comments-new.tt-30-      <option value="" selected="selected">Journal Default</option>
--
dw-free/views/entry/form.tt-171-            <fieldset>
dw-free/views/entry/form.tt-172-                <legend></legend>
dw-free/views/entry/form.tt-173-
dw-free/views/entry/form.tt:174:                <!-- FIXME: TODO
dw-free/views/entry/form.tt-175-                <div class="permalink unimplemented">permalink: <span class="url">http://long-username-is-long.dreamwidth.org/12345.html</span></div>
dw-free/views/entry/form.tt-176-                -->
dw-free/views/entry/form.tt-177-
dw-free/views/entry/form.tt:178:                <!-- TODO make this only take up one tab area? -->
dw-free/views/entry/form.tt-179-                <div class="toolbar">
dw-free/views/entry/form.tt-180-                    <div id="main-tools" class='subtoolbar'>
dw-free/views/entry/form.tt-181-                        [%- IF remote.can_create_polls OR journalu.can_create_polls -%]
--
dw-free/views/entry/form.tt-186-                    </div>
dw-free/views/entry/form.tt-187-
dw-free/views/entry/form.tt-188-                    <div id="settings-tools" class='subtoolbar' aria-live="polite">
dw-free/views/entry/form.tt:189:                    <!-- TODO:
dw-free/views/entry/form.tt-190-                    autoformat
dw-free/views/entry/form.tt-191-                    supported html...
dw-free/views/entry/form.tt-192-                    -->
dw-free/views/entry/form.tt-193-                    </div>
dw-free/views/entry/form.tt-194-
dw-free/views/entry/form.tt-195-                    <div id="plaintext-tools" class='subtoolbar'>
dw-free/views/entry/form.tt:196:                        <!-- TODO: needs to be JS only -->
dw-free/views/entry/form.tt-197-                        <input type='button' value='Insert image' class='unimplemented' />
dw-free/views/entry/form.tt-198-                        <input type='button' value='Embed media' class='unimplemented' />
dw-free/views/entry/form.tt-199-                        <input type="button" value="Use Rich Text Mode" class='unimplemented' />
--
dw-free/views/entry/form.tt-287-            -%]
dw-free/views/entry/form.tt-288-        </span>
dw-free/views/entry/form.tt-289-
dw-free/views/entry/form.tt:290:<!--    TODO:
dw-free/views/entry/form.tt-291-        <span class="otheractions unimplemented">
dw-free/views/entry/form.tt-292-            <input type='submit' name="action:delete" value='Delete' />
dw-free/views/entry/form.tt-293-        </span>
--
dw-nonfree/cgi-bin/DW/BusinessRules/InviteCodes/DWS.pm-91-    my $uids = DW::Pay::get_current_paid_userids( limit => $max_nusers,
dw-nonfree/cgi-bin/DW/BusinessRules/InviteCodes/DWS.pm-92-                                                  @$search_arg );
dw-nonfree/cgi-bin/DW/BusinessRules/InviteCodes/DWS.pm-93-
dw-nonfree/cgi-bin/DW/BusinessRules/InviteCodes/DWS.pm:94:    # TODO: Allow nonvalidated email addresses? We need to deal with users who
dw-nonfree/cgi-bin/DW/BusinessRules/InviteCodes/DWS.pm-95-    # shouldn't be send email for some reason anyway (eg because they opted out
dw-nonfree/cgi-bin/DW/BusinessRules/InviteCodes/DWS.pm-96-    # of mass mailings) by putting the notice in their inbox instead (or in
dw-nonfree/cgi-bin/DW/BusinessRules/InviteCodes/DWS.pm-97-    # addition) or discarding it altogether, so might as well handle
--
dw-nonfree/cgi-bin/DW/BusinessRules/InviteCodes/DWS.pm-129-    return ($max_nusers <= scalar @uids) ? \@uids : _filter_pav( \@uids );
dw-nonfree/cgi-bin/DW/BusinessRules/InviteCodes/DWS.pm-130-}
dw-nonfree/cgi-bin/DW/BusinessRules/InviteCodes/DWS.pm-131-
dw-nonfree/cgi-bin/DW/BusinessRules/InviteCodes/DWS.pm:132:# TODO: refactor into DW::InviteCodes
dw-nonfree/cgi-bin/DW/BusinessRules/InviteCodes/DWS.pm-133-# Search "acctcode" (unclustered) for users with no invite left
dw-nonfree/cgi-bin/DW/BusinessRules/InviteCodes/DWS.pm-134-sub _search_noinvleft {
dw-nonfree/cgi-bin/DW/BusinessRules/InviteCodes/DWS.pm-135-    my ($uckey, $max_nusers) = @_;
--
dw-nonfree/cgi-bin/DW/BusinessRules/InviteCodes/DWS.pm-150-    return $uids;
dw-nonfree/cgi-bin/DW/BusinessRules/InviteCodes/DWS.pm-151-}
dw-nonfree/cgi-bin/DW/BusinessRules/InviteCodes/DWS.pm-152-
dw-nonfree/cgi-bin/DW/BusinessRules/InviteCodes/DWS.pm:153:# TODO: refactor into DW::InviteCodes
dw-nonfree/cgi-bin/DW/BusinessRules/InviteCodes/DWS.pm-154-# Search "acctcode" (unclustered) for users with no invite left, then restrict
dw-nonfree/cgi-bin/DW/BusinessRules/InviteCodes/DWS.pm-155-# to those having at least one active or paid invitee
dw-nonfree/cgi-bin/DW/BusinessRules/InviteCodes/DWS.pm-156-sub _search_noinvleft_apinvitee {
--
dw-nonfree/cgi-bin/DW/BusinessRules/InviteCodes/DWS.pm-195-    my ($in_uids) = @_;
dw-nonfree/cgi-bin/DW/BusinessRules/InviteCodes/DWS.pm-196-    my @out_uids;
dw-nonfree/cgi-bin/DW/BusinessRules/InviteCodes/DWS.pm-197-
dw-nonfree/cgi-bin/DW/BusinessRules/InviteCodes/DWS.pm:198:    # TODO: make magic number configurable.
dw-nonfree/cgi-bin/DW/BusinessRules/InviteCodes/DWS.pm:199:    # TODO: use splice() # perldoc -f splice
dw-nonfree/cgi-bin/DW/BusinessRules/InviteCodes/DWS.pm-200-    for (my $start = 0; $start < @$in_uids; $start += 1000) {
dw-nonfree/cgi-bin/DW/BusinessRules/InviteCodes/DWS.pm-201-        my $end = ($start + 999 <= $#$in_uids) ? $start + 999 : $#$in_uids;
dw-nonfree/cgi-bin/DW/BusinessRules/InviteCodes/DWS.pm-202-        my $uhash = LJ::load_userids( @{$in_uids}[$start..$end] );
Binary file dw-nonfree/htdocs/img/mood/dreamy_ds/blank.gif matches
Binary file dw-nonfree/htdocs/img/mood/dreamy_ds/working.gif matches
Binary file dw-nonfree/htdocs/img/mood/dreamy_ds/bored.gif matches
Binary file dw-nonfree/htdocs/img/customize/previews/transmogrified/whiteorblack.png matches
Binary file dw-nonfree/htdocs/img/customize/previews/transmogrified/greydays.png matches
Binary file dw-nonfree/htdocs/img/gradation/dw_logo_gradation_beta.png matches
Binary file dw-nonfree/htdocs/img/gradation/dw_logo_gradation.png matches
